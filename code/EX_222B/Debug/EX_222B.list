
EX_222B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d8  080004d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004dc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b7f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000332  00000000  00000000  00002bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000069  00000000  00000000  00002f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d64  00000000  00000000  00002ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b0f  00000000  00000000  00017d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000726c7  00000000  00000000  00018864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008af2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000018c  00000000  00000000  0008af70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0008b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004bc 	.word	0x080004bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004bc 	.word	0x080004bc

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <EXTI0_IRQHandler>:

// Static variable only accessible in this file
static button_callback_t on_button_press = 0x00;

void EXTI0_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	if (on_button_press != 0x00) {
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <EXTI0_IRQHandler+0x24>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <EXTI0_IRQHandler+0x12>
		on_button_press();
 8000270:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <EXTI0_IRQHandler+0x24>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4798      	blx	r3
	}

	EXTI->PR |= EXTI_PR_PR0; // clear interrupt flag
 8000276:	4b05      	ldr	r3, [pc, #20]	@ (800028c <EXTI0_IRQHandler+0x28>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a04      	ldr	r2, [pc, #16]	@ (800028c <EXTI0_IRQHandler+0x28>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000020 	.word	0x20000020
 800028c:	40010400 	.word	0x40010400

08000290 <button_init>:

void button_init(button_callback_t callback)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	on_button_press = callback;
 8000298:	4a12      	ldr	r2, [pc, #72]	@ (80002e4 <button_init+0x54>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <button_init+0x58>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <button_init+0x58>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6193      	str	r3, [r2, #24]

	// Configure PA0 as input (default after reset, so can be skipped technically)

	// Map PA0 to EXTI0
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0; // 0x00 = PA0
 80002aa:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <button_init+0x5c>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a0f      	ldr	r2, [pc, #60]	@ (80002ec <button_init+0x5c>)
 80002b0:	f023 030f 	bic.w	r3, r3, #15
 80002b4:	6093      	str	r3, [r2, #8]

	// Set rising edge trigger
	EXTI->RTSR |= EXTI_RTSR_TR0;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <button_init+0x60>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <button_init+0x60>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6093      	str	r3, [r2, #8]

	// Unmask EXTI0
	EXTI->IMR |= EXTI_IMR_MR0;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <button_init+0x60>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <button_init+0x60>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]

	// Set NVIC priority and enable EXTI0 interrupt
	NVIC_SetPriority(EXTI0_IRQn, 1);
 80002ce:	2101      	movs	r1, #1
 80002d0:	2006      	movs	r0, #6
 80002d2:	f7ff ff9d 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002d6:	2006      	movs	r0, #6
 80002d8:	f7ff ff7c 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000020 	.word	0x20000020
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010000 	.word	0x40010000
 80002f0:	40010400 	.word	0x40010400

080002f4 <enable_clocks>:
#include <stm32f303xc.h>

#include "button.h"   // include the button module
//#include "leds.h"     // you'll create this soon

void enable_clocks() {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <enable_clocks+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <enable_clocks+0x1c>)
 80002fe:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000302:	6153      	str	r3, [r2, #20]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <initialise_board>:

void initialise_board() {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <initialise_board+0x20>)
 800031c:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000324:	801a      	strh	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	48001002 	.word	0x48001002

08000338 <chase_led>:

void chase_led() {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
	static uint8_t led_mask = 0;
	static uint8_t direction = 1;
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800033e:	4b17      	ldr	r3, [pc, #92]	@ (800039c <chase_led+0x64>)
 8000340:	607b      	str	r3, [r7, #4]

	if (direction) {
 8000342:	4b17      	ldr	r3, [pc, #92]	@ (80003a0 <chase_led+0x68>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d011      	beq.n	800036e <chase_led+0x36>
		led_mask = (led_mask << 1) | 1;
 800034a:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <chase_led+0x6c>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	b25b      	sxtb	r3, r3
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	b25b      	sxtb	r3, r3
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <chase_led+0x6c>)
 800035c:	701a      	strb	r2, [r3, #0]
		if (led_mask == 0xFF) {
 800035e:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <chase_led+0x6c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2bff      	cmp	r3, #255	@ 0xff
 8000364:	d110      	bne.n	8000388 <chase_led+0x50>
			direction = 0;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <chase_led+0x68>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e00c      	b.n	8000388 <chase_led+0x50>
		}
	} else {
		led_mask >>= 1;
 800036e:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <chase_led+0x6c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	085b      	lsrs	r3, r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <chase_led+0x6c>)
 8000378:	701a      	strb	r2, [r3, #0]
		if (led_mask == 0x00) {
 800037a:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <chase_led+0x6c>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d102      	bne.n	8000388 <chase_led+0x50>
			direction = 1;
 8000382:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <chase_led+0x68>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
		}
	}

	*led_register = led_mask;
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <chase_led+0x6c>)
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	701a      	strb	r2, [r3, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	48001015 	.word	0x48001015
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000024 	.word	0x20000024

080003a8 <test_callback>:

void test_callback(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
    //this function is there for testing purposes. It shows that the callback function is working
	//It will first turn on the PE8 LED (which flashes off then on, and then turns on/off the LED as requsted by the task
	//To implement testing, change the line in in the main function

	// Turn on PE8 (LED)
    GPIOE->ODR |= (1 << 8);
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <test_callback+0x54>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <test_callback+0x54>)
 80003b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b8:	6153      	str	r3, [r2, #20]

    // Simple software delay (you can adjust the delay loop to make it more visible)
    for (volatile int i = 0; i < 1000000; i++) {}  // Increase delay time for visibility
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	e002      	b.n	80003c6 <test_callback+0x1e>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <test_callback+0x58>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	ddf8      	ble.n	80003c0 <test_callback+0x18>

    // Turn off PE8 (LED)
    GPIOE->ODR &= ~(1 << 8);
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <test_callback+0x54>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <test_callback+0x54>)
 80003d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003d8:	6153      	str	r3, [r2, #20]

    // Simple software delay to ensure the LED stays off for a short period
    for (volatile int i = 0; i < 1000000; i++) {}  // Adjust delay time here
 80003da:	2300      	movs	r3, #0
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	e002      	b.n	80003e6 <test_callback+0x3e>
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	3301      	adds	r3, #1
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <test_callback+0x58>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	ddf8      	ble.n	80003e0 <test_callback+0x38>

    // Then call the chase_led function
    chase_led();
 80003ee:	f7ff ffa3 	bl	8000338 <chase_led>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	48001000 	.word	0x48001000
 8000400:	000f423f 	.word	0x000f423f

08000404 <main>:

int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	enable_clocks();
 8000408:	f7ff ff74 	bl	80002f4 <enable_clocks>
	initialise_board();
 800040c:	f7ff ff82 	bl	8000314 <initialise_board>

	// register chase_led as a button press callback
	//button_init(chase_led);

	//Testing Line (make sure to comment the above button_init function first
	button_init(test_callback);
 8000410:	4802      	ldr	r0, [pc, #8]	@ (800041c <main+0x18>)
 8000412:	f7ff ff3d 	bl	8000290 <button_init>

	while (1) {
 8000416:	bf00      	nop
 8000418:	e7fd      	b.n	8000416 <main+0x12>
 800041a:	bf00      	nop
 800041c:	080003a9 	.word	0x080003a9

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	@ (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	@ (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	@ (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	@ (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 f811 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ffd7 	bl	8000404 <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000464:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 8000468:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800046c:	20000028 	.word	0x20000028

08000470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_2_IRQHandler>
	...

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	@ (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	@ (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	@ (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	@ (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004d4 	.word	0x080004d4
 80004b0:	080004d4 	.word	0x080004d4
 80004b4:	080004d4 	.word	0x080004d4
 80004b8:	080004d8 	.word	0x080004d8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
