
EX_222D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000574  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ecf  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000485  00000000  00000000  00002f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  00003388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000094  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e37  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000105e  00000000  00000000  00018333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007277a  00000000  00000000  00019391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008bb0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000238  00000000  00000000  0008bb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0008bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000554 	.word	0x08000554

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000554 	.word	0x08000554

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <configure_timer>:

// Flag to track if the button is ready for another press (1 second cooldown)
volatile uint8_t button_ready = 1;

// Timer configuration to track cooldown
void configure_timer(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000268:	4b12      	ldr	r3, [pc, #72]	@ (80002b4 <configure_timer+0x50>)
 800026a:	69db      	ldr	r3, [r3, #28]
 800026c:	4a11      	ldr	r2, [pc, #68]	@ (80002b4 <configure_timer+0x50>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	61d3      	str	r3, [r2, #28]

    // Set prescaler (PSC) to divide the timer clock to get 1-second delay
    TIM2->PSC = 7999;  // Assuming the clock is 8 MHz (adjust according to your MCU's clock)
 8000274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000278:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800027c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;   // Set auto-reload to 1000 for 1 second delay
 800027e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000286:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable the timer interrupt
    TIM2->DIER |= TIM_DIER_UIE;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	60d3      	str	r3, [r2, #12]

    // Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;
 8000298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6013      	str	r3, [r2, #0]

    // Enable NVIC interrupt for TIM2
    NVIC_EnableIRQ(TIM2_IRQn);
 80002a8:	201c      	movs	r0, #28
 80002aa:	f7ff ff93 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000

080002b8 <TIM2_IRQHandler>:

// Timer 2 interrupt handler (for cooldown)
void TIM2_IRQHandler(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    // Clear the interrupt flag by writing 1 to UIF (Update Interrupt Flag)
    TIM2->SR &= ~TIM_SR_UIF;
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	691b      	ldr	r3, [r3, #16]
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c6:	f023 0301 	bic.w	r3, r3, #1
 80002ca:	6113      	str	r3, [r2, #16]

    // Re-enable button presses
    button_ready = 1;
 80002cc:	4b03      	ldr	r3, [pc, #12]	@ (80002dc <TIM2_IRQHandler+0x24>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	701a      	strb	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	20000000 	.word	0x20000000

080002e0 <EXTI0_IRQHandler>:

// Button press interrupt handler
void EXTI0_IRQHandler(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
    // Only handle button press if it's ready (i.e., cooldown has passed)
    if (button_ready && on_button_press != 0x00) {
 80002e4:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <EXTI0_IRQHandler+0x3c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d00d      	beq.n	800030a <EXTI0_IRQHandler+0x2a>
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <EXTI0_IRQHandler+0x40>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d009      	beq.n	800030a <EXTI0_IRQHandler+0x2a>
        // Call the callback function
        on_button_press();
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <EXTI0_IRQHandler+0x40>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4798      	blx	r3

        // Disable further button presses during cooldown
        button_ready = 0;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <EXTI0_IRQHandler+0x3c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]

        // Start the timer for cooldown
        TIM2->CNT = 0;  // Reset the timer counter to start the cooldown
 8000302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000306:	2200      	movs	r2, #0
 8000308:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    // Clear the interrupt flag
    EXTI->PR |= EXTI_PR_PR0;
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <EXTI0_IRQHandler+0x44>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <EXTI0_IRQHandler+0x44>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6153      	str	r3, [r2, #20]
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000000 	.word	0x20000000
 8000320:	20000020 	.word	0x20000020
 8000324:	40010400 	.word	0x40010400

08000328 <button_init>:

void button_init(button_callback_t callback) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    on_button_press = callback;
 8000330:	4a13      	ldr	r2, [pc, #76]	@ (8000380 <button_init+0x58>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]

    // Enable SYSCFG clock
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <button_init+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <button_init+0x5c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]

    // Configure PA0 as input (default after reset, so can be skipped technically)

    // Map PA0 to EXTI0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0; // 0x00 = PA0
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <button_init+0x60>)
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	4a10      	ldr	r2, [pc, #64]	@ (8000388 <button_init+0x60>)
 8000348:	f023 030f 	bic.w	r3, r3, #15
 800034c:	6093      	str	r3, [r2, #8]

    // Set rising edge trigger
    EXTI->RTSR |= EXTI_RTSR_TR0;
 800034e:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <button_init+0x64>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <button_init+0x64>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6093      	str	r3, [r2, #8]

    // Unmask EXTI0 (enable interrupt for PA0)
    EXTI->IMR |= EXTI_IMR_MR0;
 800035a:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <button_init+0x64>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a0b      	ldr	r2, [pc, #44]	@ (800038c <button_init+0x64>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6013      	str	r3, [r2, #0]

    // Set NVIC priority and enable EXTI0 interrupt
    NVIC_SetPriority(EXTI0_IRQn, 1);
 8000366:	2101      	movs	r1, #1
 8000368:	2006      	movs	r0, #6
 800036a:	f7ff ff51 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800036e:	2006      	movs	r0, #6
 8000370:	f7ff ff30 	bl	80001d4 <__NVIC_EnableIRQ>

    // Configure the timer for cooldown
    configure_timer();
 8000374:	f7ff ff76 	bl	8000264 <configure_timer>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000020 	.word	0x20000020
 8000384:	40021000 	.word	0x40021000
 8000388:	40010000 	.word	0x40010000
 800038c:	40010400 	.word	0x40010400

08000390 <leds_init>:
#include "stm32f303xc.h"
#include "leds.h"

// LED GPIO Initialization (GPIOE, assuming LEDs are connected here)
void leds_init(void) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
	// Get a pointer to the second half word of the MODER register (for outputs PE8-PE15)
	    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <leds_init+0x20>)
 8000398:	607b      	str	r3, [r7, #4]
	    *led_output_registers = 0x5555;  // Set PE8-PE15 as output (01)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f245 5255 	movw	r2, #21845	@ 0x5555
 80003a0:	801a      	strh	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	48001002 	.word	0x48001002

080003b4 <leds_get_state>:

// Get the current state of the LEDs (PE8 to PE15 as a bitmask)
uint8_t leds_get_state(void) {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
    uint8_t state = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	71fb      	strb	r3, [r7, #7]
    state = (GPIOE->ODR >> 8) & 0xFF;  // Read ODR for PE8-PE15 and mask lower 8 bits
 80003be:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <leds_get_state+0x20>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	0a1b      	lsrs	r3, r3, #8
 80003c4:	71fb      	strb	r3, [r7, #7]
    return state;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	48001000 	.word	0x48001000

080003d8 <leds_set_state>:

// Set the state of the LEDs (PE8 to PE15 using a bitmask)
void leds_set_state(uint8_t state) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    GPIOE->ODR = (GPIOE->ODR & 0x00FF) | (state << 8); // Set only PE8-PE15
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <leds_set_state+0x28>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	021b      	lsls	r3, r3, #8
 80003ec:	4904      	ldr	r1, [pc, #16]	@ (8000400 <leds_set_state+0x28>)
 80003ee:	4313      	orrs	r3, r2
 80003f0:	614b      	str	r3, [r1, #20]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	48001000 	.word	0x48001000

08000404 <enable_clocks>:
#include <stdint.h>
#include <stm32f303xc.h>
#include "button.h"   // include the button module
#include "leds.h"     // include the new LED module

void enable_clocks() {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <enable_clocks+0x1c>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a04      	ldr	r2, [pc, #16]	@ (8000420 <enable_clocks+0x1c>)
 800040e:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000412:	6153      	str	r3, [r2, #20]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <initialise_board>:

void initialise_board() {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
    // Initialize the LEDs using the new LED module
    leds_init();
 8000428:	f7ff ffb2 	bl	8000390 <leds_init>
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <chase_led>:

void chase_led(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    static uint8_t led_mask = 0;
    static uint8_t direction = 1;

    // Get the current state of the LEDs
    led_mask = leds_get_state();
 8000434:	f7ff ffbe 	bl	80003b4 <leds_get_state>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <chase_led+0x64>)
 800043e:	701a      	strb	r2, [r3, #0]

    if (direction) {
 8000440:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <chase_led+0x68>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d011      	beq.n	800046c <chase_led+0x3c>
        led_mask = (led_mask << 1) | 1;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <chase_led+0x64>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	b25b      	sxtb	r3, r3
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	b25b      	sxtb	r3, r3
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <chase_led+0x64>)
 800045a:	701a      	strb	r2, [r3, #0]
        if (led_mask == 0xFF) {
 800045c:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <chase_led+0x64>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2bff      	cmp	r3, #255	@ 0xff
 8000462:	d110      	bne.n	8000486 <chase_led+0x56>
            direction = 0;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <chase_led+0x68>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	e00c      	b.n	8000486 <chase_led+0x56>
        }
    } else {
        led_mask >>= 1;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <chase_led+0x64>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	085b      	lsrs	r3, r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <chase_led+0x64>)
 8000476:	701a      	strb	r2, [r3, #0]
        if (led_mask == 0x00) {
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <chase_led+0x64>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <chase_led+0x56>
            direction = 1;
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <chase_led+0x68>)
 8000482:	2201      	movs	r2, #1
 8000484:	701a      	strb	r2, [r3, #0]
        }
    }

    // Set the new state of the LEDs
    leds_set_state(led_mask);
 8000486:	4b03      	ldr	r3, [pc, #12]	@ (8000494 <chase_led+0x64>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffa4 	bl	80003d8 <leds_set_state>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000024 	.word	0x20000024
 8000498:	20000001 	.word	0x20000001

0800049c <main>:

    // Then call the chase_led function
    chase_led();
}

int main(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    enable_clocks();
 80004a0:	f7ff ffb0 	bl	8000404 <enable_clocks>
    initialise_board();
 80004a4:	f7ff ffbe 	bl	8000424 <initialise_board>

    // Register chase_led as a button press callback
    button_init(chase_led);
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <main+0x18>)
 80004aa:	f7ff ff3d 	bl	8000328 <button_init>

    while (1) {
 80004ae:	bf00      	nop
 80004b0:	e7fd      	b.n	80004ae <main+0x12>
 80004b2:	bf00      	nop
 80004b4:	08000431 	.word	0x08000431

080004b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b8:	480d      	ldr	r0, [pc, #52]	@ (80004f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	@ (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e6:	f000 f811 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff ffd7 	bl	800049c <main>

080004ee <LoopForever>:

LoopForever:
  b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   r0, =_estack
 80004f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004fc:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 8000500:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000504:	20000028 	.word	0x20000028

08000508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC1_2_IRQHandler>
	...

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	4d0d      	ldr	r5, [pc, #52]	@ (8000544 <__libc_init_array+0x38>)
 8000510:	4c0d      	ldr	r4, [pc, #52]	@ (8000548 <__libc_init_array+0x3c>)
 8000512:	1b64      	subs	r4, r4, r5
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	2600      	movs	r6, #0
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	4d0b      	ldr	r5, [pc, #44]	@ (800054c <__libc_init_array+0x40>)
 800051e:	4c0c      	ldr	r4, [pc, #48]	@ (8000550 <__libc_init_array+0x44>)
 8000520:	f000 f818 	bl	8000554 <_init>
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	2600      	movs	r6, #0
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	0800056c 	.word	0x0800056c
 8000548:	0800056c 	.word	0x0800056c
 800054c:	0800056c 	.word	0x0800056c
 8000550:	08000570 	.word	0x08000570

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
