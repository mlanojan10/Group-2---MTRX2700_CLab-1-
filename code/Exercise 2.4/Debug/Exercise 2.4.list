
Exercise 2.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  08000564  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00001564  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00001564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  08000564  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000560  08000560  00001560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001564  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d2c  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000379  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000087  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d6c  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ab2  00000000  00000000  000174fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007274a  00000000  00000000  00017fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a6f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000244  00000000  00000000  0008a73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0008a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000544 	.word	0x08000544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000544 	.word	0x08000544

080001d4 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//  program entrance
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	// board initialisation
	enable_clocks();
 80001d8:	f000 f85c 	bl	8000294 <enable_clocks>
	initialise_board();
 80001dc:	f000 f870 	bl	80002c0 <initialise_board>

	// initialise timer with delay time and callback function
	init_timer_module(TIM2, change_pattern);
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <main+0x2c>)
 80001e2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80001e6:	f000 f895 	bl	8000314 <init_timer_module>
	enable_timer2_interrupt();
 80001ea:	f000 f8ff 	bl	80003ec <enable_timer2_interrupt>
	//reset_timer(TIM2, 1000);


	// uncomment to test function
	one_shot(TIM2, 2000);
 80001ee:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80001f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80001f6:	f000 f93a 	bl	800046e <one_shot>

	/* Loop forever */
	for(;;) {}
 80001fa:	bf00      	nop
 80001fc:	e7fd      	b.n	80001fa <main+0x26>
 80001fe:	bf00      	nop
 8000200:	0800035d 	.word	0x0800035d

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	6039      	str	r1, [r7, #0]
 800024a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	db0a      	blt.n	800026a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	b2da      	uxtb	r2, r3
 8000258:	490c      	ldr	r1, [pc, #48]	@ (800028c <__NVIC_SetPriority+0x4c>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000268:	e00a      	b.n	8000280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4908      	ldr	r1, [pc, #32]	@ (8000290 <__NVIC_SetPriority+0x50>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 030f 	and.w	r3, r3, #15
 8000276:	3b04      	subs	r3, #4
 8000278:	0112      	lsls	r2, r2, #4
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	440b      	add	r3, r1
 800027e:	761a      	strb	r2, [r3, #24]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <enable_clocks>:
#include "timer.h"

// Status of timer operation, 0 = regular interval mode, 1 = one-shot mode

// Enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000298:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <enable_clocks+0x28>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a07      	ldr	r2, [pc, #28]	@ (80002bc <enable_clocks+0x28>)
 800029e:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80002a2:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <enable_clocks+0x28>)
 80002a6:	69db      	ldr	r3, [r3, #28]
 80002a8:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <enable_clocks+0x28>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	61d3      	str	r3, [r2, #28]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000

080002c0 <initialise_board>:

// Initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0

	// Get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002c6:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <initialise_board+0x20>)
 80002c8:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555; // All LEDs are on
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002d0:	801a      	strh	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	48001002 	.word	0x48001002

080002e4 <trigger_prescaler>:

// General function called to make new prescaler value take effect
// Input: desired timer number
void trigger_prescaler(TIM_TypeDef *TIM) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

	TIM->ARR = 0x01;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2201      	movs	r2, #1
 80002f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM->CNT = 0x00;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	625a      	str	r2, [r3, #36]	@ 0x24
	asm("NOP");
 80002f8:	bf00      	nop
	asm("NOP");
 80002fa:	bf00      	nop
	asm("NOP");
 80002fc:	bf00      	nop
	TIM->ARR = 0xffffffff;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000304:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
	...

08000314 <init_timer_module>:
void (*on_timer_interrupt)() = 0x00;


// Initialise timer with delay time in ms to trigger a callback function regularly
// Input: desired timer number to initialise; delay time in ms; callback function
void init_timer_module(TIM_TypeDef *TIM, void (*timer_callback)()) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]

	TIM->CR1 |= TIM_CR1_CEN;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0201 	orr.w	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
	TIM->PSC = 7999;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000330:	629a      	str	r2, [r3, #40]	@ 0x28
	trigger_prescaler(TIM);
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f7ff ffd6 	bl	80002e4 <trigger_prescaler>
	TIM->CR1 &= ~TIM_CR1_CEN;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f023 0201 	bic.w	r2, r3, #1
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	625a      	str	r2, [r3, #36]	@ 0x24

	on_timer_interrupt = timer_callback;
 800034a:	4a03      	ldr	r2, [pc, #12]	@ (8000358 <init_timer_module+0x44>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000001c 	.word	0x2000001c

0800035c <change_pattern>:

// Simple function to switch on/off every second led when called
void change_pattern() {
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0

	uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000362:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <change_pattern+0x24>)
 8000364:	607b      	str	r3, [r7, #4]
	*led_output_register ^= 0b11111111;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	43db      	mvns	r3, r3
 800036c:	b2da      	uxtb	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	701a      	strb	r2, [r3, #0]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	48001015 	.word	0x48001015

08000384 <TIM2_IRQHandler>:

// Interrupt Service Routine
void TIM2_IRQHandler(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    // Check if the TIM2 interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF) {
 8000388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d025      	beq.n	80003e2 <TIM2_IRQHandler+0x5e>

		// Run the callback function (make sure it is not null first)
        if (on_timer_interrupt != 0x00) {
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <TIM2_IRQHandler+0x64>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d019      	beq.n	80003d2 <TIM2_IRQHandler+0x4e>

        	on_timer_interrupt();
 800039e:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <TIM2_IRQHandler+0x64>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4798      	blx	r3

        	// If timer is in one-shot mode reset timer to default mode
			if (TIM2->SR & TIM_SR_CC1IF) {
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	f003 0302 	and.w	r3, r3, #2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00f      	beq.n	80003d2 <TIM2_IRQHandler+0x4e>
				// Disable capture/compare flag
				TIM2->SR &= ~TIM_SR_CC1IF;
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6113      	str	r3, [r2, #16]
        		// Disable the Capture/Compare 1 interrupt
				TIM2->DIER &= ~TIM_DIER_CC1IE;
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003cc:	f023 0302 	bic.w	r3, r3, #2
 80003d0:	60d3      	str	r3, [r2, #12]
			}
        }
        // Clear the interrupt flag (write 1 to the UIF bit to reset it)
        TIM2->SR &= ~TIM_SR_UIF;
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003dc:	f023 0301 	bic.w	r3, r3, #1
 80003e0:	6113      	str	r3, [r2, #16]
    }
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000001c 	.word	0x2000001c

080003ec <enable_timer2_interrupt>:

// Intialise hardware interrupt for timer 2
void enable_timer2_interrupt() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	// Otherwise can lead to strange behaviour
	__disable_irq();

	// Enable update interrupt (UIE)
	TIM2->DIER |= TIM_DIER_UIE;
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	60d3      	str	r3, [r2, #12]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(TIM2_IRQn, 1);  // Set Priority
 8000404:	2101      	movs	r1, #1
 8000406:	201c      	movs	r0, #28
 8000408:	f7ff ff1a 	bl	8000240 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800040c:	201c      	movs	r0, #28
 800040e:	f7ff fef9 	bl	8000204 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000412:	b662      	cpsie	i
}
 8000414:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}

0800041a <set_timer_period>:
	return TIM->ARR;
}

// simple set function to set a specific timer's period in ms
// assuming timers are configured to 1kHz so each count is 1ms
void set_timer_period(TIM_TypeDef *TIM, uint32_t new_period) {
 800041a:	b480      	push	{r7}
 800041c:	b083      	sub	sp, #12
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	6039      	str	r1, [r7, #0]
	TIM->ARR = new_period;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <reset_timer>:

// function to reset a specific timer's count with a new period in ms
// assuming timers are configured to 1kHz so each count is ms
void reset_timer(TIM_TypeDef *TIM, uint32_t new_period) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	6039      	str	r1, [r7, #0]

	// stop timer's count and reset count to 0
	TIM->CR1 &= ~TIM_CR1_CEN;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f023 0201 	bic.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	@ 0x24
	// set new period
	set_timer_period(TIM, new_period);
 8000452:	6839      	ldr	r1, [r7, #0]
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ffe0 	bl	800041a <set_timer_period>
	// restart timer
	TIM->CR1 |= TIM_CR1_CEN;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0201 	orr.w	r2, r3, #1
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <one_shot>:

// software implementation to convert a specific timer's operation to one-shot mode by using a flag
// input delay desired in ms
void one_shot(TIM_TypeDef *TIM, uint32_t delay) {
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	6039      	str	r1, [r7, #0]

	// Sets value for capture/compare event
	TIM->CCR1 = delay;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	683a      	ldr	r2, [r7, #0]
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34

	// Enable one-pulse mode
	TIM->CR1 |= TIM_CR1_OPM;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f043 0208 	orr.w	r2, r3, #8
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]

	// Enable capture/compare interrupt
	TIM->DIER |= TIM_DIER_CC1IE;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	f043 0202 	orr.w	r2, r3, #2
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	60da      	str	r2, [r3, #12]

	reset_timer(TIM, delay);
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff ffcc 	bl	8000436 <reset_timer>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	@ (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	@ (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe7b 	bl	80001d4 <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ec:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f4:	20000020 	.word	0x20000020

080004f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	@ (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	@ (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	@ (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
