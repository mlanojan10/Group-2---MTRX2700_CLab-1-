
Exercise 2.C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001430  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080015d0  080015d0  000025d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800165c  0800165c  00003088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800165c  0800165c  0000265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001664  08001664  00003088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001664  08001664  00002664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001668  08001668  00002668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800166c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003088  2**0
                  CONTENTS
 10 .bss          000001b0  20000088  20000088  00003088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00003088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012fd  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000601  00000000  00000000  000043b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000049b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000109  00000000  00000000  00004b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c63  00000000  00000000  00004c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bc2  00000000  00000000  0001b894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007842d  00000000  00000000  0001d456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00095883  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c80  00000000  00000000  000958c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00096548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080015b8 	.word	0x080015b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080015b8 	.word	0x080015b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <OnLineReceived>:
#include <string.h>

#include "serial.h"
#include "stm32f303xc.h"

void OnLineReceived(char *string, uint32_t length) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    printf("> You typed: %s\r\n", string);
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <OnLineReceived+0x28>)
 800028e:	f000 facb 	bl	8000828 <iprintf>
    printf("> Echo: %s\r\n\r\n", string);
 8000292:	6879      	ldr	r1, [r7, #4]
 8000294:	4805      	ldr	r0, [pc, #20]	@ (80002ac <OnLineReceived+0x2c>)
 8000296:	f000 fac7 	bl	8000828 <iprintf>
    printf("> ");  // Print prompt again
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <OnLineReceived+0x30>)
 800029c:	f000 fac4 	bl	8000828 <iprintf>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	080015d0 	.word	0x080015d0
 80002ac:	080015e4 	.word	0x080015e4
 80002b0:	080015f4 	.word	0x080015f4

080002b4 <__io_putchar>:

int __io_putchar(int ch) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	4904      	ldr	r1, [pc, #16]	@ (80002d4 <__io_putchar+0x20>)
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f8aa 	bl	800041c <SerialOutputChar>
    return ch;
 80002c8:	687b      	ldr	r3, [r7, #4]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000

080002d8 <main>:

int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80002dc:	2200      	movs	r2, #0
 80002de:	4909      	ldr	r1, [pc, #36]	@ (8000304 <main+0x2c>)
 80002e0:	2004      	movs	r0, #4
 80002e2:	f000 f835 	bl	8000350 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 80002e6:	4908      	ldr	r1, [pc, #32]	@ (8000308 <main+0x30>)
 80002e8:	4806      	ldr	r0, [pc, #24]	@ (8000304 <main+0x2c>)
 80002ea:	f000 f8b0 	bl	800044e <SerialSetReceiveCallback>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002ee:	b662      	cpsie	i
}
 80002f0:	bf00      	nop

    __enable_irq();  // Ensure global interrupts are on

    printf("USART1 is ready. Type a line and press Enter:\r\n");
 80002f2:	4806      	ldr	r0, [pc, #24]	@ (800030c <main+0x34>)
 80002f4:	f000 fb00 	bl	80008f8 <puts>
    printf("> ");
 80002f8:	4805      	ldr	r0, [pc, #20]	@ (8000310 <main+0x38>)
 80002fa:	f000 fa95 	bl	8000828 <iprintf>

    while (1) {
 80002fe:	bf00      	nop
 8000300:	e7fd      	b.n	80002fe <main+0x26>
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	08000281 	.word	0x08000281
 800030c:	080015f8 	.word	0x080015f8
 8000310:	080015f4 	.word	0x080015f4

08000314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	2b00      	cmp	r3, #0
 8000324:	db0b      	blt.n	800033e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f003 021f 	and.w	r2, r3, #31
 800032c:	4907      	ldr	r1, [pc, #28]	@ (800034c <__NVIC_EnableIRQ+0x38>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	095b      	lsrs	r3, r3, #5
 8000334:	2001      	movs	r0, #1
 8000336:	fa00 f202 	lsl.w	r2, r0, r2
 800033a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e100 	.word	0xe000e100

08000350 <SerialInitialise>:
    0x770000,
    0x00,
    0x00
};

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000362:	4b2d      	ldr	r3, [pc, #180]	@ (8000418 <SerialInitialise+0xc8>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a2c      	ldr	r2, [pc, #176]	@ (8000418 <SerialInitialise+0xc8>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800036e:	4b2a      	ldr	r3, [pc, #168]	@ (8000418 <SerialInitialise+0xc8>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a29      	ldr	r2, [pc, #164]	@ (8000418 <SerialInitialise+0xc8>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	691a      	ldr	r2, [r3, #16]
 800037e:	4b26      	ldr	r3, [pc, #152]	@ (8000418 <SerialInitialise+0xc8>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4925      	ldr	r1, [pc, #148]	@ (8000418 <SerialInitialise+0xc8>)
 8000384:	4313      	orrs	r3, r2
 8000386:	614b      	str	r3, [r1, #20]

    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	6952      	ldr	r2, [r2, #20]
 8000390:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	6992      	ldr	r2, [r2, #24]
 800039a:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	69d9      	ldr	r1, [r3, #28]
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	6a1a      	ldr	r2, [r3, #32]
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6a19      	ldr	r1, [r3, #32]
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <SerialInitialise+0xc8>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4913      	ldr	r1, [pc, #76]	@ (8000418 <SerialInitialise+0xc8>)
 80003ca:	4313      	orrs	r3, r2
 80003cc:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <SerialInitialise+0xc8>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4910      	ldr	r1, [pc, #64]	@ (8000418 <SerialInitialise+0xc8>)
 80003d8:	4313      	orrs	r3, r2
 80003da:	618b      	str	r3, [r1, #24]

    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	330c      	adds	r3, #12
 80003e2:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;  // 115200 at 8MHz
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	2246      	movs	r2, #70	@ 0x46
 80003e8:	801a      	strh	r2, [r3, #0]

    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f042 020d 	orr.w	r2, r2, #13
 80003f8:	601a      	str	r2, [r3, #0]

    // Enable RX interrupt
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f042 0220 	orr.w	r2, r2, #32
 8000408:	601a      	str	r2, [r3, #0]

    // Enable IRQ in NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 800040a:	2025      	movs	r0, #37	@ 0x25
 800040c:	f7ff ff82 	bl	8000314 <__NVIC_EnableIRQ>
}
 8000410:	bf00      	nop
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000

0800041c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]
    while((serial_port->UART->ISR & USART_ISR_TXE) == 0);
 8000428:	bf00      	nop
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0f8      	beq.n	800042a <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	b292      	uxth	r2, r2
 8000440:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <SerialSetReceiveCallback>:
uint8_t SerialGetChar(SerialPort *serial_port) {
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);
    return serial_port->UART->RDR;
}

void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

    if (USART1->ISR & USART_ISR_RXNE) {
 8000472:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <USART1_EXTI25_IRQHandler+0x8c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 0320 	and.w	r3, r3, #32
 800047a:	2b00      	cmp	r3, #0
 800047c:	d02e      	beq.n	80004dc <USART1_EXTI25_IRQHandler+0x70>
        char c = USART1->RDR;
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <USART1_EXTI25_IRQHandler+0x8c>)
 8000480:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000482:	b29b      	uxth	r3, r3
 8000484:	71fb      	strb	r3, [r7, #7]

        if (c == '\r') return;  // Ignore CR
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b0d      	cmp	r3, #13
 800048a:	d030      	beq.n	80004ee <USART1_EXTI25_IRQHandler+0x82>

        SerialOutputChar(c, &USART1_PORT);  // Echo back
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	491b      	ldr	r1, [pc, #108]	@ (80004fc <USART1_EXTI25_IRQHandler+0x90>)
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ffc3 	bl	800041c <SerialOutputChar>

        if (c == '\n') {
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b0a      	cmp	r3, #10
 800049a:	d113      	bne.n	80004c4 <USART1_EXTI25_IRQHandler+0x58>
            rx_buffer[rx_index] = '\0';
 800049c:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <USART1_EXTI25_IRQHandler+0x94>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a18      	ldr	r2, [pc, #96]	@ (8000504 <USART1_EXTI25_IRQHandler+0x98>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	54d1      	strb	r1, [r2, r3]
            if (USART1_PORT.receive_callback)
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <USART1_EXTI25_IRQHandler+0x90>)
 80004a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d006      	beq.n	80004bc <USART1_EXTI25_IRQHandler+0x50>
                USART1_PORT.receive_callback(rx_buffer, rx_index);
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <USART1_EXTI25_IRQHandler+0x90>)
 80004b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004b2:	4a13      	ldr	r2, [pc, #76]	@ (8000500 <USART1_EXTI25_IRQHandler+0x94>)
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	4611      	mov	r1, r2
 80004b8:	4812      	ldr	r0, [pc, #72]	@ (8000504 <USART1_EXTI25_IRQHandler+0x98>)
 80004ba:	4798      	blx	r3
            rx_index = 0;
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <USART1_EXTI25_IRQHandler+0x94>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	e00b      	b.n	80004dc <USART1_EXTI25_IRQHandler+0x70>
        } else if (rx_index < sizeof(rx_buffer) - 1) {
 80004c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <USART1_EXTI25_IRQHandler+0x94>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80004ca:	d807      	bhi.n	80004dc <USART1_EXTI25_IRQHandler+0x70>
            rx_buffer[rx_index++] = c;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <USART1_EXTI25_IRQHandler+0x94>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	490b      	ldr	r1, [pc, #44]	@ (8000500 <USART1_EXTI25_IRQHandler+0x94>)
 80004d4:	600a      	str	r2, [r1, #0]
 80004d6:	490b      	ldr	r1, [pc, #44]	@ (8000504 <USART1_EXTI25_IRQHandler+0x98>)
 80004d8:	79fa      	ldrb	r2, [r7, #7]
 80004da:	54ca      	strb	r2, [r1, r3]
        }
    }

    if (USART1->ISR & USART_ISR_ORE) {
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <USART1_EXTI25_IRQHandler+0x8c>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d003      	beq.n	80004f0 <USART1_EXTI25_IRQHandler+0x84>
        (void)USART1->RDR; // Clear Overrun
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <USART1_EXTI25_IRQHandler+0x8c>)
 80004ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004ec:	e000      	b.n	80004f0 <USART1_EXTI25_IRQHandler+0x84>
        if (c == '\r') return;  // Ignore CR
 80004ee:	bf00      	nop
    }
}
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40013800 	.word	0x40013800
 80004fc:	20000000 	.word	0x20000000
 8000500:	200000e4 	.word	0x200000e4
 8000504:	200000a4 	.word	0x200000a4

08000508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
	}

return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fea9 	bl	80002b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
	}
	return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a2:	605a      	str	r2, [r3, #4]
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_isatty>:

int _isatty(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return 1;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f000 f980 	bl	8000918 <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000a000 	.word	0x2000a000
 8000644:	00000400 	.word	0x00000400
 8000648:	200000e8 	.word	0x200000e8
 800064c:	20000238 	.word	0x20000238

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	@ (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	@ (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 f951 	bl	8000924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fe29 	bl	80002d8 <main>

08000686 <LoopForever>:

LoopForever:
  b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000694:	0800166c 	.word	0x0800166c
  ldr r2, =_sbss
 8000698:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800069c:	20000238 	.word	0x20000238

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <std>:
 80006a4:	2300      	movs	r3, #0
 80006a6:	b510      	push	{r4, lr}
 80006a8:	4604      	mov	r4, r0
 80006aa:	e9c0 3300 	strd	r3, r3, [r0]
 80006ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006b2:	6083      	str	r3, [r0, #8]
 80006b4:	8181      	strh	r1, [r0, #12]
 80006b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80006b8:	81c2      	strh	r2, [r0, #14]
 80006ba:	6183      	str	r3, [r0, #24]
 80006bc:	4619      	mov	r1, r3
 80006be:	2208      	movs	r2, #8
 80006c0:	305c      	adds	r0, #92	@ 0x5c
 80006c2:	f000 f921 	bl	8000908 <memset>
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <std+0x58>)
 80006c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <std+0x5c>)
 80006cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <std+0x60>)
 80006d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <std+0x64>)
 80006d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <std+0x68>)
 80006d8:	6224      	str	r4, [r4, #32]
 80006da:	429c      	cmp	r4, r3
 80006dc:	d006      	beq.n	80006ec <std+0x48>
 80006de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006e2:	4294      	cmp	r4, r2
 80006e4:	d002      	beq.n	80006ec <std+0x48>
 80006e6:	33d0      	adds	r3, #208	@ 0xd0
 80006e8:	429c      	cmp	r4, r3
 80006ea:	d105      	bne.n	80006f8 <std+0x54>
 80006ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f4:	f000 b93a 	b.w	800096c <__retarget_lock_init_recursive>
 80006f8:	bd10      	pop	{r4, pc}
 80006fa:	bf00      	nop
 80006fc:	080011c1 	.word	0x080011c1
 8000700:	080011e3 	.word	0x080011e3
 8000704:	0800121b 	.word	0x0800121b
 8000708:	0800123f 	.word	0x0800123f
 800070c:	200000ec 	.word	0x200000ec

08000710 <stdio_exit_handler>:
 8000710:	4a02      	ldr	r2, [pc, #8]	@ (800071c <stdio_exit_handler+0xc>)
 8000712:	4903      	ldr	r1, [pc, #12]	@ (8000720 <stdio_exit_handler+0x10>)
 8000714:	4803      	ldr	r0, [pc, #12]	@ (8000724 <stdio_exit_handler+0x14>)
 8000716:	f000 b869 	b.w	80007ec <_fwalk_sglue>
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c
 8000720:	08001159 	.word	0x08001159
 8000724:	2000003c 	.word	0x2000003c

08000728 <cleanup_stdio>:
 8000728:	6841      	ldr	r1, [r0, #4]
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <cleanup_stdio+0x34>)
 800072c:	4299      	cmp	r1, r3
 800072e:	b510      	push	{r4, lr}
 8000730:	4604      	mov	r4, r0
 8000732:	d001      	beq.n	8000738 <cleanup_stdio+0x10>
 8000734:	f000 fd10 	bl	8001158 <_fflush_r>
 8000738:	68a1      	ldr	r1, [r4, #8]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <cleanup_stdio+0x38>)
 800073c:	4299      	cmp	r1, r3
 800073e:	d002      	beq.n	8000746 <cleanup_stdio+0x1e>
 8000740:	4620      	mov	r0, r4
 8000742:	f000 fd09 	bl	8001158 <_fflush_r>
 8000746:	68e1      	ldr	r1, [r4, #12]
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <cleanup_stdio+0x3c>)
 800074a:	4299      	cmp	r1, r3
 800074c:	d004      	beq.n	8000758 <cleanup_stdio+0x30>
 800074e:	4620      	mov	r0, r4
 8000750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000754:	f000 bd00 	b.w	8001158 <_fflush_r>
 8000758:	bd10      	pop	{r4, pc}
 800075a:	bf00      	nop
 800075c:	200000ec 	.word	0x200000ec
 8000760:	20000154 	.word	0x20000154
 8000764:	200001bc 	.word	0x200001bc

08000768 <global_stdio_init.part.0>:
 8000768:	b510      	push	{r4, lr}
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <global_stdio_init.part.0+0x30>)
 800076c:	4c0b      	ldr	r4, [pc, #44]	@ (800079c <global_stdio_init.part.0+0x34>)
 800076e:	4a0c      	ldr	r2, [pc, #48]	@ (80007a0 <global_stdio_init.part.0+0x38>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4620      	mov	r0, r4
 8000774:	2200      	movs	r2, #0
 8000776:	2104      	movs	r1, #4
 8000778:	f7ff ff94 	bl	80006a4 <std>
 800077c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000780:	2201      	movs	r2, #1
 8000782:	2109      	movs	r1, #9
 8000784:	f7ff ff8e 	bl	80006a4 <std>
 8000788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800078c:	2202      	movs	r2, #2
 800078e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000792:	2112      	movs	r1, #18
 8000794:	f7ff bf86 	b.w	80006a4 <std>
 8000798:	20000224 	.word	0x20000224
 800079c:	200000ec 	.word	0x200000ec
 80007a0:	08000711 	.word	0x08000711

080007a4 <__sfp_lock_acquire>:
 80007a4:	4801      	ldr	r0, [pc, #4]	@ (80007ac <__sfp_lock_acquire+0x8>)
 80007a6:	f000 b8e2 	b.w	800096e <__retarget_lock_acquire_recursive>
 80007aa:	bf00      	nop
 80007ac:	20000229 	.word	0x20000229

080007b0 <__sfp_lock_release>:
 80007b0:	4801      	ldr	r0, [pc, #4]	@ (80007b8 <__sfp_lock_release+0x8>)
 80007b2:	f000 b8dd 	b.w	8000970 <__retarget_lock_release_recursive>
 80007b6:	bf00      	nop
 80007b8:	20000229 	.word	0x20000229

080007bc <__sinit>:
 80007bc:	b510      	push	{r4, lr}
 80007be:	4604      	mov	r4, r0
 80007c0:	f7ff fff0 	bl	80007a4 <__sfp_lock_acquire>
 80007c4:	6a23      	ldr	r3, [r4, #32]
 80007c6:	b11b      	cbz	r3, 80007d0 <__sinit+0x14>
 80007c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007cc:	f7ff bff0 	b.w	80007b0 <__sfp_lock_release>
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <__sinit+0x28>)
 80007d2:	6223      	str	r3, [r4, #32]
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <__sinit+0x2c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f5      	bne.n	80007c8 <__sinit+0xc>
 80007dc:	f7ff ffc4 	bl	8000768 <global_stdio_init.part.0>
 80007e0:	e7f2      	b.n	80007c8 <__sinit+0xc>
 80007e2:	bf00      	nop
 80007e4:	08000729 	.word	0x08000729
 80007e8:	20000224 	.word	0x20000224

080007ec <_fwalk_sglue>:
 80007ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f0:	4607      	mov	r7, r0
 80007f2:	4688      	mov	r8, r1
 80007f4:	4614      	mov	r4, r2
 80007f6:	2600      	movs	r6, #0
 80007f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007fc:	f1b9 0901 	subs.w	r9, r9, #1
 8000800:	d505      	bpl.n	800080e <_fwalk_sglue+0x22>
 8000802:	6824      	ldr	r4, [r4, #0]
 8000804:	2c00      	cmp	r4, #0
 8000806:	d1f7      	bne.n	80007f8 <_fwalk_sglue+0xc>
 8000808:	4630      	mov	r0, r6
 800080a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800080e:	89ab      	ldrh	r3, [r5, #12]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d907      	bls.n	8000824 <_fwalk_sglue+0x38>
 8000814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	d003      	beq.n	8000824 <_fwalk_sglue+0x38>
 800081c:	4629      	mov	r1, r5
 800081e:	4638      	mov	r0, r7
 8000820:	47c0      	blx	r8
 8000822:	4306      	orrs	r6, r0
 8000824:	3568      	adds	r5, #104	@ 0x68
 8000826:	e7e9      	b.n	80007fc <_fwalk_sglue+0x10>

08000828 <iprintf>:
 8000828:	b40f      	push	{r0, r1, r2, r3}
 800082a:	b507      	push	{r0, r1, r2, lr}
 800082c:	4906      	ldr	r1, [pc, #24]	@ (8000848 <iprintf+0x20>)
 800082e:	ab04      	add	r3, sp, #16
 8000830:	6808      	ldr	r0, [r1, #0]
 8000832:	f853 2b04 	ldr.w	r2, [r3], #4
 8000836:	6881      	ldr	r1, [r0, #8]
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	f000 f8c3 	bl	80009c4 <_vfiprintf_r>
 800083e:	b003      	add	sp, #12
 8000840:	f85d eb04 	ldr.w	lr, [sp], #4
 8000844:	b004      	add	sp, #16
 8000846:	4770      	bx	lr
 8000848:	20000038 	.word	0x20000038

0800084c <_puts_r>:
 800084c:	6a03      	ldr	r3, [r0, #32]
 800084e:	b570      	push	{r4, r5, r6, lr}
 8000850:	6884      	ldr	r4, [r0, #8]
 8000852:	4605      	mov	r5, r0
 8000854:	460e      	mov	r6, r1
 8000856:	b90b      	cbnz	r3, 800085c <_puts_r+0x10>
 8000858:	f7ff ffb0 	bl	80007bc <__sinit>
 800085c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800085e:	07db      	lsls	r3, r3, #31
 8000860:	d405      	bmi.n	800086e <_puts_r+0x22>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	0598      	lsls	r0, r3, #22
 8000866:	d402      	bmi.n	800086e <_puts_r+0x22>
 8000868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800086a:	f000 f880 	bl	800096e <__retarget_lock_acquire_recursive>
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	0719      	lsls	r1, r3, #28
 8000872:	d502      	bpl.n	800087a <_puts_r+0x2e>
 8000874:	6923      	ldr	r3, [r4, #16]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d135      	bne.n	80008e6 <_puts_r+0x9a>
 800087a:	4621      	mov	r1, r4
 800087c:	4628      	mov	r0, r5
 800087e:	f000 fd21 	bl	80012c4 <__swsetup_r>
 8000882:	b380      	cbz	r0, 80008e6 <_puts_r+0x9a>
 8000884:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000888:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800088a:	07da      	lsls	r2, r3, #31
 800088c:	d405      	bmi.n	800089a <_puts_r+0x4e>
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	059b      	lsls	r3, r3, #22
 8000892:	d402      	bmi.n	800089a <_puts_r+0x4e>
 8000894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000896:	f000 f86b 	bl	8000970 <__retarget_lock_release_recursive>
 800089a:	4628      	mov	r0, r5
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da04      	bge.n	80008ac <_puts_r+0x60>
 80008a2:	69a2      	ldr	r2, [r4, #24]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dc17      	bgt.n	80008d8 <_puts_r+0x8c>
 80008a8:	290a      	cmp	r1, #10
 80008aa:	d015      	beq.n	80008d8 <_puts_r+0x8c>
 80008ac:	6823      	ldr	r3, [r4, #0]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	6022      	str	r2, [r4, #0]
 80008b2:	7019      	strb	r1, [r3, #0]
 80008b4:	68a3      	ldr	r3, [r4, #8]
 80008b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008ba:	3b01      	subs	r3, #1
 80008bc:	60a3      	str	r3, [r4, #8]
 80008be:	2900      	cmp	r1, #0
 80008c0:	d1ed      	bne.n	800089e <_puts_r+0x52>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da11      	bge.n	80008ea <_puts_r+0x9e>
 80008c6:	4622      	mov	r2, r4
 80008c8:	210a      	movs	r1, #10
 80008ca:	4628      	mov	r0, r5
 80008cc:	f000 fcbb 	bl	8001246 <__swbuf_r>
 80008d0:	3001      	adds	r0, #1
 80008d2:	d0d7      	beq.n	8000884 <_puts_r+0x38>
 80008d4:	250a      	movs	r5, #10
 80008d6:	e7d7      	b.n	8000888 <_puts_r+0x3c>
 80008d8:	4622      	mov	r2, r4
 80008da:	4628      	mov	r0, r5
 80008dc:	f000 fcb3 	bl	8001246 <__swbuf_r>
 80008e0:	3001      	adds	r0, #1
 80008e2:	d1e7      	bne.n	80008b4 <_puts_r+0x68>
 80008e4:	e7ce      	b.n	8000884 <_puts_r+0x38>
 80008e6:	3e01      	subs	r6, #1
 80008e8:	e7e4      	b.n	80008b4 <_puts_r+0x68>
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	6022      	str	r2, [r4, #0]
 80008f0:	220a      	movs	r2, #10
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e7ee      	b.n	80008d4 <_puts_r+0x88>
	...

080008f8 <puts>:
 80008f8:	4b02      	ldr	r3, [pc, #8]	@ (8000904 <puts+0xc>)
 80008fa:	4601      	mov	r1, r0
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	f7ff bfa5 	b.w	800084c <_puts_r>
 8000902:	bf00      	nop
 8000904:	20000038 	.word	0x20000038

08000908 <memset>:
 8000908:	4402      	add	r2, r0
 800090a:	4603      	mov	r3, r0
 800090c:	4293      	cmp	r3, r2
 800090e:	d100      	bne.n	8000912 <memset+0xa>
 8000910:	4770      	bx	lr
 8000912:	f803 1b01 	strb.w	r1, [r3], #1
 8000916:	e7f9      	b.n	800090c <memset+0x4>

08000918 <__errno>:
 8000918:	4b01      	ldr	r3, [pc, #4]	@ (8000920 <__errno+0x8>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000038 	.word	0x20000038

08000924 <__libc_init_array>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	4d0d      	ldr	r5, [pc, #52]	@ (800095c <__libc_init_array+0x38>)
 8000928:	4c0d      	ldr	r4, [pc, #52]	@ (8000960 <__libc_init_array+0x3c>)
 800092a:	1b64      	subs	r4, r4, r5
 800092c:	10a4      	asrs	r4, r4, #2
 800092e:	2600      	movs	r6, #0
 8000930:	42a6      	cmp	r6, r4
 8000932:	d109      	bne.n	8000948 <__libc_init_array+0x24>
 8000934:	4d0b      	ldr	r5, [pc, #44]	@ (8000964 <__libc_init_array+0x40>)
 8000936:	4c0c      	ldr	r4, [pc, #48]	@ (8000968 <__libc_init_array+0x44>)
 8000938:	f000 fe3e 	bl	80015b8 <_init>
 800093c:	1b64      	subs	r4, r4, r5
 800093e:	10a4      	asrs	r4, r4, #2
 8000940:	2600      	movs	r6, #0
 8000942:	42a6      	cmp	r6, r4
 8000944:	d105      	bne.n	8000952 <__libc_init_array+0x2e>
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f855 3b04 	ldr.w	r3, [r5], #4
 800094c:	4798      	blx	r3
 800094e:	3601      	adds	r6, #1
 8000950:	e7ee      	b.n	8000930 <__libc_init_array+0xc>
 8000952:	f855 3b04 	ldr.w	r3, [r5], #4
 8000956:	4798      	blx	r3
 8000958:	3601      	adds	r6, #1
 800095a:	e7f2      	b.n	8000942 <__libc_init_array+0x1e>
 800095c:	08001664 	.word	0x08001664
 8000960:	08001664 	.word	0x08001664
 8000964:	08001664 	.word	0x08001664
 8000968:	08001668 	.word	0x08001668

0800096c <__retarget_lock_init_recursive>:
 800096c:	4770      	bx	lr

0800096e <__retarget_lock_acquire_recursive>:
 800096e:	4770      	bx	lr

08000970 <__retarget_lock_release_recursive>:
 8000970:	4770      	bx	lr

08000972 <__sfputc_r>:
 8000972:	6893      	ldr	r3, [r2, #8]
 8000974:	3b01      	subs	r3, #1
 8000976:	2b00      	cmp	r3, #0
 8000978:	b410      	push	{r4}
 800097a:	6093      	str	r3, [r2, #8]
 800097c:	da08      	bge.n	8000990 <__sfputc_r+0x1e>
 800097e:	6994      	ldr	r4, [r2, #24]
 8000980:	42a3      	cmp	r3, r4
 8000982:	db01      	blt.n	8000988 <__sfputc_r+0x16>
 8000984:	290a      	cmp	r1, #10
 8000986:	d103      	bne.n	8000990 <__sfputc_r+0x1e>
 8000988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800098c:	f000 bc5b 	b.w	8001246 <__swbuf_r>
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	1c58      	adds	r0, r3, #1
 8000994:	6010      	str	r0, [r2, #0]
 8000996:	7019      	strb	r1, [r3, #0]
 8000998:	4608      	mov	r0, r1
 800099a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <__sfputs_r>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	4606      	mov	r6, r0
 80009a4:	460f      	mov	r7, r1
 80009a6:	4614      	mov	r4, r2
 80009a8:	18d5      	adds	r5, r2, r3
 80009aa:	42ac      	cmp	r4, r5
 80009ac:	d101      	bne.n	80009b2 <__sfputs_r+0x12>
 80009ae:	2000      	movs	r0, #0
 80009b0:	e007      	b.n	80009c2 <__sfputs_r+0x22>
 80009b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009b6:	463a      	mov	r2, r7
 80009b8:	4630      	mov	r0, r6
 80009ba:	f7ff ffda 	bl	8000972 <__sfputc_r>
 80009be:	1c43      	adds	r3, r0, #1
 80009c0:	d1f3      	bne.n	80009aa <__sfputs_r+0xa>
 80009c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009c4 <_vfiprintf_r>:
 80009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	460d      	mov	r5, r1
 80009ca:	b09d      	sub	sp, #116	@ 0x74
 80009cc:	4614      	mov	r4, r2
 80009ce:	4698      	mov	r8, r3
 80009d0:	4606      	mov	r6, r0
 80009d2:	b118      	cbz	r0, 80009dc <_vfiprintf_r+0x18>
 80009d4:	6a03      	ldr	r3, [r0, #32]
 80009d6:	b90b      	cbnz	r3, 80009dc <_vfiprintf_r+0x18>
 80009d8:	f7ff fef0 	bl	80007bc <__sinit>
 80009dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009de:	07d9      	lsls	r1, r3, #31
 80009e0:	d405      	bmi.n	80009ee <_vfiprintf_r+0x2a>
 80009e2:	89ab      	ldrh	r3, [r5, #12]
 80009e4:	059a      	lsls	r2, r3, #22
 80009e6:	d402      	bmi.n	80009ee <_vfiprintf_r+0x2a>
 80009e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009ea:	f7ff ffc0 	bl	800096e <__retarget_lock_acquire_recursive>
 80009ee:	89ab      	ldrh	r3, [r5, #12]
 80009f0:	071b      	lsls	r3, r3, #28
 80009f2:	d501      	bpl.n	80009f8 <_vfiprintf_r+0x34>
 80009f4:	692b      	ldr	r3, [r5, #16]
 80009f6:	b99b      	cbnz	r3, 8000a20 <_vfiprintf_r+0x5c>
 80009f8:	4629      	mov	r1, r5
 80009fa:	4630      	mov	r0, r6
 80009fc:	f000 fc62 	bl	80012c4 <__swsetup_r>
 8000a00:	b170      	cbz	r0, 8000a20 <_vfiprintf_r+0x5c>
 8000a02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a04:	07dc      	lsls	r4, r3, #31
 8000a06:	d504      	bpl.n	8000a12 <_vfiprintf_r+0x4e>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a0c:	b01d      	add	sp, #116	@ 0x74
 8000a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a12:	89ab      	ldrh	r3, [r5, #12]
 8000a14:	0598      	lsls	r0, r3, #22
 8000a16:	d4f7      	bmi.n	8000a08 <_vfiprintf_r+0x44>
 8000a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a1a:	f7ff ffa9 	bl	8000970 <__retarget_lock_release_recursive>
 8000a1e:	e7f3      	b.n	8000a08 <_vfiprintf_r+0x44>
 8000a20:	2300      	movs	r3, #0
 8000a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a24:	2320      	movs	r3, #32
 8000a26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a2e:	2330      	movs	r3, #48	@ 0x30
 8000a30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000be0 <_vfiprintf_r+0x21c>
 8000a34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a38:	f04f 0901 	mov.w	r9, #1
 8000a3c:	4623      	mov	r3, r4
 8000a3e:	469a      	mov	sl, r3
 8000a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a44:	b10a      	cbz	r2, 8000a4a <_vfiprintf_r+0x86>
 8000a46:	2a25      	cmp	r2, #37	@ 0x25
 8000a48:	d1f9      	bne.n	8000a3e <_vfiprintf_r+0x7a>
 8000a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8000a4e:	d00b      	beq.n	8000a68 <_vfiprintf_r+0xa4>
 8000a50:	465b      	mov	r3, fp
 8000a52:	4622      	mov	r2, r4
 8000a54:	4629      	mov	r1, r5
 8000a56:	4630      	mov	r0, r6
 8000a58:	f7ff ffa2 	bl	80009a0 <__sfputs_r>
 8000a5c:	3001      	adds	r0, #1
 8000a5e:	f000 80a7 	beq.w	8000bb0 <_vfiprintf_r+0x1ec>
 8000a62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a64:	445a      	add	r2, fp
 8000a66:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a68:	f89a 3000 	ldrb.w	r3, [sl]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 809f 	beq.w	8000bb0 <_vfiprintf_r+0x1ec>
 8000a72:	2300      	movs	r3, #0
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a7c:	f10a 0a01 	add.w	sl, sl, #1
 8000a80:	9304      	str	r3, [sp, #16]
 8000a82:	9307      	str	r3, [sp, #28]
 8000a84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a88:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a8a:	4654      	mov	r4, sl
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a92:	4853      	ldr	r0, [pc, #332]	@ (8000be0 <_vfiprintf_r+0x21c>)
 8000a94:	f7ff fba4 	bl	80001e0 <memchr>
 8000a98:	9a04      	ldr	r2, [sp, #16]
 8000a9a:	b9d8      	cbnz	r0, 8000ad4 <_vfiprintf_r+0x110>
 8000a9c:	06d1      	lsls	r1, r2, #27
 8000a9e:	bf44      	itt	mi
 8000aa0:	2320      	movmi	r3, #32
 8000aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000aa6:	0713      	lsls	r3, r2, #28
 8000aa8:	bf44      	itt	mi
 8000aaa:	232b      	movmi	r3, #43	@ 0x2b
 8000aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8000ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ab6:	d015      	beq.n	8000ae4 <_vfiprintf_r+0x120>
 8000ab8:	9a07      	ldr	r2, [sp, #28]
 8000aba:	4654      	mov	r4, sl
 8000abc:	2000      	movs	r0, #0
 8000abe:	f04f 0c0a 	mov.w	ip, #10
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ac8:	3b30      	subs	r3, #48	@ 0x30
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	d94b      	bls.n	8000b66 <_vfiprintf_r+0x1a2>
 8000ace:	b1b0      	cbz	r0, 8000afe <_vfiprintf_r+0x13a>
 8000ad0:	9207      	str	r2, [sp, #28]
 8000ad2:	e014      	b.n	8000afe <_vfiprintf_r+0x13a>
 8000ad4:	eba0 0308 	sub.w	r3, r0, r8
 8000ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	9304      	str	r3, [sp, #16]
 8000ae0:	46a2      	mov	sl, r4
 8000ae2:	e7d2      	b.n	8000a8a <_vfiprintf_r+0xc6>
 8000ae4:	9b03      	ldr	r3, [sp, #12]
 8000ae6:	1d19      	adds	r1, r3, #4
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	9103      	str	r1, [sp, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bfbb      	ittet	lt
 8000af0:	425b      	neglt	r3, r3
 8000af2:	f042 0202 	orrlt.w	r2, r2, #2
 8000af6:	9307      	strge	r3, [sp, #28]
 8000af8:	9307      	strlt	r3, [sp, #28]
 8000afa:	bfb8      	it	lt
 8000afc:	9204      	strlt	r2, [sp, #16]
 8000afe:	7823      	ldrb	r3, [r4, #0]
 8000b00:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b02:	d10a      	bne.n	8000b1a <_vfiprintf_r+0x156>
 8000b04:	7863      	ldrb	r3, [r4, #1]
 8000b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b08:	d132      	bne.n	8000b70 <_vfiprintf_r+0x1ac>
 8000b0a:	9b03      	ldr	r3, [sp, #12]
 8000b0c:	1d1a      	adds	r2, r3, #4
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	9203      	str	r2, [sp, #12]
 8000b12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b16:	3402      	adds	r4, #2
 8000b18:	9305      	str	r3, [sp, #20]
 8000b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000bf0 <_vfiprintf_r+0x22c>
 8000b1e:	7821      	ldrb	r1, [r4, #0]
 8000b20:	2203      	movs	r2, #3
 8000b22:	4650      	mov	r0, sl
 8000b24:	f7ff fb5c 	bl	80001e0 <memchr>
 8000b28:	b138      	cbz	r0, 8000b3a <_vfiprintf_r+0x176>
 8000b2a:	9b04      	ldr	r3, [sp, #16]
 8000b2c:	eba0 000a 	sub.w	r0, r0, sl
 8000b30:	2240      	movs	r2, #64	@ 0x40
 8000b32:	4082      	lsls	r2, r0
 8000b34:	4313      	orrs	r3, r2
 8000b36:	3401      	adds	r4, #1
 8000b38:	9304      	str	r3, [sp, #16]
 8000b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b3e:	4829      	ldr	r0, [pc, #164]	@ (8000be4 <_vfiprintf_r+0x220>)
 8000b40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b44:	2206      	movs	r2, #6
 8000b46:	f7ff fb4b 	bl	80001e0 <memchr>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d03f      	beq.n	8000bce <_vfiprintf_r+0x20a>
 8000b4e:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <_vfiprintf_r+0x224>)
 8000b50:	bb1b      	cbnz	r3, 8000b9a <_vfiprintf_r+0x1d6>
 8000b52:	9b03      	ldr	r3, [sp, #12]
 8000b54:	3307      	adds	r3, #7
 8000b56:	f023 0307 	bic.w	r3, r3, #7
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	9303      	str	r3, [sp, #12]
 8000b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b60:	443b      	add	r3, r7
 8000b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b64:	e76a      	b.n	8000a3c <_vfiprintf_r+0x78>
 8000b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	e7a8      	b.n	8000ac2 <_vfiprintf_r+0xfe>
 8000b70:	2300      	movs	r3, #0
 8000b72:	3401      	adds	r4, #1
 8000b74:	9305      	str	r3, [sp, #20]
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 0c0a 	mov.w	ip, #10
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b82:	3a30      	subs	r2, #48	@ 0x30
 8000b84:	2a09      	cmp	r2, #9
 8000b86:	d903      	bls.n	8000b90 <_vfiprintf_r+0x1cc>
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0c6      	beq.n	8000b1a <_vfiprintf_r+0x156>
 8000b8c:	9105      	str	r1, [sp, #20]
 8000b8e:	e7c4      	b.n	8000b1a <_vfiprintf_r+0x156>
 8000b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b94:	4604      	mov	r4, r0
 8000b96:	2301      	movs	r3, #1
 8000b98:	e7f0      	b.n	8000b7c <_vfiprintf_r+0x1b8>
 8000b9a:	ab03      	add	r3, sp, #12
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	462a      	mov	r2, r5
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <_vfiprintf_r+0x228>)
 8000ba2:	a904      	add	r1, sp, #16
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4607      	mov	r7, r0
 8000bac:	1c78      	adds	r0, r7, #1
 8000bae:	d1d6      	bne.n	8000b5e <_vfiprintf_r+0x19a>
 8000bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bb2:	07d9      	lsls	r1, r3, #31
 8000bb4:	d405      	bmi.n	8000bc2 <_vfiprintf_r+0x1fe>
 8000bb6:	89ab      	ldrh	r3, [r5, #12]
 8000bb8:	059a      	lsls	r2, r3, #22
 8000bba:	d402      	bmi.n	8000bc2 <_vfiprintf_r+0x1fe>
 8000bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bbe:	f7ff fed7 	bl	8000970 <__retarget_lock_release_recursive>
 8000bc2:	89ab      	ldrh	r3, [r5, #12]
 8000bc4:	065b      	lsls	r3, r3, #25
 8000bc6:	f53f af1f 	bmi.w	8000a08 <_vfiprintf_r+0x44>
 8000bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000bcc:	e71e      	b.n	8000a0c <_vfiprintf_r+0x48>
 8000bce:	ab03      	add	r3, sp, #12
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	462a      	mov	r2, r5
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <_vfiprintf_r+0x228>)
 8000bd6:	a904      	add	r1, sp, #16
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f000 f91b 	bl	8000e14 <_printf_i>
 8000bde:	e7e4      	b.n	8000baa <_vfiprintf_r+0x1e6>
 8000be0:	08001627 	.word	0x08001627
 8000be4:	08001631 	.word	0x08001631
 8000be8:	00000000 	.word	0x00000000
 8000bec:	080009a1 	.word	0x080009a1
 8000bf0:	0800162d 	.word	0x0800162d

08000bf4 <sbrk_aligned>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8000c34 <sbrk_aligned+0x40>)
 8000bf8:	460c      	mov	r4, r1
 8000bfa:	6831      	ldr	r1, [r6, #0]
 8000bfc:	4605      	mov	r5, r0
 8000bfe:	b911      	cbnz	r1, 8000c06 <sbrk_aligned+0x12>
 8000c00:	f000 fc4c 	bl	800149c <_sbrk_r>
 8000c04:	6030      	str	r0, [r6, #0]
 8000c06:	4621      	mov	r1, r4
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f000 fc47 	bl	800149c <_sbrk_r>
 8000c0e:	1c43      	adds	r3, r0, #1
 8000c10:	d103      	bne.n	8000c1a <sbrk_aligned+0x26>
 8000c12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c16:	4620      	mov	r0, r4
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
 8000c1a:	1cc4      	adds	r4, r0, #3
 8000c1c:	f024 0403 	bic.w	r4, r4, #3
 8000c20:	42a0      	cmp	r0, r4
 8000c22:	d0f8      	beq.n	8000c16 <sbrk_aligned+0x22>
 8000c24:	1a21      	subs	r1, r4, r0
 8000c26:	4628      	mov	r0, r5
 8000c28:	f000 fc38 	bl	800149c <_sbrk_r>
 8000c2c:	3001      	adds	r0, #1
 8000c2e:	d1f2      	bne.n	8000c16 <sbrk_aligned+0x22>
 8000c30:	e7ef      	b.n	8000c12 <sbrk_aligned+0x1e>
 8000c32:	bf00      	nop
 8000c34:	2000022c 	.word	0x2000022c

08000c38 <_malloc_r>:
 8000c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c3c:	1ccd      	adds	r5, r1, #3
 8000c3e:	f025 0503 	bic.w	r5, r5, #3
 8000c42:	3508      	adds	r5, #8
 8000c44:	2d0c      	cmp	r5, #12
 8000c46:	bf38      	it	cc
 8000c48:	250c      	movcc	r5, #12
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	db01      	blt.n	8000c54 <_malloc_r+0x1c>
 8000c50:	42a9      	cmp	r1, r5
 8000c52:	d904      	bls.n	8000c5e <_malloc_r+0x26>
 8000c54:	230c      	movs	r3, #12
 8000c56:	6033      	str	r3, [r6, #0]
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d34 <_malloc_r+0xfc>
 8000c62:	f000 faa1 	bl	80011a8 <__malloc_lock>
 8000c66:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6a:	461c      	mov	r4, r3
 8000c6c:	bb44      	cbnz	r4, 8000cc0 <_malloc_r+0x88>
 8000c6e:	4629      	mov	r1, r5
 8000c70:	4630      	mov	r0, r6
 8000c72:	f7ff ffbf 	bl	8000bf4 <sbrk_aligned>
 8000c76:	1c43      	adds	r3, r0, #1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	d158      	bne.n	8000d2e <_malloc_r+0xf6>
 8000c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8000c80:	4627      	mov	r7, r4
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d143      	bne.n	8000d0e <_malloc_r+0xd6>
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d04b      	beq.n	8000d22 <_malloc_r+0xea>
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	4630      	mov	r0, r6
 8000c90:	eb04 0903 	add.w	r9, r4, r3
 8000c94:	f000 fc02 	bl	800149c <_sbrk_r>
 8000c98:	4581      	cmp	r9, r0
 8000c9a:	d142      	bne.n	8000d22 <_malloc_r+0xea>
 8000c9c:	6821      	ldr	r1, [r4, #0]
 8000c9e:	1a6d      	subs	r5, r5, r1
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f7ff ffa6 	bl	8000bf4 <sbrk_aligned>
 8000ca8:	3001      	adds	r0, #1
 8000caa:	d03a      	beq.n	8000d22 <_malloc_r+0xea>
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	442b      	add	r3, r5
 8000cb0:	6023      	str	r3, [r4, #0]
 8000cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	bb62      	cbnz	r2, 8000d14 <_malloc_r+0xdc>
 8000cba:	f8c8 7000 	str.w	r7, [r8]
 8000cbe:	e00f      	b.n	8000ce0 <_malloc_r+0xa8>
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	1b52      	subs	r2, r2, r5
 8000cc4:	d420      	bmi.n	8000d08 <_malloc_r+0xd0>
 8000cc6:	2a0b      	cmp	r2, #11
 8000cc8:	d917      	bls.n	8000cfa <_malloc_r+0xc2>
 8000cca:	1961      	adds	r1, r4, r5
 8000ccc:	42a3      	cmp	r3, r4
 8000cce:	6025      	str	r5, [r4, #0]
 8000cd0:	bf18      	it	ne
 8000cd2:	6059      	strne	r1, [r3, #4]
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	bf08      	it	eq
 8000cd8:	f8c8 1000 	streq.w	r1, [r8]
 8000cdc:	5162      	str	r2, [r4, r5]
 8000cde:	604b      	str	r3, [r1, #4]
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f000 fa67 	bl	80011b4 <__malloc_unlock>
 8000ce6:	f104 000b 	add.w	r0, r4, #11
 8000cea:	1d23      	adds	r3, r4, #4
 8000cec:	f020 0007 	bic.w	r0, r0, #7
 8000cf0:	1ac2      	subs	r2, r0, r3
 8000cf2:	bf1c      	itt	ne
 8000cf4:	1a1b      	subne	r3, r3, r0
 8000cf6:	50a3      	strne	r3, [r4, r2]
 8000cf8:	e7af      	b.n	8000c5a <_malloc_r+0x22>
 8000cfa:	6862      	ldr	r2, [r4, #4]
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	bf0c      	ite	eq
 8000d00:	f8c8 2000 	streq.w	r2, [r8]
 8000d04:	605a      	strne	r2, [r3, #4]
 8000d06:	e7eb      	b.n	8000ce0 <_malloc_r+0xa8>
 8000d08:	4623      	mov	r3, r4
 8000d0a:	6864      	ldr	r4, [r4, #4]
 8000d0c:	e7ae      	b.n	8000c6c <_malloc_r+0x34>
 8000d0e:	463c      	mov	r4, r7
 8000d10:	687f      	ldr	r7, [r7, #4]
 8000d12:	e7b6      	b.n	8000c82 <_malloc_r+0x4a>
 8000d14:	461a      	mov	r2, r3
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	42a3      	cmp	r3, r4
 8000d1a:	d1fb      	bne.n	8000d14 <_malloc_r+0xdc>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6053      	str	r3, [r2, #4]
 8000d20:	e7de      	b.n	8000ce0 <_malloc_r+0xa8>
 8000d22:	230c      	movs	r3, #12
 8000d24:	6033      	str	r3, [r6, #0]
 8000d26:	4630      	mov	r0, r6
 8000d28:	f000 fa44 	bl	80011b4 <__malloc_unlock>
 8000d2c:	e794      	b.n	8000c58 <_malloc_r+0x20>
 8000d2e:	6005      	str	r5, [r0, #0]
 8000d30:	e7d6      	b.n	8000ce0 <_malloc_r+0xa8>
 8000d32:	bf00      	nop
 8000d34:	20000230 	.word	0x20000230

08000d38 <_printf_common>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	4616      	mov	r6, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	688a      	ldr	r2, [r1, #8]
 8000d42:	690b      	ldr	r3, [r1, #16]
 8000d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	bfb8      	it	lt
 8000d4c:	4613      	movlt	r3, r2
 8000d4e:	6033      	str	r3, [r6, #0]
 8000d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d54:	4607      	mov	r7, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	b10a      	cbz	r2, 8000d5e <_printf_common+0x26>
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	6033      	str	r3, [r6, #0]
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	0699      	lsls	r1, r3, #26
 8000d62:	bf42      	ittt	mi
 8000d64:	6833      	ldrmi	r3, [r6, #0]
 8000d66:	3302      	addmi	r3, #2
 8000d68:	6033      	strmi	r3, [r6, #0]
 8000d6a:	6825      	ldr	r5, [r4, #0]
 8000d6c:	f015 0506 	ands.w	r5, r5, #6
 8000d70:	d106      	bne.n	8000d80 <_printf_common+0x48>
 8000d72:	f104 0a19 	add.w	sl, r4, #25
 8000d76:	68e3      	ldr	r3, [r4, #12]
 8000d78:	6832      	ldr	r2, [r6, #0]
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	dc26      	bgt.n	8000dce <_printf_common+0x96>
 8000d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d84:	6822      	ldr	r2, [r4, #0]
 8000d86:	3b00      	subs	r3, #0
 8000d88:	bf18      	it	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	0692      	lsls	r2, r2, #26
 8000d8e:	d42b      	bmi.n	8000de8 <_printf_common+0xb0>
 8000d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d94:	4641      	mov	r1, r8
 8000d96:	4638      	mov	r0, r7
 8000d98:	47c8      	blx	r9
 8000d9a:	3001      	adds	r0, #1
 8000d9c:	d01e      	beq.n	8000ddc <_printf_common+0xa4>
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	6922      	ldr	r2, [r4, #16]
 8000da2:	f003 0306 	and.w	r3, r3, #6
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf02      	ittt	eq
 8000daa:	68e5      	ldreq	r5, [r4, #12]
 8000dac:	6833      	ldreq	r3, [r6, #0]
 8000dae:	1aed      	subeq	r5, r5, r3
 8000db0:	68a3      	ldr	r3, [r4, #8]
 8000db2:	bf0c      	ite	eq
 8000db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000db8:	2500      	movne	r5, #0
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	bfc4      	itt	gt
 8000dbe:	1a9b      	subgt	r3, r3, r2
 8000dc0:	18ed      	addgt	r5, r5, r3
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	341a      	adds	r4, #26
 8000dc6:	42b5      	cmp	r5, r6
 8000dc8:	d11a      	bne.n	8000e00 <_printf_common+0xc8>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	e008      	b.n	8000de0 <_printf_common+0xa8>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	4641      	mov	r1, r8
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	47c8      	blx	r9
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d103      	bne.n	8000de4 <_printf_common+0xac>
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	3501      	adds	r5, #1
 8000de6:	e7c6      	b.n	8000d76 <_printf_common+0x3e>
 8000de8:	18e1      	adds	r1, r4, r3
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	2030      	movs	r0, #48	@ 0x30
 8000dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000df2:	4422      	add	r2, r4
 8000df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	e7c7      	b.n	8000d90 <_printf_common+0x58>
 8000e00:	2301      	movs	r3, #1
 8000e02:	4622      	mov	r2, r4
 8000e04:	4641      	mov	r1, r8
 8000e06:	4638      	mov	r0, r7
 8000e08:	47c8      	blx	r9
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	d0e6      	beq.n	8000ddc <_printf_common+0xa4>
 8000e0e:	3601      	adds	r6, #1
 8000e10:	e7d9      	b.n	8000dc6 <_printf_common+0x8e>
	...

08000e14 <_printf_i>:
 8000e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	7e0f      	ldrb	r7, [r1, #24]
 8000e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e1c:	2f78      	cmp	r7, #120	@ 0x78
 8000e1e:	4691      	mov	r9, r2
 8000e20:	4680      	mov	r8, r0
 8000e22:	460c      	mov	r4, r1
 8000e24:	469a      	mov	sl, r3
 8000e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e2a:	d807      	bhi.n	8000e3c <_printf_i+0x28>
 8000e2c:	2f62      	cmp	r7, #98	@ 0x62
 8000e2e:	d80a      	bhi.n	8000e46 <_printf_i+0x32>
 8000e30:	2f00      	cmp	r7, #0
 8000e32:	f000 80d1 	beq.w	8000fd8 <_printf_i+0x1c4>
 8000e36:	2f58      	cmp	r7, #88	@ 0x58
 8000e38:	f000 80b8 	beq.w	8000fac <_printf_i+0x198>
 8000e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e44:	e03a      	b.n	8000ebc <_printf_i+0xa8>
 8000e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e4a:	2b15      	cmp	r3, #21
 8000e4c:	d8f6      	bhi.n	8000e3c <_printf_i+0x28>
 8000e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8000e54 <_printf_i+0x40>)
 8000e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e54:	08000ead 	.word	0x08000ead
 8000e58:	08000ec1 	.word	0x08000ec1
 8000e5c:	08000e3d 	.word	0x08000e3d
 8000e60:	08000e3d 	.word	0x08000e3d
 8000e64:	08000e3d 	.word	0x08000e3d
 8000e68:	08000e3d 	.word	0x08000e3d
 8000e6c:	08000ec1 	.word	0x08000ec1
 8000e70:	08000e3d 	.word	0x08000e3d
 8000e74:	08000e3d 	.word	0x08000e3d
 8000e78:	08000e3d 	.word	0x08000e3d
 8000e7c:	08000e3d 	.word	0x08000e3d
 8000e80:	08000fbf 	.word	0x08000fbf
 8000e84:	08000eeb 	.word	0x08000eeb
 8000e88:	08000f79 	.word	0x08000f79
 8000e8c:	08000e3d 	.word	0x08000e3d
 8000e90:	08000e3d 	.word	0x08000e3d
 8000e94:	08000fe1 	.word	0x08000fe1
 8000e98:	08000e3d 	.word	0x08000e3d
 8000e9c:	08000eeb 	.word	0x08000eeb
 8000ea0:	08000e3d 	.word	0x08000e3d
 8000ea4:	08000e3d 	.word	0x08000e3d
 8000ea8:	08000f81 	.word	0x08000f81
 8000eac:	6833      	ldr	r3, [r6, #0]
 8000eae:	1d1a      	adds	r2, r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6032      	str	r2, [r6, #0]
 8000eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e09c      	b.n	8000ffa <_printf_i+0x1e6>
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	6820      	ldr	r0, [r4, #0]
 8000ec4:	1d19      	adds	r1, r3, #4
 8000ec6:	6031      	str	r1, [r6, #0]
 8000ec8:	0606      	lsls	r6, r0, #24
 8000eca:	d501      	bpl.n	8000ed0 <_printf_i+0xbc>
 8000ecc:	681d      	ldr	r5, [r3, #0]
 8000ece:	e003      	b.n	8000ed8 <_printf_i+0xc4>
 8000ed0:	0645      	lsls	r5, r0, #25
 8000ed2:	d5fb      	bpl.n	8000ecc <_printf_i+0xb8>
 8000ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	da03      	bge.n	8000ee4 <_printf_i+0xd0>
 8000edc:	232d      	movs	r3, #45	@ 0x2d
 8000ede:	426d      	negs	r5, r5
 8000ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ee4:	4858      	ldr	r0, [pc, #352]	@ (8001048 <_printf_i+0x234>)
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	e011      	b.n	8000f0e <_printf_i+0xfa>
 8000eea:	6821      	ldr	r1, [r4, #0]
 8000eec:	6833      	ldr	r3, [r6, #0]
 8000eee:	0608      	lsls	r0, r1, #24
 8000ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ef4:	d402      	bmi.n	8000efc <_printf_i+0xe8>
 8000ef6:	0649      	lsls	r1, r1, #25
 8000ef8:	bf48      	it	mi
 8000efa:	b2ad      	uxthmi	r5, r5
 8000efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000efe:	4852      	ldr	r0, [pc, #328]	@ (8001048 <_printf_i+0x234>)
 8000f00:	6033      	str	r3, [r6, #0]
 8000f02:	bf14      	ite	ne
 8000f04:	230a      	movne	r3, #10
 8000f06:	2308      	moveq	r3, #8
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f0e:	6866      	ldr	r6, [r4, #4]
 8000f10:	60a6      	str	r6, [r4, #8]
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	db05      	blt.n	8000f22 <_printf_i+0x10e>
 8000f16:	6821      	ldr	r1, [r4, #0]
 8000f18:	432e      	orrs	r6, r5
 8000f1a:	f021 0104 	bic.w	r1, r1, #4
 8000f1e:	6021      	str	r1, [r4, #0]
 8000f20:	d04b      	beq.n	8000fba <_printf_i+0x1a6>
 8000f22:	4616      	mov	r6, r2
 8000f24:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f28:	fb03 5711 	mls	r7, r3, r1, r5
 8000f2c:	5dc7      	ldrb	r7, [r0, r7]
 8000f2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f32:	462f      	mov	r7, r5
 8000f34:	42bb      	cmp	r3, r7
 8000f36:	460d      	mov	r5, r1
 8000f38:	d9f4      	bls.n	8000f24 <_printf_i+0x110>
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d10b      	bne.n	8000f56 <_printf_i+0x142>
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	07df      	lsls	r7, r3, #31
 8000f42:	d508      	bpl.n	8000f56 <_printf_i+0x142>
 8000f44:	6923      	ldr	r3, [r4, #16]
 8000f46:	6861      	ldr	r1, [r4, #4]
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	bfde      	ittt	le
 8000f4c:	2330      	movle	r3, #48	@ 0x30
 8000f4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f52:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f56:	1b92      	subs	r2, r2, r6
 8000f58:	6122      	str	r2, [r4, #16]
 8000f5a:	f8cd a000 	str.w	sl, [sp]
 8000f5e:	464b      	mov	r3, r9
 8000f60:	aa03      	add	r2, sp, #12
 8000f62:	4621      	mov	r1, r4
 8000f64:	4640      	mov	r0, r8
 8000f66:	f7ff fee7 	bl	8000d38 <_printf_common>
 8000f6a:	3001      	adds	r0, #1
 8000f6c:	d14a      	bne.n	8001004 <_printf_i+0x1f0>
 8000f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f72:	b004      	add	sp, #16
 8000f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	f043 0320 	orr.w	r3, r3, #32
 8000f7e:	6023      	str	r3, [r4, #0]
 8000f80:	4832      	ldr	r0, [pc, #200]	@ (800104c <_printf_i+0x238>)
 8000f82:	2778      	movs	r7, #120	@ 0x78
 8000f84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	6831      	ldr	r1, [r6, #0]
 8000f8c:	061f      	lsls	r7, r3, #24
 8000f8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f92:	d402      	bmi.n	8000f9a <_printf_i+0x186>
 8000f94:	065f      	lsls	r7, r3, #25
 8000f96:	bf48      	it	mi
 8000f98:	b2ad      	uxthmi	r5, r5
 8000f9a:	6031      	str	r1, [r6, #0]
 8000f9c:	07d9      	lsls	r1, r3, #31
 8000f9e:	bf44      	itt	mi
 8000fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8000fa4:	6023      	strmi	r3, [r4, #0]
 8000fa6:	b11d      	cbz	r5, 8000fb0 <_printf_i+0x19c>
 8000fa8:	2310      	movs	r3, #16
 8000faa:	e7ad      	b.n	8000f08 <_printf_i+0xf4>
 8000fac:	4826      	ldr	r0, [pc, #152]	@ (8001048 <_printf_i+0x234>)
 8000fae:	e7e9      	b.n	8000f84 <_printf_i+0x170>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	f023 0320 	bic.w	r3, r3, #32
 8000fb6:	6023      	str	r3, [r4, #0]
 8000fb8:	e7f6      	b.n	8000fa8 <_printf_i+0x194>
 8000fba:	4616      	mov	r6, r2
 8000fbc:	e7bd      	b.n	8000f3a <_printf_i+0x126>
 8000fbe:	6833      	ldr	r3, [r6, #0]
 8000fc0:	6825      	ldr	r5, [r4, #0]
 8000fc2:	6961      	ldr	r1, [r4, #20]
 8000fc4:	1d18      	adds	r0, r3, #4
 8000fc6:	6030      	str	r0, [r6, #0]
 8000fc8:	062e      	lsls	r6, r5, #24
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	d501      	bpl.n	8000fd2 <_printf_i+0x1be>
 8000fce:	6019      	str	r1, [r3, #0]
 8000fd0:	e002      	b.n	8000fd8 <_printf_i+0x1c4>
 8000fd2:	0668      	lsls	r0, r5, #25
 8000fd4:	d5fb      	bpl.n	8000fce <_printf_i+0x1ba>
 8000fd6:	8019      	strh	r1, [r3, #0]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6123      	str	r3, [r4, #16]
 8000fdc:	4616      	mov	r6, r2
 8000fde:	e7bc      	b.n	8000f5a <_printf_i+0x146>
 8000fe0:	6833      	ldr	r3, [r6, #0]
 8000fe2:	1d1a      	adds	r2, r3, #4
 8000fe4:	6032      	str	r2, [r6, #0]
 8000fe6:	681e      	ldr	r6, [r3, #0]
 8000fe8:	6862      	ldr	r2, [r4, #4]
 8000fea:	2100      	movs	r1, #0
 8000fec:	4630      	mov	r0, r6
 8000fee:	f7ff f8f7 	bl	80001e0 <memchr>
 8000ff2:	b108      	cbz	r0, 8000ff8 <_printf_i+0x1e4>
 8000ff4:	1b80      	subs	r0, r0, r6
 8000ff6:	6060      	str	r0, [r4, #4]
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	6123      	str	r3, [r4, #16]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001002:	e7aa      	b.n	8000f5a <_printf_i+0x146>
 8001004:	6923      	ldr	r3, [r4, #16]
 8001006:	4632      	mov	r2, r6
 8001008:	4649      	mov	r1, r9
 800100a:	4640      	mov	r0, r8
 800100c:	47d0      	blx	sl
 800100e:	3001      	adds	r0, #1
 8001010:	d0ad      	beq.n	8000f6e <_printf_i+0x15a>
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	079b      	lsls	r3, r3, #30
 8001016:	d413      	bmi.n	8001040 <_printf_i+0x22c>
 8001018:	68e0      	ldr	r0, [r4, #12]
 800101a:	9b03      	ldr	r3, [sp, #12]
 800101c:	4298      	cmp	r0, r3
 800101e:	bfb8      	it	lt
 8001020:	4618      	movlt	r0, r3
 8001022:	e7a6      	b.n	8000f72 <_printf_i+0x15e>
 8001024:	2301      	movs	r3, #1
 8001026:	4632      	mov	r2, r6
 8001028:	4649      	mov	r1, r9
 800102a:	4640      	mov	r0, r8
 800102c:	47d0      	blx	sl
 800102e:	3001      	adds	r0, #1
 8001030:	d09d      	beq.n	8000f6e <_printf_i+0x15a>
 8001032:	3501      	adds	r5, #1
 8001034:	68e3      	ldr	r3, [r4, #12]
 8001036:	9903      	ldr	r1, [sp, #12]
 8001038:	1a5b      	subs	r3, r3, r1
 800103a:	42ab      	cmp	r3, r5
 800103c:	dcf2      	bgt.n	8001024 <_printf_i+0x210>
 800103e:	e7eb      	b.n	8001018 <_printf_i+0x204>
 8001040:	2500      	movs	r5, #0
 8001042:	f104 0619 	add.w	r6, r4, #25
 8001046:	e7f5      	b.n	8001034 <_printf_i+0x220>
 8001048:	08001638 	.word	0x08001638
 800104c:	08001649 	.word	0x08001649

08001050 <__sflush_r>:
 8001050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001058:	0716      	lsls	r6, r2, #28
 800105a:	4605      	mov	r5, r0
 800105c:	460c      	mov	r4, r1
 800105e:	d454      	bmi.n	800110a <__sflush_r+0xba>
 8001060:	684b      	ldr	r3, [r1, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	dc02      	bgt.n	800106c <__sflush_r+0x1c>
 8001066:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	dd48      	ble.n	80010fe <__sflush_r+0xae>
 800106c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800106e:	2e00      	cmp	r6, #0
 8001070:	d045      	beq.n	80010fe <__sflush_r+0xae>
 8001072:	2300      	movs	r3, #0
 8001074:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001078:	682f      	ldr	r7, [r5, #0]
 800107a:	6a21      	ldr	r1, [r4, #32]
 800107c:	602b      	str	r3, [r5, #0]
 800107e:	d030      	beq.n	80010e2 <__sflush_r+0x92>
 8001080:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	0759      	lsls	r1, r3, #29
 8001086:	d505      	bpl.n	8001094 <__sflush_r+0x44>
 8001088:	6863      	ldr	r3, [r4, #4]
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800108e:	b10b      	cbz	r3, 8001094 <__sflush_r+0x44>
 8001090:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001092:	1ad2      	subs	r2, r2, r3
 8001094:	2300      	movs	r3, #0
 8001096:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001098:	6a21      	ldr	r1, [r4, #32]
 800109a:	4628      	mov	r0, r5
 800109c:	47b0      	blx	r6
 800109e:	1c43      	adds	r3, r0, #1
 80010a0:	89a3      	ldrh	r3, [r4, #12]
 80010a2:	d106      	bne.n	80010b2 <__sflush_r+0x62>
 80010a4:	6829      	ldr	r1, [r5, #0]
 80010a6:	291d      	cmp	r1, #29
 80010a8:	d82b      	bhi.n	8001102 <__sflush_r+0xb2>
 80010aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001154 <__sflush_r+0x104>)
 80010ac:	40ca      	lsrs	r2, r1
 80010ae:	07d6      	lsls	r6, r2, #31
 80010b0:	d527      	bpl.n	8001102 <__sflush_r+0xb2>
 80010b2:	2200      	movs	r2, #0
 80010b4:	6062      	str	r2, [r4, #4]
 80010b6:	04d9      	lsls	r1, r3, #19
 80010b8:	6922      	ldr	r2, [r4, #16]
 80010ba:	6022      	str	r2, [r4, #0]
 80010bc:	d504      	bpl.n	80010c8 <__sflush_r+0x78>
 80010be:	1c42      	adds	r2, r0, #1
 80010c0:	d101      	bne.n	80010c6 <__sflush_r+0x76>
 80010c2:	682b      	ldr	r3, [r5, #0]
 80010c4:	b903      	cbnz	r3, 80010c8 <__sflush_r+0x78>
 80010c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80010c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010ca:	602f      	str	r7, [r5, #0]
 80010cc:	b1b9      	cbz	r1, 80010fe <__sflush_r+0xae>
 80010ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010d2:	4299      	cmp	r1, r3
 80010d4:	d002      	beq.n	80010dc <__sflush_r+0x8c>
 80010d6:	4628      	mov	r0, r5
 80010d8:	f000 fa24 	bl	8001524 <_free_r>
 80010dc:	2300      	movs	r3, #0
 80010de:	6363      	str	r3, [r4, #52]	@ 0x34
 80010e0:	e00d      	b.n	80010fe <__sflush_r+0xae>
 80010e2:	2301      	movs	r3, #1
 80010e4:	4628      	mov	r0, r5
 80010e6:	47b0      	blx	r6
 80010e8:	4602      	mov	r2, r0
 80010ea:	1c50      	adds	r0, r2, #1
 80010ec:	d1c9      	bne.n	8001082 <__sflush_r+0x32>
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0c6      	beq.n	8001082 <__sflush_r+0x32>
 80010f4:	2b1d      	cmp	r3, #29
 80010f6:	d001      	beq.n	80010fc <__sflush_r+0xac>
 80010f8:	2b16      	cmp	r3, #22
 80010fa:	d11e      	bne.n	800113a <__sflush_r+0xea>
 80010fc:	602f      	str	r7, [r5, #0]
 80010fe:	2000      	movs	r0, #0
 8001100:	e022      	b.n	8001148 <__sflush_r+0xf8>
 8001102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001106:	b21b      	sxth	r3, r3
 8001108:	e01b      	b.n	8001142 <__sflush_r+0xf2>
 800110a:	690f      	ldr	r7, [r1, #16]
 800110c:	2f00      	cmp	r7, #0
 800110e:	d0f6      	beq.n	80010fe <__sflush_r+0xae>
 8001110:	0793      	lsls	r3, r2, #30
 8001112:	680e      	ldr	r6, [r1, #0]
 8001114:	bf08      	it	eq
 8001116:	694b      	ldreq	r3, [r1, #20]
 8001118:	600f      	str	r7, [r1, #0]
 800111a:	bf18      	it	ne
 800111c:	2300      	movne	r3, #0
 800111e:	eba6 0807 	sub.w	r8, r6, r7
 8001122:	608b      	str	r3, [r1, #8]
 8001124:	f1b8 0f00 	cmp.w	r8, #0
 8001128:	dde9      	ble.n	80010fe <__sflush_r+0xae>
 800112a:	6a21      	ldr	r1, [r4, #32]
 800112c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800112e:	4643      	mov	r3, r8
 8001130:	463a      	mov	r2, r7
 8001132:	4628      	mov	r0, r5
 8001134:	47b0      	blx	r6
 8001136:	2800      	cmp	r0, #0
 8001138:	dc08      	bgt.n	800114c <__sflush_r+0xfc>
 800113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800113e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001142:	81a3      	strh	r3, [r4, #12]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800114c:	4407      	add	r7, r0
 800114e:	eba8 0800 	sub.w	r8, r8, r0
 8001152:	e7e7      	b.n	8001124 <__sflush_r+0xd4>
 8001154:	20400001 	.word	0x20400001

08001158 <_fflush_r>:
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	690b      	ldr	r3, [r1, #16]
 800115c:	4605      	mov	r5, r0
 800115e:	460c      	mov	r4, r1
 8001160:	b913      	cbnz	r3, 8001168 <_fflush_r+0x10>
 8001162:	2500      	movs	r5, #0
 8001164:	4628      	mov	r0, r5
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	b118      	cbz	r0, 8001172 <_fflush_r+0x1a>
 800116a:	6a03      	ldr	r3, [r0, #32]
 800116c:	b90b      	cbnz	r3, 8001172 <_fflush_r+0x1a>
 800116e:	f7ff fb25 	bl	80007bc <__sinit>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f3      	beq.n	8001162 <_fflush_r+0xa>
 800117a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800117c:	07d0      	lsls	r0, r2, #31
 800117e:	d404      	bmi.n	800118a <_fflush_r+0x32>
 8001180:	0599      	lsls	r1, r3, #22
 8001182:	d402      	bmi.n	800118a <_fflush_r+0x32>
 8001184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001186:	f7ff fbf2 	bl	800096e <__retarget_lock_acquire_recursive>
 800118a:	4628      	mov	r0, r5
 800118c:	4621      	mov	r1, r4
 800118e:	f7ff ff5f 	bl	8001050 <__sflush_r>
 8001192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001194:	07da      	lsls	r2, r3, #31
 8001196:	4605      	mov	r5, r0
 8001198:	d4e4      	bmi.n	8001164 <_fflush_r+0xc>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	059b      	lsls	r3, r3, #22
 800119e:	d4e1      	bmi.n	8001164 <_fflush_r+0xc>
 80011a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011a2:	f7ff fbe5 	bl	8000970 <__retarget_lock_release_recursive>
 80011a6:	e7dd      	b.n	8001164 <_fflush_r+0xc>

080011a8 <__malloc_lock>:
 80011a8:	4801      	ldr	r0, [pc, #4]	@ (80011b0 <__malloc_lock+0x8>)
 80011aa:	f7ff bbe0 	b.w	800096e <__retarget_lock_acquire_recursive>
 80011ae:	bf00      	nop
 80011b0:	20000228 	.word	0x20000228

080011b4 <__malloc_unlock>:
 80011b4:	4801      	ldr	r0, [pc, #4]	@ (80011bc <__malloc_unlock+0x8>)
 80011b6:	f7ff bbdb 	b.w	8000970 <__retarget_lock_release_recursive>
 80011ba:	bf00      	nop
 80011bc:	20000228 	.word	0x20000228

080011c0 <__sread>:
 80011c0:	b510      	push	{r4, lr}
 80011c2:	460c      	mov	r4, r1
 80011c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011c8:	f000 f956 	bl	8001478 <_read_r>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	bfab      	itete	ge
 80011d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80011d2:	89a3      	ldrhlt	r3, [r4, #12]
 80011d4:	181b      	addge	r3, r3, r0
 80011d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011da:	bfac      	ite	ge
 80011dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011de:	81a3      	strhlt	r3, [r4, #12]
 80011e0:	bd10      	pop	{r4, pc}

080011e2 <__swrite>:
 80011e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e6:	461f      	mov	r7, r3
 80011e8:	898b      	ldrh	r3, [r1, #12]
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	4605      	mov	r5, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4616      	mov	r6, r2
 80011f2:	d505      	bpl.n	8001200 <__swrite+0x1e>
 80011f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011f8:	2302      	movs	r3, #2
 80011fa:	2200      	movs	r2, #0
 80011fc:	f000 f92a 	bl	8001454 <_lseek_r>
 8001200:	89a3      	ldrh	r3, [r4, #12]
 8001202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800120a:	81a3      	strh	r3, [r4, #12]
 800120c:	4632      	mov	r2, r6
 800120e:	463b      	mov	r3, r7
 8001210:	4628      	mov	r0, r5
 8001212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001216:	f000 b951 	b.w	80014bc <_write_r>

0800121a <__sseek>:
 800121a:	b510      	push	{r4, lr}
 800121c:	460c      	mov	r4, r1
 800121e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001222:	f000 f917 	bl	8001454 <_lseek_r>
 8001226:	1c43      	adds	r3, r0, #1
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	bf15      	itete	ne
 800122c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800122e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001232:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001236:	81a3      	strheq	r3, [r4, #12]
 8001238:	bf18      	it	ne
 800123a:	81a3      	strhne	r3, [r4, #12]
 800123c:	bd10      	pop	{r4, pc}

0800123e <__sclose>:
 800123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001242:	f000 b94d 	b.w	80014e0 <_close_r>

08001246 <__swbuf_r>:
 8001246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001248:	460e      	mov	r6, r1
 800124a:	4614      	mov	r4, r2
 800124c:	4605      	mov	r5, r0
 800124e:	b118      	cbz	r0, 8001258 <__swbuf_r+0x12>
 8001250:	6a03      	ldr	r3, [r0, #32]
 8001252:	b90b      	cbnz	r3, 8001258 <__swbuf_r+0x12>
 8001254:	f7ff fab2 	bl	80007bc <__sinit>
 8001258:	69a3      	ldr	r3, [r4, #24]
 800125a:	60a3      	str	r3, [r4, #8]
 800125c:	89a3      	ldrh	r3, [r4, #12]
 800125e:	071a      	lsls	r2, r3, #28
 8001260:	d501      	bpl.n	8001266 <__swbuf_r+0x20>
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	b943      	cbnz	r3, 8001278 <__swbuf_r+0x32>
 8001266:	4621      	mov	r1, r4
 8001268:	4628      	mov	r0, r5
 800126a:	f000 f82b 	bl	80012c4 <__swsetup_r>
 800126e:	b118      	cbz	r0, 8001278 <__swbuf_r+0x32>
 8001270:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001274:	4638      	mov	r0, r7
 8001276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	6922      	ldr	r2, [r4, #16]
 800127c:	1a98      	subs	r0, r3, r2
 800127e:	6963      	ldr	r3, [r4, #20]
 8001280:	b2f6      	uxtb	r6, r6
 8001282:	4283      	cmp	r3, r0
 8001284:	4637      	mov	r7, r6
 8001286:	dc05      	bgt.n	8001294 <__swbuf_r+0x4e>
 8001288:	4621      	mov	r1, r4
 800128a:	4628      	mov	r0, r5
 800128c:	f7ff ff64 	bl	8001158 <_fflush_r>
 8001290:	2800      	cmp	r0, #0
 8001292:	d1ed      	bne.n	8001270 <__swbuf_r+0x2a>
 8001294:	68a3      	ldr	r3, [r4, #8]
 8001296:	3b01      	subs	r3, #1
 8001298:	60a3      	str	r3, [r4, #8]
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	6022      	str	r2, [r4, #0]
 80012a0:	701e      	strb	r6, [r3, #0]
 80012a2:	6962      	ldr	r2, [r4, #20]
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d004      	beq.n	80012b4 <__swbuf_r+0x6e>
 80012aa:	89a3      	ldrh	r3, [r4, #12]
 80012ac:	07db      	lsls	r3, r3, #31
 80012ae:	d5e1      	bpl.n	8001274 <__swbuf_r+0x2e>
 80012b0:	2e0a      	cmp	r6, #10
 80012b2:	d1df      	bne.n	8001274 <__swbuf_r+0x2e>
 80012b4:	4621      	mov	r1, r4
 80012b6:	4628      	mov	r0, r5
 80012b8:	f7ff ff4e 	bl	8001158 <_fflush_r>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d0d9      	beq.n	8001274 <__swbuf_r+0x2e>
 80012c0:	e7d6      	b.n	8001270 <__swbuf_r+0x2a>
	...

080012c4 <__swsetup_r>:
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	4b29      	ldr	r3, [pc, #164]	@ (800136c <__swsetup_r+0xa8>)
 80012c8:	4605      	mov	r5, r0
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	460c      	mov	r4, r1
 80012ce:	b118      	cbz	r0, 80012d8 <__swsetup_r+0x14>
 80012d0:	6a03      	ldr	r3, [r0, #32]
 80012d2:	b90b      	cbnz	r3, 80012d8 <__swsetup_r+0x14>
 80012d4:	f7ff fa72 	bl	80007bc <__sinit>
 80012d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012dc:	0719      	lsls	r1, r3, #28
 80012de:	d422      	bmi.n	8001326 <__swsetup_r+0x62>
 80012e0:	06da      	lsls	r2, r3, #27
 80012e2:	d407      	bmi.n	80012f4 <__swsetup_r+0x30>
 80012e4:	2209      	movs	r2, #9
 80012e6:	602a      	str	r2, [r5, #0]
 80012e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ec:	81a3      	strh	r3, [r4, #12]
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f2:	e033      	b.n	800135c <__swsetup_r+0x98>
 80012f4:	0758      	lsls	r0, r3, #29
 80012f6:	d512      	bpl.n	800131e <__swsetup_r+0x5a>
 80012f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012fa:	b141      	cbz	r1, 800130e <__swsetup_r+0x4a>
 80012fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001300:	4299      	cmp	r1, r3
 8001302:	d002      	beq.n	800130a <__swsetup_r+0x46>
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f90d 	bl	8001524 <_free_r>
 800130a:	2300      	movs	r3, #0
 800130c:	6363      	str	r3, [r4, #52]	@ 0x34
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001314:	81a3      	strh	r3, [r4, #12]
 8001316:	2300      	movs	r3, #0
 8001318:	6063      	str	r3, [r4, #4]
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	6923      	ldr	r3, [r4, #16]
 8001328:	b94b      	cbnz	r3, 800133e <__swsetup_r+0x7a>
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001334:	d003      	beq.n	800133e <__swsetup_r+0x7a>
 8001336:	4621      	mov	r1, r4
 8001338:	4628      	mov	r0, r5
 800133a:	f000 f83f 	bl	80013bc <__smakebuf_r>
 800133e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001342:	f013 0201 	ands.w	r2, r3, #1
 8001346:	d00a      	beq.n	800135e <__swsetup_r+0x9a>
 8001348:	2200      	movs	r2, #0
 800134a:	60a2      	str	r2, [r4, #8]
 800134c:	6962      	ldr	r2, [r4, #20]
 800134e:	4252      	negs	r2, r2
 8001350:	61a2      	str	r2, [r4, #24]
 8001352:	6922      	ldr	r2, [r4, #16]
 8001354:	b942      	cbnz	r2, 8001368 <__swsetup_r+0xa4>
 8001356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800135a:	d1c5      	bne.n	80012e8 <__swsetup_r+0x24>
 800135c:	bd38      	pop	{r3, r4, r5, pc}
 800135e:	0799      	lsls	r1, r3, #30
 8001360:	bf58      	it	pl
 8001362:	6962      	ldrpl	r2, [r4, #20]
 8001364:	60a2      	str	r2, [r4, #8]
 8001366:	e7f4      	b.n	8001352 <__swsetup_r+0x8e>
 8001368:	2000      	movs	r0, #0
 800136a:	e7f7      	b.n	800135c <__swsetup_r+0x98>
 800136c:	20000038 	.word	0x20000038

08001370 <__swhatbuf_r>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	460c      	mov	r4, r1
 8001374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001378:	2900      	cmp	r1, #0
 800137a:	b096      	sub	sp, #88	@ 0x58
 800137c:	4615      	mov	r5, r2
 800137e:	461e      	mov	r6, r3
 8001380:	da0d      	bge.n	800139e <__swhatbuf_r+0x2e>
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	bf14      	ite	ne
 800138e:	2340      	movne	r3, #64	@ 0x40
 8001390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001394:	2000      	movs	r0, #0
 8001396:	6031      	str	r1, [r6, #0]
 8001398:	602b      	str	r3, [r5, #0]
 800139a:	b016      	add	sp, #88	@ 0x58
 800139c:	bd70      	pop	{r4, r5, r6, pc}
 800139e:	466a      	mov	r2, sp
 80013a0:	f000 f8ae 	bl	8001500 <_fstat_r>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	dbec      	blt.n	8001382 <__swhatbuf_r+0x12>
 80013a8:	9901      	ldr	r1, [sp, #4]
 80013aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013b2:	4259      	negs	r1, r3
 80013b4:	4159      	adcs	r1, r3
 80013b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ba:	e7eb      	b.n	8001394 <__swhatbuf_r+0x24>

080013bc <__smakebuf_r>:
 80013bc:	898b      	ldrh	r3, [r1, #12]
 80013be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013c0:	079d      	lsls	r5, r3, #30
 80013c2:	4606      	mov	r6, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	d507      	bpl.n	80013d8 <__smakebuf_r+0x1c>
 80013c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	6123      	str	r3, [r4, #16]
 80013d0:	2301      	movs	r3, #1
 80013d2:	6163      	str	r3, [r4, #20]
 80013d4:	b003      	add	sp, #12
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d8:	ab01      	add	r3, sp, #4
 80013da:	466a      	mov	r2, sp
 80013dc:	f7ff ffc8 	bl	8001370 <__swhatbuf_r>
 80013e0:	9f00      	ldr	r7, [sp, #0]
 80013e2:	4605      	mov	r5, r0
 80013e4:	4639      	mov	r1, r7
 80013e6:	4630      	mov	r0, r6
 80013e8:	f7ff fc26 	bl	8000c38 <_malloc_r>
 80013ec:	b948      	cbnz	r0, 8001402 <__smakebuf_r+0x46>
 80013ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013f2:	059a      	lsls	r2, r3, #22
 80013f4:	d4ee      	bmi.n	80013d4 <__smakebuf_r+0x18>
 80013f6:	f023 0303 	bic.w	r3, r3, #3
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	81a3      	strh	r3, [r4, #12]
 8001400:	e7e2      	b.n	80013c8 <__smakebuf_r+0xc>
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	6020      	str	r0, [r4, #0]
 8001406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140a:	81a3      	strh	r3, [r4, #12]
 800140c:	9b01      	ldr	r3, [sp, #4]
 800140e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001412:	b15b      	cbz	r3, 800142c <__smakebuf_r+0x70>
 8001414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001418:	4630      	mov	r0, r6
 800141a:	f000 f80b 	bl	8001434 <_isatty_r>
 800141e:	b128      	cbz	r0, 800142c <__smakebuf_r+0x70>
 8001420:	89a3      	ldrh	r3, [r4, #12]
 8001422:	f023 0303 	bic.w	r3, r3, #3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	81a3      	strh	r3, [r4, #12]
 800142c:	89a3      	ldrh	r3, [r4, #12]
 800142e:	431d      	orrs	r5, r3
 8001430:	81a5      	strh	r5, [r4, #12]
 8001432:	e7cf      	b.n	80013d4 <__smakebuf_r+0x18>

08001434 <_isatty_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d06      	ldr	r5, [pc, #24]	@ (8001450 <_isatty_r+0x1c>)
 8001438:	2300      	movs	r3, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	f7ff f8b7 	bl	80005b2 <_isatty>
 8001444:	1c43      	adds	r3, r0, #1
 8001446:	d102      	bne.n	800144e <_isatty_r+0x1a>
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	b103      	cbz	r3, 800144e <_isatty_r+0x1a>
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	20000234 	.word	0x20000234

08001454 <_lseek_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4d07      	ldr	r5, [pc, #28]	@ (8001474 <_lseek_r+0x20>)
 8001458:	4604      	mov	r4, r0
 800145a:	4608      	mov	r0, r1
 800145c:	4611      	mov	r1, r2
 800145e:	2200      	movs	r2, #0
 8001460:	602a      	str	r2, [r5, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	f7ff f8b0 	bl	80005c8 <_lseek>
 8001468:	1c43      	adds	r3, r0, #1
 800146a:	d102      	bne.n	8001472 <_lseek_r+0x1e>
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	b103      	cbz	r3, 8001472 <_lseek_r+0x1e>
 8001470:	6023      	str	r3, [r4, #0]
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	20000234 	.word	0x20000234

08001478 <_read_r>:
 8001478:	b538      	push	{r3, r4, r5, lr}
 800147a:	4d07      	ldr	r5, [pc, #28]	@ (8001498 <_read_r+0x20>)
 800147c:	4604      	mov	r4, r0
 800147e:	4608      	mov	r0, r1
 8001480:	4611      	mov	r1, r2
 8001482:	2200      	movs	r2, #0
 8001484:	602a      	str	r2, [r5, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	f7ff f83e 	bl	8000508 <_read>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_read_r+0x1e>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_read_r+0x1e>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	20000234 	.word	0x20000234

0800149c <_sbrk_r>:
 800149c:	b538      	push	{r3, r4, r5, lr}
 800149e:	4d06      	ldr	r5, [pc, #24]	@ (80014b8 <_sbrk_r+0x1c>)
 80014a0:	2300      	movs	r3, #0
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	602b      	str	r3, [r5, #0]
 80014a8:	f7ff f89c 	bl	80005e4 <_sbrk>
 80014ac:	1c43      	adds	r3, r0, #1
 80014ae:	d102      	bne.n	80014b6 <_sbrk_r+0x1a>
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	b103      	cbz	r3, 80014b6 <_sbrk_r+0x1a>
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	bd38      	pop	{r3, r4, r5, pc}
 80014b8:	20000234 	.word	0x20000234

080014bc <_write_r>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4d07      	ldr	r5, [pc, #28]	@ (80014dc <_write_r+0x20>)
 80014c0:	4604      	mov	r4, r0
 80014c2:	4608      	mov	r0, r1
 80014c4:	4611      	mov	r1, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	602a      	str	r2, [r5, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f7ff f839 	bl	8000542 <_write>
 80014d0:	1c43      	adds	r3, r0, #1
 80014d2:	d102      	bne.n	80014da <_write_r+0x1e>
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	b103      	cbz	r3, 80014da <_write_r+0x1e>
 80014d8:	6023      	str	r3, [r4, #0]
 80014da:	bd38      	pop	{r3, r4, r5, pc}
 80014dc:	20000234 	.word	0x20000234

080014e0 <_close_r>:
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4d06      	ldr	r5, [pc, #24]	@ (80014fc <_close_r+0x1c>)
 80014e4:	2300      	movs	r3, #0
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	602b      	str	r3, [r5, #0]
 80014ec:	f7ff f845 	bl	800057a <_close>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d102      	bne.n	80014fa <_close_r+0x1a>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	b103      	cbz	r3, 80014fa <_close_r+0x1a>
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	20000234 	.word	0x20000234

08001500 <_fstat_r>:
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4d07      	ldr	r5, [pc, #28]	@ (8001520 <_fstat_r+0x20>)
 8001504:	2300      	movs	r3, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	602b      	str	r3, [r5, #0]
 800150e:	f7ff f840 	bl	8000592 <_fstat>
 8001512:	1c43      	adds	r3, r0, #1
 8001514:	d102      	bne.n	800151c <_fstat_r+0x1c>
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	b103      	cbz	r3, 800151c <_fstat_r+0x1c>
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	bd38      	pop	{r3, r4, r5, pc}
 800151e:	bf00      	nop
 8001520:	20000234 	.word	0x20000234

08001524 <_free_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4605      	mov	r5, r0
 8001528:	2900      	cmp	r1, #0
 800152a:	d041      	beq.n	80015b0 <_free_r+0x8c>
 800152c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001530:	1f0c      	subs	r4, r1, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	bfb8      	it	lt
 8001536:	18e4      	addlt	r4, r4, r3
 8001538:	f7ff fe36 	bl	80011a8 <__malloc_lock>
 800153c:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <_free_r+0x90>)
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	b933      	cbnz	r3, 8001550 <_free_r+0x2c>
 8001542:	6063      	str	r3, [r4, #4]
 8001544:	6014      	str	r4, [r2, #0]
 8001546:	4628      	mov	r0, r5
 8001548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800154c:	f7ff be32 	b.w	80011b4 <__malloc_unlock>
 8001550:	42a3      	cmp	r3, r4
 8001552:	d908      	bls.n	8001566 <_free_r+0x42>
 8001554:	6820      	ldr	r0, [r4, #0]
 8001556:	1821      	adds	r1, r4, r0
 8001558:	428b      	cmp	r3, r1
 800155a:	bf01      	itttt	eq
 800155c:	6819      	ldreq	r1, [r3, #0]
 800155e:	685b      	ldreq	r3, [r3, #4]
 8001560:	1809      	addeq	r1, r1, r0
 8001562:	6021      	streq	r1, [r4, #0]
 8001564:	e7ed      	b.n	8001542 <_free_r+0x1e>
 8001566:	461a      	mov	r2, r3
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	b10b      	cbz	r3, 8001570 <_free_r+0x4c>
 800156c:	42a3      	cmp	r3, r4
 800156e:	d9fa      	bls.n	8001566 <_free_r+0x42>
 8001570:	6811      	ldr	r1, [r2, #0]
 8001572:	1850      	adds	r0, r2, r1
 8001574:	42a0      	cmp	r0, r4
 8001576:	d10b      	bne.n	8001590 <_free_r+0x6c>
 8001578:	6820      	ldr	r0, [r4, #0]
 800157a:	4401      	add	r1, r0
 800157c:	1850      	adds	r0, r2, r1
 800157e:	4283      	cmp	r3, r0
 8001580:	6011      	str	r1, [r2, #0]
 8001582:	d1e0      	bne.n	8001546 <_free_r+0x22>
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	6053      	str	r3, [r2, #4]
 800158a:	4408      	add	r0, r1
 800158c:	6010      	str	r0, [r2, #0]
 800158e:	e7da      	b.n	8001546 <_free_r+0x22>
 8001590:	d902      	bls.n	8001598 <_free_r+0x74>
 8001592:	230c      	movs	r3, #12
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	e7d6      	b.n	8001546 <_free_r+0x22>
 8001598:	6820      	ldr	r0, [r4, #0]
 800159a:	1821      	adds	r1, r4, r0
 800159c:	428b      	cmp	r3, r1
 800159e:	bf04      	itt	eq
 80015a0:	6819      	ldreq	r1, [r3, #0]
 80015a2:	685b      	ldreq	r3, [r3, #4]
 80015a4:	6063      	str	r3, [r4, #4]
 80015a6:	bf04      	itt	eq
 80015a8:	1809      	addeq	r1, r1, r0
 80015aa:	6021      	streq	r1, [r4, #0]
 80015ac:	6054      	str	r4, [r2, #4]
 80015ae:	e7ca      	b.n	8001546 <_free_r+0x22>
 80015b0:	bd38      	pop	{r3, r4, r5, pc}
 80015b2:	bf00      	nop
 80015b4:	20000230 	.word	0x20000230

080015b8 <_init>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	bf00      	nop
 80015bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015be:	bc08      	pop	{r3}
 80015c0:	469e      	mov	lr, r3
 80015c2:	4770      	bx	lr

080015c4 <_fini>:
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	bf00      	nop
 80015c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ca:	bc08      	pop	{r3}
 80015cc:	469e      	mov	lr, r3
 80015ce:	4770      	bx	lr
