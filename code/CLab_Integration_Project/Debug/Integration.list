
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080025a4  080025a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  00004088  2**0
                  CONTENTS
  4 .ARM          00000008  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027f4  080027f4  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000037f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080027fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004088  2**0
                  CONTENTS
 10 .bss          00000210  20000088  20000088  00004088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00004088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d24  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bce  00000000  00000000  00006ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  000079b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ed  00000000  00000000  00007c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ddd  00000000  00000000  00007e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b49  00000000  00000000  0001ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078759  00000000  00000000  0002175b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00099eb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001444  00000000  00000000  00099ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0009b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800258c 	.word	0x0800258c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800258c 	.word	0x0800258c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <enable_clocks>:
#include <stm32f303xc.h>


//-------------------------MAIN CONTROL -----------------------

void enable_clocks() {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <enable_clocks+0x1c>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <enable_clocks+0x1c>)
 80002ba:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80002be:	6153      	str	r3, [r2, #20]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <display_pattern_callback>:
    // Then call the chase_led function
    //chase_led();
    //display_pattern_callback();
}

void display_pattern_callback(uint8_t *buffer) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// Convert ASCII binary string (e.g., "11011110") to uint8_t pattern
	uint8_t pattern = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 8; i++) {
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	e01b      	b.n	800031a <display_pattern_callback+0x4a>
		if (buffer[i] == '1') {
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b31      	cmp	r3, #49	@ 0x31
 80002ec:	d10c      	bne.n	8000308 <display_pattern_callback+0x38>
			pattern |= (1 << (7 - i));  // MSB first
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f1c3 0307 	rsb	r3, r3, #7
 80002f4:	2201      	movs	r2, #1
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	b25a      	sxtb	r2, r3
 80002fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000300:	4313      	orrs	r3, r2
 8000302:	b25b      	sxtb	r3, r3
 8000304:	73fb      	strb	r3, [r7, #15]
 8000306:	e005      	b.n	8000314 <display_pattern_callback+0x44>
		} else if (buffer[i] != '0') {
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b30      	cmp	r3, #48	@ 0x30
 8000312:	d10a      	bne.n	800032a <display_pattern_callback+0x5a>
	for (int i = 0; i < 8; i++) {
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	3301      	adds	r3, #1
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b07      	cmp	r3, #7
 800031e:	dde0      	ble.n	80002e2 <display_pattern_callback+0x12>
			// Invalid character found â€” stop and do not update LEDs
			return;
		}
	}

	leds_set_state(pattern);
 8000320:	7bfb      	ldrb	r3, [r7, #15]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f868 	bl	80003f8 <leds_set_state>
 8000328:	e000      	b.n	800032c <display_pattern_callback+0x5c>
			return;
 800032a:	bf00      	nop
}
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <pattern_callback_init>:

//-----------------------PATTERN CONTROL------------------------
static pattern_callback_t pattern_display_callback = 0x00;

void pattern_callback_init(pattern_callback_t callback) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    pattern_display_callback = callback;
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <pattern_callback_init+0x1c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	200000a4 	.word	0x200000a4

08000354 <trigger_pattern_display>:

void trigger_pattern_display(uint8_t *pattern_buffer) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    if (pattern_display_callback != 0x00) {
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <trigger_pattern_display+0x20>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <trigger_pattern_display+0x18>
        pattern_display_callback(pattern_buffer);
 8000364:	4b03      	ldr	r3, [pc, #12]	@ (8000374 <trigger_pattern_display+0x20>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	4798      	blx	r3
    }
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200000a4 	.word	0x200000a4

08000378 <DigitalIO_SetPattern>:

void DigitalIO_SetPattern(char *pattern) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    trigger_pattern_display((uint8_t*)pattern);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ffe7 	bl	8000354 <trigger_pattern_display>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <EXTI0_IRQHandler>:

// Static variable only accessible in this file
static button_callback_t on_button_press = 0x00;

void EXTI0_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (on_button_press != 0x00) {
 8000394:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <EXTI0_IRQHandler+0x24>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI0_IRQHandler+0x12>
		on_button_press();
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <EXTI0_IRQHandler+0x24>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4798      	blx	r3
	}

	EXTI->PR |= EXTI_PR_PR0; // clear interrupt flag
 80003a2:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <EXTI0_IRQHandler+0x28>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <EXTI0_IRQHandler+0x28>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6153      	str	r3, [r2, #20]
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000a8 	.word	0x200000a8
 80003b8:	40010400 	.word	0x40010400

080003bc <initialise_board>:


//-------------------------LED CONTROL -----------------------

// LED GPIO Initialization (GPIOE, assuming LEDs are connected here)
void initialise_board(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    // Enable clock for GPIOE
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <initialise_board+0x34>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <initialise_board+0x34>)
 80003c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ca:	6153      	str	r3, [r2, #20]

    // Set pins PE8-PE15 as output
    GPIOE->MODER &= ~(0xFFFF0000);  // Clear mode bits for PE8-PE15
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <initialise_board+0x38>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <initialise_board+0x38>)
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= 0x55550000;     // Set PE8-PE15 to output mode (01)
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <initialise_board+0x38>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a06      	ldr	r2, [pc, #24]	@ (80003f4 <initialise_board+0x38>)
 80003dc:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80003e0:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48001000 	.word	0x48001000

080003f8 <leds_set_state>:
    state = (GPIOE->ODR >> 8) & 0xFF;  // Read ODR for PE8-PE15 and mask lower 8 bits
    return state;
}

// Set the state of the LEDs (PE8 to PE15 using a bitmask)
void leds_set_state(uint8_t state) {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
    GPIOE->ODR = (GPIOE->ODR & 0x00FF) | (state << 8); // Set only PE8-PE15
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <leds_set_state+0x28>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	4904      	ldr	r1, [pc, #16]	@ (8000420 <leds_set_state+0x28>)
 800040e:	4313      	orrs	r3, r2
 8000410:	614b      	str	r3, [r1, #20]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	48001000 	.word	0x48001000

08000424 <__io_putchar>:
#include "digitalio.h"
#include "stm32f303xc.h"

#define MAX_CMD_LEN 64

int __io_putchar(int ch) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4904      	ldr	r1, [pc, #16]	@ (8000444 <__io_putchar+0x20>)
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fb82 	bl	8000b3c <SerialOutputChar>
    return ch;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000

08000448 <reset_all_modes>:
    MODE_SERIAL
} SystemMode;

SystemMode current_mode = MODE_NONE;

void reset_all_modes() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    // Stop timer
    TIM2->CR1 = 0;
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]

    // Reset LED output
    leds_set_state(0);  // Turn off all LEDs
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ffcf 	bl	80003f8 <leds_set_state>

    // Disable UART TX interrupt (optional)
    USART1->CR1 &= ~USART_CR1_TXEIE;
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <reset_all_modes+0x28>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <reset_all_modes+0x28>)
 8000460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000464:	6013      	str	r3, [r2, #0]

    current_mode = MODE_NONE;
 8000466:	4b03      	ldr	r3, [pc, #12]	@ (8000474 <reset_all_modes+0x2c>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40013800 	.word	0x40013800
 8000474:	200000ac 	.word	0x200000ac

08000478 <OnLineReceived>:

void OnLineReceived(char *input, uint32_t len) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b0a4      	sub	sp, #144	@ 0x90
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
    char command[MAX_CMD_LEN], argument[MAX_CMD_LEN];
    if (sscanf(input, "%s %[^\n]", command, argument) != 2) {
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800048a:	493a      	ldr	r1, [pc, #232]	@ (8000574 <OnLineReceived+0xfc>)
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 fdb3 	bl	8000ff8 <siscanf>
 8000492:	4603      	mov	r3, r0
 8000494:	2b02      	cmp	r3, #2
 8000496:	d003      	beq.n	80004a0 <OnLineReceived+0x28>
        SerialStartTransmission("Invalid input format.\r\n> ");
 8000498:	4837      	ldr	r0, [pc, #220]	@ (8000578 <OnLineReceived+0x100>)
 800049a:	f000 fb77 	bl	8000b8c <SerialStartTransmission>
 800049e:	e066      	b.n	800056e <OnLineReceived+0xf6>
        return;
    }
    reset_all_modes();
 80004a0:	f7ff ffd2 	bl	8000448 <reset_all_modes>

    if (strcmp(command, "led") == 0) {
 80004a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004a8:	4934      	ldr	r1, [pc, #208]	@ (800057c <OnLineReceived+0x104>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fe98 	bl	80001e0 <strcmp>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d10b      	bne.n	80004ce <OnLineReceived+0x56>
        DigitalIO_SetPattern(argument);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff5c 	bl	8000378 <DigitalIO_SetPattern>
        current_mode = MODE_LED;
 80004c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <OnLineReceived+0x108>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("LED pattern set.\r\n> ");
 80004c6:	482f      	ldr	r0, [pc, #188]	@ (8000584 <OnLineReceived+0x10c>)
 80004c8:	f000 fb60 	bl	8000b8c <SerialStartTransmission>
 80004cc:	e04f      	b.n	800056e <OnLineReceived+0xf6>
    }
    else if (strcmp(command, "serial") == 0) {
 80004ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004d2:	492d      	ldr	r1, [pc, #180]	@ (8000588 <OnLineReceived+0x110>)
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fe83 	bl	80001e0 <strcmp>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10b      	bne.n	80004f8 <OnLineReceived+0x80>
        SerialStartTransmission(argument);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fb51 	bl	8000b8c <SerialStartTransmission>
        current_mode = MODE_SERIAL;
 80004ea:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <OnLineReceived+0x108>)
 80004ec:	2204      	movs	r2, #4
 80004ee:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("\r\n> ");
 80004f0:	4826      	ldr	r0, [pc, #152]	@ (800058c <OnLineReceived+0x114>)
 80004f2:	f000 fb4b 	bl	8000b8c <SerialStartTransmission>
 80004f6:	e03a      	b.n	800056e <OnLineReceived+0xf6>
    }
    else if (strcmp(command, "timer") == 0) {
 80004f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004fc:	4924      	ldr	r1, [pc, #144]	@ (8000590 <OnLineReceived+0x118>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe6e 	bl	80001e0 <strcmp>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d112      	bne.n	8000530 <OnLineReceived+0xb8>
        uint32_t ms = atoi(argument);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fc13 	bl	8000d3a <atoi>
 8000514:	4603      	mov	r3, r0
 8000516:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        current_mode = MODE_TIMER;
 800051a:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <OnLineReceived+0x108>)
 800051c:	2202      	movs	r2, #2
 800051e:	701a      	strb	r2, [r3, #0]
        Timer_SetPeriodic(ms);
 8000520:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000524:	f000 fa68 	bl	80009f8 <Timer_SetPeriodic>
        SerialStartTransmission("Periodic timer started.\r\n> ");
 8000528:	481a      	ldr	r0, [pc, #104]	@ (8000594 <OnLineReceived+0x11c>)
 800052a:	f000 fb2f 	bl	8000b8c <SerialStartTransmission>
 800052e:	e01e      	b.n	800056e <OnLineReceived+0xf6>
    }
    else if (strcmp(command, "oneshot") == 0) {
 8000530:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000534:	4918      	ldr	r1, [pc, #96]	@ (8000598 <OnLineReceived+0x120>)
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe52 	bl	80001e0 <strcmp>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d112      	bne.n	8000568 <OnLineReceived+0xf0>
        uint32_t ms = atoi(argument);
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fbf7 	bl	8000d3a <atoi>
 800054c:	4603      	mov	r3, r0
 800054e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        Timer_TriggerOneShot(ms);
 8000552:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000556:	f000 fa5f 	bl	8000a18 <Timer_TriggerOneShot>
        current_mode = MODE_ONESHOT;
 800055a:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <OnLineReceived+0x108>)
 800055c:	2203      	movs	r2, #3
 800055e:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("One-shot timer triggered.\r\n> ");
 8000560:	480e      	ldr	r0, [pc, #56]	@ (800059c <OnLineReceived+0x124>)
 8000562:	f000 fb13 	bl	8000b8c <SerialStartTransmission>
 8000566:	e002      	b.n	800056e <OnLineReceived+0xf6>
    }
    else {
        SerialStartTransmission("Unknown command.\r\n> ");
 8000568:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <OnLineReceived+0x128>)
 800056a:	f000 fb0f 	bl	8000b8c <SerialStartTransmission>
    }
}
 800056e:	3790      	adds	r7, #144	@ 0x90
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	080025a4 	.word	0x080025a4
 8000578:	080025b0 	.word	0x080025b0
 800057c:	080025cc 	.word	0x080025cc
 8000580:	200000ac 	.word	0x200000ac
 8000584:	080025d0 	.word	0x080025d0
 8000588:	080025e8 	.word	0x080025e8
 800058c:	080025f0 	.word	0x080025f0
 8000590:	080025f8 	.word	0x080025f8
 8000594:	08002600 	.word	0x08002600
 8000598:	0800261c 	.word	0x0800261c
 800059c:	08002624 	.word	0x08002624
 80005a0:	08002644 	.word	0x08002644

080005a4 <main>:

int main(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    enable_clocks();                       // Enable GPIO/TIM clocks
 80005a8:	f7ff fe82 	bl	80002b0 <enable_clocks>
    initialise_board();                    // Configure LEDs
 80005ac:	f7ff ff06 	bl	80003bc <initialise_board>
    timer_enable_clocks();
 80005b0:	f000 f90a 	bl	80007c8 <timer_enable_clocks>
    timer_initialise_board();
 80005b4:	f000 f91e 	bl	80007f4 <timer_initialise_board>

    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80005b8:	2200      	movs	r2, #0
 80005ba:	4909      	ldr	r1, [pc, #36]	@ (80005e0 <main+0x3c>)
 80005bc:	2004      	movs	r0, #4
 80005be:	f000 fa57 	bl	8000a70 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 80005c2:	4908      	ldr	r1, [pc, #32]	@ (80005e4 <main+0x40>)
 80005c4:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <main+0x3c>)
 80005c6:	f000 fad2 	bl	8000b6e <SerialSetReceiveCallback>
    enable_timer2_interrupt();             // Enable TIM2 IRQs
 80005ca:	f000 f9a9 	bl	8000920 <enable_timer2_interrupt>
    pattern_callback_init(display_pattern_callback); // Register LED pattern handler
 80005ce:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <main+0x44>)
 80005d0:	f7ff feb0 	bl	8000334 <pattern_callback_init>

    printf("USART1 is ready. Type a line and press Enter:\r\n> ");
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <main+0x48>)
 80005d6:	f000 fcfd 	bl	8000fd4 <iprintf>

    while (1) {
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <main+0x36>
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	08000479 	.word	0x08000479
 80005e8:	080002d1 	.word	0x080002d1
 80005ec:	0800265c 	.word	0x0800265c

080005f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e00a      	b.n	8000618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000602:	f3af 8000 	nop.w
 8000606:	4601      	mov	r1, r0
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	b2ca      	uxtb	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf0      	blt.n	8000602 <_read+0x12>
	}

return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e009      	b.n	8000650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	60ba      	str	r2, [r7, #8]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff feed 	bl	8000424 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbf1      	blt.n	800063c <_write+0x12>
	}
	return len;
 8000658:	687b      	ldr	r3, [r7, #4]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <_close>:

int _close(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	return -1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800068a:	605a      	str	r2, [r3, #4]
	return 0;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <_isatty>:

int _isatty(int file)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	return 1;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f000 fd3a 	bl	8001174 <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000a000 	.word	0x2000a000
 800072c:	00000400 	.word	0x00000400
 8000730:	200000b0 	.word	0x200000b0
 8000734:	20000298 	.word	0x20000298

08000738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4907      	ldr	r1, [pc, #28]	@ (8000770 <__NVIC_EnableIRQ+0x38>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	@ (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	@ (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <timer_enable_clocks>:

// status of timer operation, 0 = regular interval mode, 1 = one-shot mode
uint8_t timer_mode = 0;

// enable the clocks for desired peripherals (GPIOA, C and E)
void timer_enable_clocks() {
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <timer_enable_clocks+0x28>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <timer_enable_clocks+0x28>)
 80007d2:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80007d6:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <timer_enable_clocks+0x28>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <timer_enable_clocks+0x28>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	61d3      	str	r3, [r2, #28]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <timer_initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void timer_initialise_board() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <timer_initialise_board+0x20>)
 80007fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555; //every second led is on
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000804:	801a      	strh	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	48001002 	.word	0x48001002

08000818 <trigger_prescaler>:

// general function called to make new prescaler value take effect
// input: desired timer number
void trigger_prescaler(TIM_TypeDef *TIM) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	TIM->ARR = 0x01;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2201      	movs	r2, #1
 8000824:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM->CNT = 0x00;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
	asm("NOP");
 800082c:	bf00      	nop
	asm("NOP");
 800082e:	bf00      	nop
	asm("NOP");
 8000830:	bf00      	nop
	TIM->ARR = 0xffffffff;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <init_timer_module>:
void (*on_timer_interrupt)() = 0x00;


// initialise timer with delay time in ms to trigger a callback function regularly
// input: desired timer number to initialise; delay time in ms; callback function
void init_timer_module(TIM_TypeDef *TIM, uint32_t interval, void (*timer_callback)()) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]

	TIM->CR1 |= TIM_CR1_CEN;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f043 0201 	orr.w	r2, r3, #1
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	601a      	str	r2, [r3, #0]
	TIM->PSC = 7999;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
	trigger_prescaler(TIM);
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff ffd5 	bl	8000818 <trigger_prescaler>
	TIM->CR1 = 0;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM->ARR = interval;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM->CR1 |= TIM_CR1_CEN;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f043 0201 	orr.w	r2, r3, #1
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	601a      	str	r2, [r3, #0]

	on_timer_interrupt = timer_callback;
 800088c:	4a03      	ldr	r2, [pc, #12]	@ (800089c <init_timer_module+0x54>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]

}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000b8 	.word	0x200000b8

080008a0 <change_pattern>:

// simple function to switch on/off every second led when called
void change_pattern() {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0

	uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <change_pattern+0x28>)
 80008a8:	607b      	str	r3, [r7, #4]
	*led_output_register ^= 0b10101010;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 80008b2:	43db      	mvns	r3, r3
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	701a      	strb	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	48001015 	.word	0x48001015

080008cc <TIM2_IRQHandler>:

// function called when timer interrupt is raised
void TIM2_IRQHandler(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    // Check if the TIM2 interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF) {
 80008d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d019      	beq.n	8000912 <TIM2_IRQHandler+0x46>
        // run the callback function (make sure it is not null first)
        if (on_timer_interrupt != 0x00) {
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <TIM2_IRQHandler+0x4c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00d      	beq.n	8000902 <TIM2_IRQHandler+0x36>

        	on_timer_interrupt();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <TIM2_IRQHandler+0x4c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4798      	blx	r3

        	// if timer is in one-shot mode then stop timer and reset timer to default mode
			if (timer_mode == 1) {
 80008ec:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <TIM2_IRQHandler+0x50>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <TIM2_IRQHandler+0x36>
        		TIM2->CR1 = 0;
 80008f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
        		timer_mode = 0;
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <TIM2_IRQHandler+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
			}

        }
        // Clear the interrupt flag (write 1 to the UIF bit to reset it)
        TIM2->SR &= ~TIM_SR_UIF;
 8000902:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	6113      	str	r3, [r2, #16]
    }
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000b8 	.word	0x200000b8
 800091c:	200000b4 	.word	0x200000b4

08000920 <enable_timer2_interrupt>:

// intialise hardware interrupt for timer 2
void enable_timer2_interrupt() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable update interrupt (UIE)
	TIM2->DIER |= TIM_DIER_UIE;
 8000928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	60d3      	str	r3, [r2, #12]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(TIM2_IRQn, 1);  // Set Priority
 8000938:	2101      	movs	r1, #1
 800093a:	201c      	movs	r0, #28
 800093c:	f7ff ff1a 	bl	8000774 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000940:	201c      	movs	r0, #28
 8000942:	f7ff fef9 	bl	8000738 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000946:	b662      	cpsie	i
}
 8000948:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}

0800094e <get_timer_period>:

// simple get function to return a specific timer's period in ms
// assuming timers are configured to 1kHz so each count is 1ms
uint32_t get_timer_period(TIM_TypeDef *TIM) {
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	return TIM->ARR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <set_timer_period>:

// simple set function to set a specific timer's period in ms
// assuming timers are configured to 1kHz so each count is 1ms
void set_timer_period(TIM_TypeDef *TIM, uint32_t new_period) {
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
	TIM->ARR = new_period;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <reset_timer>:

// function to reset a specific timer's count with a new period in ms
// assuming timers are configured to 1kHz so each count is ms
void reset_timer(TIM_TypeDef *TIM, uint32_t new_period) {
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]

	// stop timer's count and reset count to 0
	TIM->CR1 = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
	// set new period
	set_timer_period(TIM, new_period);
 8000998:	6839      	ldr	r1, [r7, #0]
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffe3 	bl	8000966 <set_timer_period>
	// restart timer
	TIM->CR1 |= TIM_CR1_CEN;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f043 0201 	orr.w	r2, r3, #1
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <one_shot>:

// software implementation to convert a specific timer's operation to one-shot mode by using a flag
// input delay desired in ms
void one_shot(TIM_TypeDef *TIM, uint32_t delay) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
    timer_mode = 1;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <one_shot+0x3c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]

    // Turn on LED (e.g., PE8)
    GPIOE->ODR |= (1 << 8);
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <one_shot+0x40>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <one_shot+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ce:	6153      	str	r3, [r2, #20]

    if (get_timer_period(TIM) != delay) {
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ffbc 	bl	800094e <get_timer_period>
 80009d6:	4602      	mov	r2, r0
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4293      	cmp	r3, r2
 80009dc:	d003      	beq.n	80009e6 <one_shot+0x32>
        reset_timer(TIM, delay);
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffce 	bl	8000982 <reset_timer>
    }
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000b4 	.word	0x200000b4
 80009f4:	48001000 	.word	0x48001000

080009f8 <Timer_SetPeriodic>:


void Timer_SetPeriodic(uint32_t ms) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    init_timer_module(TIM2, ms, change_pattern);  // Uses toggling LED pattern
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <Timer_SetPeriodic+0x1c>)
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000a08:	f7ff ff1e 	bl	8000848 <init_timer_module>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	080008a1 	.word	0x080008a1

08000a18 <Timer_TriggerOneShot>:

void Timer_TriggerOneShot(uint32_t ms) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    one_shot(TIM2, ms);
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000a26:	f7ff ffc5 	bl	80009b4 <one_shot>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <__NVIC_EnableIRQ>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	@ (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <SerialInitialise>:
static uint32_t rx_index = 0;

static const char *tx_buffer = NULL;
static uint32_t tx_index = 0;

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <SerialInitialise+0xc8>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a2c      	ldr	r2, [pc, #176]	@ (8000b38 <SerialInitialise+0xc8>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <SerialInitialise+0xc8>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a29      	ldr	r2, [pc, #164]	@ (8000b38 <SerialInitialise+0xc8>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <SerialInitialise+0xc8>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4925      	ldr	r1, [pc, #148]	@ (8000b38 <SerialInitialise+0xc8>)
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	614b      	str	r3, [r1, #20]

    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	6952      	ldr	r2, [r2, #20]
 8000ab0:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	6992      	ldr	r2, [r2, #24]
 8000aba:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	69d9      	ldr	r1, [r3, #28]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	6a1a      	ldr	r2, [r3, #32]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	430a      	orrs	r2, r1
 8000acc:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	6a19      	ldr	r1, [r3, #32]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <SerialInitialise+0xc8>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4913      	ldr	r1, [pc, #76]	@ (8000b38 <SerialInitialise+0xc8>)
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <SerialInitialise+0xc8>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4910      	ldr	r1, [pc, #64]	@ (8000b38 <SerialInitialise+0xc8>)
 8000af8:	4313      	orrs	r3, r2
 8000afa:	618b      	str	r3, [r1, #24]

    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	330c      	adds	r3, #12
 8000b02:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2246      	movs	r2, #70	@ 0x46
 8000b08:	801a      	strh	r2, [r3, #0]

    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 020d 	orr.w	r2, r2, #13
 8000b18:	601a      	str	r2, [r3, #0]
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f042 0220 	orr.w	r2, r2, #32
 8000b28:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART1_IRQn);
 8000b2a:	2025      	movs	r0, #37	@ 0x25
 8000b2c:	f7ff ff82 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000

08000b3c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0);
 8000b48:	bf00      	nop
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f8      	beq.n	8000b4a <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SerialSetReceiveCallback>:
uint8_t SerialGetChar(SerialPort *serial_port) {
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);
    return serial_port->UART->RDR;
}

void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <SerialStartTransmission>:

void SerialStartTransmission(const char *str) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    tx_buffer = str;
 8000b94:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <SerialStartTransmission+0x2c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
    tx_index = 0;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <SerialStartTransmission+0x30>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_TXEIE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <SerialStartTransmission+0x34>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <SerialStartTransmission+0x34>)
 8000ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000144 	.word	0x20000144
 8000bbc:	20000148 	.word	0x20000148
 8000bc0:	40013800 	.word	0x40013800

08000bc4 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 8000bca:	4b40      	ldr	r3, [pc, #256]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d045      	beq.n	8000c62 <USART1_EXTI25_IRQHandler+0x9e>
        char c = USART1->RDR;
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000bd8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	71fb      	strb	r3, [r7, #7]
        SerialOutputChar(c, &USART1_PORT);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	493b      	ldr	r1, [pc, #236]	@ (8000cd0 <USART1_EXTI25_IRQHandler+0x10c>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffaa 	bl	8000b3c <SerialOutputChar>

        if (c == '\r') return;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b0d      	cmp	r3, #13
 8000bec:	d06a      	beq.n	8000cc4 <USART1_EXTI25_IRQHandler+0x100>

        if (c == '\n') {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b0a      	cmp	r3, #10
 8000bf2:	d124      	bne.n	8000c3e <USART1_EXTI25_IRQHandler+0x7a>
            rx_buffers[active_rx_buf][rx_index] = '\0';
 8000bf4:	4b37      	ldr	r3, [pc, #220]	@ (8000cd4 <USART1_EXTI25_IRQHandler+0x110>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <USART1_EXTI25_IRQHandler+0x114>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4937      	ldr	r1, [pc, #220]	@ (8000cdc <USART1_EXTI25_IRQHandler+0x118>)
 8000c00:	0192      	lsls	r2, r2, #6
 8000c02:	440a      	add	r2, r1
 8000c04:	4413      	add	r3, r2
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
            if (USART1_PORT.receive_callback)
 8000c0a:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <USART1_EXTI25_IRQHandler+0x10c>)
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <USART1_EXTI25_IRQHandler+0x64>
                USART1_PORT.receive_callback(rx_buffers[active_rx_buf], rx_index);
 8000c12:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <USART1_EXTI25_IRQHandler+0x10c>)
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd4 <USART1_EXTI25_IRQHandler+0x110>)
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0192      	lsls	r2, r2, #6
 8000c1c:	492f      	ldr	r1, [pc, #188]	@ (8000cdc <USART1_EXTI25_IRQHandler+0x118>)
 8000c1e:	440a      	add	r2, r1
 8000c20:	492d      	ldr	r1, [pc, #180]	@ (8000cd8 <USART1_EXTI25_IRQHandler+0x114>)
 8000c22:	6809      	ldr	r1, [r1, #0]
 8000c24:	4610      	mov	r0, r2
 8000c26:	4798      	blx	r3
            active_rx_buf ^= 1;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <USART1_EXTI25_IRQHandler+0x110>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <USART1_EXTI25_IRQHandler+0x110>)
 8000c34:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <USART1_EXTI25_IRQHandler+0x114>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e011      	b.n	8000c62 <USART1_EXTI25_IRQHandler+0x9e>
        } else if (rx_index < sizeof(rx_buffers[0]) - 1) {
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <USART1_EXTI25_IRQHandler+0x114>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c44:	d80d      	bhi.n	8000c62 <USART1_EXTI25_IRQHandler+0x9e>
            rx_buffers[active_rx_buf][rx_index++] = c;
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <USART1_EXTI25_IRQHandler+0x110>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <USART1_EXTI25_IRQHandler+0x114>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	4921      	ldr	r1, [pc, #132]	@ (8000cd8 <USART1_EXTI25_IRQHandler+0x114>)
 8000c54:	600a      	str	r2, [r1, #0]
 8000c56:	4921      	ldr	r1, [pc, #132]	@ (8000cdc <USART1_EXTI25_IRQHandler+0x118>)
 8000c58:	0182      	lsls	r2, r0, #6
 8000c5a:	440a      	add	r2, r1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d02b      	beq.n	8000cc6 <USART1_EXTI25_IRQHandler+0x102>
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d025      	beq.n	8000cc6 <USART1_EXTI25_IRQHandler+0x102>
        if (tx_buffer && tx_buffer[tx_index]) {
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d013      	beq.n	8000caa <USART1_EXTI25_IRQHandler+0xe6>
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <USART1_EXTI25_IRQHandler+0x120>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <USART1_EXTI25_IRQHandler+0xe6>
            USART1->TDR = tx_buffer[tx_index++];
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <USART1_EXTI25_IRQHandler+0x120>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1c59      	adds	r1, r3, #1
 8000c9c:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <USART1_EXTI25_IRQHandler+0x120>)
 8000c9e:	6001      	str	r1, [r0, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000ca8:	e00d      	b.n	8000cc6 <USART1_EXTI25_IRQHandler+0x102>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <USART1_EXTI25_IRQHandler+0x108>)
 8000cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000cb4:	6013      	str	r3, [r2, #0]
            tx_buffer = NULL;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <USART1_EXTI25_IRQHandler+0x11c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
            tx_index = 0;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <USART1_EXTI25_IRQHandler+0x120>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e000      	b.n	8000cc6 <USART1_EXTI25_IRQHandler+0x102>
        if (c == '\r') return;
 8000cc4:	bf00      	nop
        }
    }
}
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	2000013c 	.word	0x2000013c
 8000cd8:	20000140 	.word	0x20000140
 8000cdc:	200000bc 	.word	0x200000bc
 8000ce0:	20000144 	.word	0x20000144
 8000ce4:	20000148 	.word	0x20000148

08000ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce8:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	@ (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d16:	f000 fa33 	bl	8001180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1a:	f7ff fc43 	bl	80005a4 <main>

08000d1e <LoopForever>:

LoopForever:
  b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   r0, =_estack
 8000d20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d2c:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 8000d30:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d34:	20000298 	.word	0x20000298

08000d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_2_IRQHandler>

08000d3a <atoi>:
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f000 b87d 	b.w	8000e3c <strtol>
	...

08000d44 <_strtol_l.constprop.0>:
 8000d44:	2b24      	cmp	r3, #36	@ 0x24
 8000d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d4a:	4686      	mov	lr, r0
 8000d4c:	4690      	mov	r8, r2
 8000d4e:	d801      	bhi.n	8000d54 <_strtol_l.constprop.0+0x10>
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d106      	bne.n	8000d62 <_strtol_l.constprop.0+0x1e>
 8000d54:	f000 fa0e 	bl	8001174 <__errno>
 8000d58:	2316      	movs	r3, #22
 8000d5a:	6003      	str	r3, [r0, #0]
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	4834      	ldr	r0, [pc, #208]	@ (8000e34 <_strtol_l.constprop.0+0xf0>)
 8000d64:	460d      	mov	r5, r1
 8000d66:	462a      	mov	r2, r5
 8000d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000d6c:	5d06      	ldrb	r6, [r0, r4]
 8000d6e:	f016 0608 	ands.w	r6, r6, #8
 8000d72:	d1f8      	bne.n	8000d66 <_strtol_l.constprop.0+0x22>
 8000d74:	2c2d      	cmp	r4, #45	@ 0x2d
 8000d76:	d12d      	bne.n	8000dd4 <_strtol_l.constprop.0+0x90>
 8000d78:	782c      	ldrb	r4, [r5, #0]
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	1c95      	adds	r5, r2, #2
 8000d7e:	f033 0210 	bics.w	r2, r3, #16
 8000d82:	d109      	bne.n	8000d98 <_strtol_l.constprop.0+0x54>
 8000d84:	2c30      	cmp	r4, #48	@ 0x30
 8000d86:	d12a      	bne.n	8000dde <_strtol_l.constprop.0+0x9a>
 8000d88:	782a      	ldrb	r2, [r5, #0]
 8000d8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000d8e:	2a58      	cmp	r2, #88	@ 0x58
 8000d90:	d125      	bne.n	8000dde <_strtol_l.constprop.0+0x9a>
 8000d92:	786c      	ldrb	r4, [r5, #1]
 8000d94:	2310      	movs	r3, #16
 8000d96:	3502      	adds	r5, #2
 8000d98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000d9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000da0:	2200      	movs	r2, #0
 8000da2:	fbbc f9f3 	udiv	r9, ip, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	fb03 ca19 	mls	sl, r3, r9, ip
 8000dac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000db0:	2f09      	cmp	r7, #9
 8000db2:	d81b      	bhi.n	8000dec <_strtol_l.constprop.0+0xa8>
 8000db4:	463c      	mov	r4, r7
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	dd27      	ble.n	8000e0a <_strtol_l.constprop.0+0xc6>
 8000dba:	1c57      	adds	r7, r2, #1
 8000dbc:	d007      	beq.n	8000dce <_strtol_l.constprop.0+0x8a>
 8000dbe:	4581      	cmp	r9, r0
 8000dc0:	d320      	bcc.n	8000e04 <_strtol_l.constprop.0+0xc0>
 8000dc2:	d101      	bne.n	8000dc8 <_strtol_l.constprop.0+0x84>
 8000dc4:	45a2      	cmp	sl, r4
 8000dc6:	db1d      	blt.n	8000e04 <_strtol_l.constprop.0+0xc0>
 8000dc8:	fb00 4003 	mla	r0, r0, r3, r4
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000dd2:	e7eb      	b.n	8000dac <_strtol_l.constprop.0+0x68>
 8000dd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8000dd6:	bf04      	itt	eq
 8000dd8:	782c      	ldrbeq	r4, [r5, #0]
 8000dda:	1c95      	addeq	r5, r2, #2
 8000ddc:	e7cf      	b.n	8000d7e <_strtol_l.constprop.0+0x3a>
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1da      	bne.n	8000d98 <_strtol_l.constprop.0+0x54>
 8000de2:	2c30      	cmp	r4, #48	@ 0x30
 8000de4:	bf0c      	ite	eq
 8000de6:	2308      	moveq	r3, #8
 8000de8:	230a      	movne	r3, #10
 8000dea:	e7d5      	b.n	8000d98 <_strtol_l.constprop.0+0x54>
 8000dec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000df0:	2f19      	cmp	r7, #25
 8000df2:	d801      	bhi.n	8000df8 <_strtol_l.constprop.0+0xb4>
 8000df4:	3c37      	subs	r4, #55	@ 0x37
 8000df6:	e7de      	b.n	8000db6 <_strtol_l.constprop.0+0x72>
 8000df8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000dfc:	2f19      	cmp	r7, #25
 8000dfe:	d804      	bhi.n	8000e0a <_strtol_l.constprop.0+0xc6>
 8000e00:	3c57      	subs	r4, #87	@ 0x57
 8000e02:	e7d8      	b.n	8000db6 <_strtol_l.constprop.0+0x72>
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	e7e1      	b.n	8000dce <_strtol_l.constprop.0+0x8a>
 8000e0a:	1c53      	adds	r3, r2, #1
 8000e0c:	d108      	bne.n	8000e20 <_strtol_l.constprop.0+0xdc>
 8000e0e:	2322      	movs	r3, #34	@ 0x22
 8000e10:	f8ce 3000 	str.w	r3, [lr]
 8000e14:	4660      	mov	r0, ip
 8000e16:	f1b8 0f00 	cmp.w	r8, #0
 8000e1a:	d0a0      	beq.n	8000d5e <_strtol_l.constprop.0+0x1a>
 8000e1c:	1e69      	subs	r1, r5, #1
 8000e1e:	e006      	b.n	8000e2e <_strtol_l.constprop.0+0xea>
 8000e20:	b106      	cbz	r6, 8000e24 <_strtol_l.constprop.0+0xe0>
 8000e22:	4240      	negs	r0, r0
 8000e24:	f1b8 0f00 	cmp.w	r8, #0
 8000e28:	d099      	beq.n	8000d5e <_strtol_l.constprop.0+0x1a>
 8000e2a:	2a00      	cmp	r2, #0
 8000e2c:	d1f6      	bne.n	8000e1c <_strtol_l.constprop.0+0xd8>
 8000e2e:	f8c8 1000 	str.w	r1, [r8]
 8000e32:	e794      	b.n	8000d5e <_strtol_l.constprop.0+0x1a>
 8000e34:	0800269d 	.word	0x0800269d

08000e38 <_strtol_r>:
 8000e38:	f7ff bf84 	b.w	8000d44 <_strtol_l.constprop.0>

08000e3c <strtol>:
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	460a      	mov	r2, r1
 8000e40:	4601      	mov	r1, r0
 8000e42:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <strtol+0x10>)
 8000e44:	6800      	ldr	r0, [r0, #0]
 8000e46:	f7ff bf7d 	b.w	8000d44 <_strtol_l.constprop.0>
 8000e4a:	bf00      	nop
 8000e4c:	20000038 	.word	0x20000038

08000e50 <std>:
 8000e50:	2300      	movs	r3, #0
 8000e52:	b510      	push	{r4, lr}
 8000e54:	4604      	mov	r4, r0
 8000e56:	e9c0 3300 	strd	r3, r3, [r0]
 8000e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e5e:	6083      	str	r3, [r0, #8]
 8000e60:	8181      	strh	r1, [r0, #12]
 8000e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e64:	81c2      	strh	r2, [r0, #14]
 8000e66:	6183      	str	r3, [r0, #24]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	305c      	adds	r0, #92	@ 0x5c
 8000e6e:	f000 f932 	bl	80010d6 <memset>
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <std+0x58>)
 8000e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <std+0x5c>)
 8000e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <std+0x60>)
 8000e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <std+0x64>)
 8000e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <std+0x68>)
 8000e84:	6224      	str	r4, [r4, #32]
 8000e86:	429c      	cmp	r4, r3
 8000e88:	d006      	beq.n	8000e98 <std+0x48>
 8000e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e8e:	4294      	cmp	r4, r2
 8000e90:	d002      	beq.n	8000e98 <std+0x48>
 8000e92:	33d0      	adds	r3, #208	@ 0xd0
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d105      	bne.n	8000ea4 <std+0x54>
 8000e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ea0:	f000 b992 	b.w	80011c8 <__retarget_lock_init_recursive>
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0800104d 	.word	0x0800104d
 8000eac:	08001073 	.word	0x08001073
 8000eb0:	080010ab 	.word	0x080010ab
 8000eb4:	080010cf 	.word	0x080010cf
 8000eb8:	2000014c 	.word	0x2000014c

08000ebc <stdio_exit_handler>:
 8000ebc:	4a02      	ldr	r2, [pc, #8]	@ (8000ec8 <stdio_exit_handler+0xc>)
 8000ebe:	4903      	ldr	r1, [pc, #12]	@ (8000ecc <stdio_exit_handler+0x10>)
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <stdio_exit_handler+0x14>)
 8000ec2:	f000 b869 	b.w	8000f98 <_fwalk_sglue>
 8000ec6:	bf00      	nop
 8000ec8:	2000002c 	.word	0x2000002c
 8000ecc:	0800209d 	.word	0x0800209d
 8000ed0:	2000003c 	.word	0x2000003c

08000ed4 <cleanup_stdio>:
 8000ed4:	6841      	ldr	r1, [r0, #4]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <cleanup_stdio+0x34>)
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	b510      	push	{r4, lr}
 8000edc:	4604      	mov	r4, r0
 8000ede:	d001      	beq.n	8000ee4 <cleanup_stdio+0x10>
 8000ee0:	f001 f8dc 	bl	800209c <_fflush_r>
 8000ee4:	68a1      	ldr	r1, [r4, #8]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <cleanup_stdio+0x38>)
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	d002      	beq.n	8000ef2 <cleanup_stdio+0x1e>
 8000eec:	4620      	mov	r0, r4
 8000eee:	f001 f8d5 	bl	800209c <_fflush_r>
 8000ef2:	68e1      	ldr	r1, [r4, #12]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <cleanup_stdio+0x3c>)
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	d004      	beq.n	8000f04 <cleanup_stdio+0x30>
 8000efa:	4620      	mov	r0, r4
 8000efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f00:	f001 b8cc 	b.w	800209c <_fflush_r>
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	bf00      	nop
 8000f08:	2000014c 	.word	0x2000014c
 8000f0c:	200001b4 	.word	0x200001b4
 8000f10:	2000021c 	.word	0x2000021c

08000f14 <global_stdio_init.part.0>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <global_stdio_init.part.0+0x30>)
 8000f18:	4c0b      	ldr	r4, [pc, #44]	@ (8000f48 <global_stdio_init.part.0+0x34>)
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <global_stdio_init.part.0+0x38>)
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	4620      	mov	r0, r4
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	f7ff ff94 	bl	8000e50 <std>
 8000f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2109      	movs	r1, #9
 8000f30:	f7ff ff8e 	bl	8000e50 <std>
 8000f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f38:	2202      	movs	r2, #2
 8000f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f3e:	2112      	movs	r1, #18
 8000f40:	f7ff bf86 	b.w	8000e50 <std>
 8000f44:	20000284 	.word	0x20000284
 8000f48:	2000014c 	.word	0x2000014c
 8000f4c:	08000ebd 	.word	0x08000ebd

08000f50 <__sfp_lock_acquire>:
 8000f50:	4801      	ldr	r0, [pc, #4]	@ (8000f58 <__sfp_lock_acquire+0x8>)
 8000f52:	f000 b93a 	b.w	80011ca <__retarget_lock_acquire_recursive>
 8000f56:	bf00      	nop
 8000f58:	2000028d 	.word	0x2000028d

08000f5c <__sfp_lock_release>:
 8000f5c:	4801      	ldr	r0, [pc, #4]	@ (8000f64 <__sfp_lock_release+0x8>)
 8000f5e:	f000 b935 	b.w	80011cc <__retarget_lock_release_recursive>
 8000f62:	bf00      	nop
 8000f64:	2000028d 	.word	0x2000028d

08000f68 <__sinit>:
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	f7ff fff0 	bl	8000f50 <__sfp_lock_acquire>
 8000f70:	6a23      	ldr	r3, [r4, #32]
 8000f72:	b11b      	cbz	r3, 8000f7c <__sinit+0x14>
 8000f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f78:	f7ff bff0 	b.w	8000f5c <__sfp_lock_release>
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <__sinit+0x28>)
 8000f7e:	6223      	str	r3, [r4, #32]
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__sinit+0x2c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f5      	bne.n	8000f74 <__sinit+0xc>
 8000f88:	f7ff ffc4 	bl	8000f14 <global_stdio_init.part.0>
 8000f8c:	e7f2      	b.n	8000f74 <__sinit+0xc>
 8000f8e:	bf00      	nop
 8000f90:	08000ed5 	.word	0x08000ed5
 8000f94:	20000284 	.word	0x20000284

08000f98 <_fwalk_sglue>:
 8000f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f9c:	4607      	mov	r7, r0
 8000f9e:	4688      	mov	r8, r1
 8000fa0:	4614      	mov	r4, r2
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8000fac:	d505      	bpl.n	8000fba <_fwalk_sglue+0x22>
 8000fae:	6824      	ldr	r4, [r4, #0]
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	d1f7      	bne.n	8000fa4 <_fwalk_sglue+0xc>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fba:	89ab      	ldrh	r3, [r5, #12]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d907      	bls.n	8000fd0 <_fwalk_sglue+0x38>
 8000fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	d003      	beq.n	8000fd0 <_fwalk_sglue+0x38>
 8000fc8:	4629      	mov	r1, r5
 8000fca:	4638      	mov	r0, r7
 8000fcc:	47c0      	blx	r8
 8000fce:	4306      	orrs	r6, r0
 8000fd0:	3568      	adds	r5, #104	@ 0x68
 8000fd2:	e7e9      	b.n	8000fa8 <_fwalk_sglue+0x10>

08000fd4 <iprintf>:
 8000fd4:	b40f      	push	{r0, r1, r2, r3}
 8000fd6:	b507      	push	{r0, r1, r2, lr}
 8000fd8:	4906      	ldr	r1, [pc, #24]	@ (8000ff4 <iprintf+0x20>)
 8000fda:	ab04      	add	r3, sp, #16
 8000fdc:	6808      	ldr	r0, [r1, #0]
 8000fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8000fe2:	6881      	ldr	r1, [r0, #8]
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f000 fbe1 	bl	80017ac <_vfiprintf_r>
 8000fea:	b003      	add	sp, #12
 8000fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr
 8000ff4:	20000038 	.word	0x20000038

08000ff8 <siscanf>:
 8000ff8:	b40e      	push	{r1, r2, r3}
 8000ffa:	b530      	push	{r4, r5, lr}
 8000ffc:	b09c      	sub	sp, #112	@ 0x70
 8000ffe:	ac1f      	add	r4, sp, #124	@ 0x7c
 8001000:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8001004:	f854 5b04 	ldr.w	r5, [r4], #4
 8001008:	f8ad 2014 	strh.w	r2, [sp, #20]
 800100c:	9002      	str	r0, [sp, #8]
 800100e:	9006      	str	r0, [sp, #24]
 8001010:	f7ff f8f0 	bl	80001f4 <strlen>
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <siscanf+0x4c>)
 8001016:	9003      	str	r0, [sp, #12]
 8001018:	9007      	str	r0, [sp, #28]
 800101a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800101c:	480a      	ldr	r0, [pc, #40]	@ (8001048 <siscanf+0x50>)
 800101e:	9401      	str	r4, [sp, #4]
 8001020:	2300      	movs	r3, #0
 8001022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001024:	9314      	str	r3, [sp, #80]	@ 0x50
 8001026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800102a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800102e:	462a      	mov	r2, r5
 8001030:	4623      	mov	r3, r4
 8001032:	a902      	add	r1, sp, #8
 8001034:	6800      	ldr	r0, [r0, #0]
 8001036:	f000 fa1b 	bl	8001470 <__ssvfiscanf_r>
 800103a:	b01c      	add	sp, #112	@ 0x70
 800103c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001040:	b003      	add	sp, #12
 8001042:	4770      	bx	lr
 8001044:	0800106f 	.word	0x0800106f
 8001048:	20000038 	.word	0x20000038

0800104c <__sread>:
 800104c:	b510      	push	{r4, lr}
 800104e:	460c      	mov	r4, r1
 8001050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001054:	f000 f86a 	bl	800112c <_read_r>
 8001058:	2800      	cmp	r0, #0
 800105a:	bfab      	itete	ge
 800105c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800105e:	89a3      	ldrhlt	r3, [r4, #12]
 8001060:	181b      	addge	r3, r3, r0
 8001062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001066:	bfac      	ite	ge
 8001068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800106a:	81a3      	strhlt	r3, [r4, #12]
 800106c:	bd10      	pop	{r4, pc}

0800106e <__seofread>:
 800106e:	2000      	movs	r0, #0
 8001070:	4770      	bx	lr

08001072 <__swrite>:
 8001072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001076:	461f      	mov	r7, r3
 8001078:	898b      	ldrh	r3, [r1, #12]
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	4605      	mov	r5, r0
 800107e:	460c      	mov	r4, r1
 8001080:	4616      	mov	r6, r2
 8001082:	d505      	bpl.n	8001090 <__swrite+0x1e>
 8001084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001088:	2302      	movs	r3, #2
 800108a:	2200      	movs	r2, #0
 800108c:	f000 f83c 	bl	8001108 <_lseek_r>
 8001090:	89a3      	ldrh	r3, [r4, #12]
 8001092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800109a:	81a3      	strh	r3, [r4, #12]
 800109c:	4632      	mov	r2, r6
 800109e:	463b      	mov	r3, r7
 80010a0:	4628      	mov	r0, r5
 80010a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010a6:	f000 b853 	b.w	8001150 <_write_r>

080010aa <__sseek>:
 80010aa:	b510      	push	{r4, lr}
 80010ac:	460c      	mov	r4, r1
 80010ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b2:	f000 f829 	bl	8001108 <_lseek_r>
 80010b6:	1c43      	adds	r3, r0, #1
 80010b8:	89a3      	ldrh	r3, [r4, #12]
 80010ba:	bf15      	itete	ne
 80010bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010c6:	81a3      	strheq	r3, [r4, #12]
 80010c8:	bf18      	it	ne
 80010ca:	81a3      	strhne	r3, [r4, #12]
 80010cc:	bd10      	pop	{r4, pc}

080010ce <__sclose>:
 80010ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d2:	f000 b809 	b.w	80010e8 <_close_r>

080010d6 <memset>:
 80010d6:	4402      	add	r2, r0
 80010d8:	4603      	mov	r3, r0
 80010da:	4293      	cmp	r3, r2
 80010dc:	d100      	bne.n	80010e0 <memset+0xa>
 80010de:	4770      	bx	lr
 80010e0:	f803 1b01 	strb.w	r1, [r3], #1
 80010e4:	e7f9      	b.n	80010da <memset+0x4>
	...

080010e8 <_close_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4d06      	ldr	r5, [pc, #24]	@ (8001104 <_close_r+0x1c>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	602b      	str	r3, [r5, #0]
 80010f4:	f7ff fab5 	bl	8000662 <_close>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_close_r+0x1a>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_close_r+0x1a>
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	20000288 	.word	0x20000288

08001108 <_lseek_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	4d07      	ldr	r5, [pc, #28]	@ (8001128 <_lseek_r+0x20>)
 800110c:	4604      	mov	r4, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4611      	mov	r1, r2
 8001112:	2200      	movs	r2, #0
 8001114:	602a      	str	r2, [r5, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	f7ff faca 	bl	80006b0 <_lseek>
 800111c:	1c43      	adds	r3, r0, #1
 800111e:	d102      	bne.n	8001126 <_lseek_r+0x1e>
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	b103      	cbz	r3, 8001126 <_lseek_r+0x1e>
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
 8001128:	20000288 	.word	0x20000288

0800112c <_read_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4d07      	ldr	r5, [pc, #28]	@ (800114c <_read_r+0x20>)
 8001130:	4604      	mov	r4, r0
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	2200      	movs	r2, #0
 8001138:	602a      	str	r2, [r5, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	f7ff fa58 	bl	80005f0 <_read>
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	d102      	bne.n	800114a <_read_r+0x1e>
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	b103      	cbz	r3, 800114a <_read_r+0x1e>
 8001148:	6023      	str	r3, [r4, #0]
 800114a:	bd38      	pop	{r3, r4, r5, pc}
 800114c:	20000288 	.word	0x20000288

08001150 <_write_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4d07      	ldr	r5, [pc, #28]	@ (8001170 <_write_r+0x20>)
 8001154:	4604      	mov	r4, r0
 8001156:	4608      	mov	r0, r1
 8001158:	4611      	mov	r1, r2
 800115a:	2200      	movs	r2, #0
 800115c:	602a      	str	r2, [r5, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	f7ff fa63 	bl	800062a <_write>
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	d102      	bne.n	800116e <_write_r+0x1e>
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	b103      	cbz	r3, 800116e <_write_r+0x1e>
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	20000288 	.word	0x20000288

08001174 <__errno>:
 8001174:	4b01      	ldr	r3, [pc, #4]	@ (800117c <__errno+0x8>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000038 	.word	0x20000038

08001180 <__libc_init_array>:
 8001180:	b570      	push	{r4, r5, r6, lr}
 8001182:	4d0d      	ldr	r5, [pc, #52]	@ (80011b8 <__libc_init_array+0x38>)
 8001184:	4c0d      	ldr	r4, [pc, #52]	@ (80011bc <__libc_init_array+0x3c>)
 8001186:	1b64      	subs	r4, r4, r5
 8001188:	10a4      	asrs	r4, r4, #2
 800118a:	2600      	movs	r6, #0
 800118c:	42a6      	cmp	r6, r4
 800118e:	d109      	bne.n	80011a4 <__libc_init_array+0x24>
 8001190:	4d0b      	ldr	r5, [pc, #44]	@ (80011c0 <__libc_init_array+0x40>)
 8001192:	4c0c      	ldr	r4, [pc, #48]	@ (80011c4 <__libc_init_array+0x44>)
 8001194:	f001 f9fa 	bl	800258c <_init>
 8001198:	1b64      	subs	r4, r4, r5
 800119a:	10a4      	asrs	r4, r4, #2
 800119c:	2600      	movs	r6, #0
 800119e:	42a6      	cmp	r6, r4
 80011a0:	d105      	bne.n	80011ae <__libc_init_array+0x2e>
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
 80011a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011a8:	4798      	blx	r3
 80011aa:	3601      	adds	r6, #1
 80011ac:	e7ee      	b.n	800118c <__libc_init_array+0xc>
 80011ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b2:	4798      	blx	r3
 80011b4:	3601      	adds	r6, #1
 80011b6:	e7f2      	b.n	800119e <__libc_init_array+0x1e>
 80011b8:	080027f4 	.word	0x080027f4
 80011bc:	080027f4 	.word	0x080027f4
 80011c0:	080027f4 	.word	0x080027f4
 80011c4:	080027f8 	.word	0x080027f8

080011c8 <__retarget_lock_init_recursive>:
 80011c8:	4770      	bx	lr

080011ca <__retarget_lock_acquire_recursive>:
 80011ca:	4770      	bx	lr

080011cc <__retarget_lock_release_recursive>:
 80011cc:	4770      	bx	lr
	...

080011d0 <_free_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4605      	mov	r5, r0
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d041      	beq.n	800125c <_free_r+0x8c>
 80011d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011dc:	1f0c      	subs	r4, r1, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfb8      	it	lt
 80011e2:	18e4      	addlt	r4, r4, r3
 80011e4:	f000 f8e0 	bl	80013a8 <__malloc_lock>
 80011e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <_free_r+0x90>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	b933      	cbnz	r3, 80011fc <_free_r+0x2c>
 80011ee:	6063      	str	r3, [r4, #4]
 80011f0:	6014      	str	r4, [r2, #0]
 80011f2:	4628      	mov	r0, r5
 80011f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011f8:	f000 b8dc 	b.w	80013b4 <__malloc_unlock>
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	d908      	bls.n	8001212 <_free_r+0x42>
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	1821      	adds	r1, r4, r0
 8001204:	428b      	cmp	r3, r1
 8001206:	bf01      	itttt	eq
 8001208:	6819      	ldreq	r1, [r3, #0]
 800120a:	685b      	ldreq	r3, [r3, #4]
 800120c:	1809      	addeq	r1, r1, r0
 800120e:	6021      	streq	r1, [r4, #0]
 8001210:	e7ed      	b.n	80011ee <_free_r+0x1e>
 8001212:	461a      	mov	r2, r3
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	b10b      	cbz	r3, 800121c <_free_r+0x4c>
 8001218:	42a3      	cmp	r3, r4
 800121a:	d9fa      	bls.n	8001212 <_free_r+0x42>
 800121c:	6811      	ldr	r1, [r2, #0]
 800121e:	1850      	adds	r0, r2, r1
 8001220:	42a0      	cmp	r0, r4
 8001222:	d10b      	bne.n	800123c <_free_r+0x6c>
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	4401      	add	r1, r0
 8001228:	1850      	adds	r0, r2, r1
 800122a:	4283      	cmp	r3, r0
 800122c:	6011      	str	r1, [r2, #0]
 800122e:	d1e0      	bne.n	80011f2 <_free_r+0x22>
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	6053      	str	r3, [r2, #4]
 8001236:	4408      	add	r0, r1
 8001238:	6010      	str	r0, [r2, #0]
 800123a:	e7da      	b.n	80011f2 <_free_r+0x22>
 800123c:	d902      	bls.n	8001244 <_free_r+0x74>
 800123e:	230c      	movs	r3, #12
 8001240:	602b      	str	r3, [r5, #0]
 8001242:	e7d6      	b.n	80011f2 <_free_r+0x22>
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	1821      	adds	r1, r4, r0
 8001248:	428b      	cmp	r3, r1
 800124a:	bf04      	itt	eq
 800124c:	6819      	ldreq	r1, [r3, #0]
 800124e:	685b      	ldreq	r3, [r3, #4]
 8001250:	6063      	str	r3, [r4, #4]
 8001252:	bf04      	itt	eq
 8001254:	1809      	addeq	r1, r1, r0
 8001256:	6021      	streq	r1, [r4, #0]
 8001258:	6054      	str	r4, [r2, #4]
 800125a:	e7ca      	b.n	80011f2 <_free_r+0x22>
 800125c:	bd38      	pop	{r3, r4, r5, pc}
 800125e:	bf00      	nop
 8001260:	20000294 	.word	0x20000294

08001264 <sbrk_aligned>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	4e0f      	ldr	r6, [pc, #60]	@ (80012a4 <sbrk_aligned+0x40>)
 8001268:	460c      	mov	r4, r1
 800126a:	6831      	ldr	r1, [r6, #0]
 800126c:	4605      	mov	r5, r0
 800126e:	b911      	cbnz	r1, 8001276 <sbrk_aligned+0x12>
 8001270:	f001 f844 	bl	80022fc <_sbrk_r>
 8001274:	6030      	str	r0, [r6, #0]
 8001276:	4621      	mov	r1, r4
 8001278:	4628      	mov	r0, r5
 800127a:	f001 f83f 	bl	80022fc <_sbrk_r>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	d103      	bne.n	800128a <sbrk_aligned+0x26>
 8001282:	f04f 34ff 	mov.w	r4, #4294967295
 8001286:	4620      	mov	r0, r4
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	1cc4      	adds	r4, r0, #3
 800128c:	f024 0403 	bic.w	r4, r4, #3
 8001290:	42a0      	cmp	r0, r4
 8001292:	d0f8      	beq.n	8001286 <sbrk_aligned+0x22>
 8001294:	1a21      	subs	r1, r4, r0
 8001296:	4628      	mov	r0, r5
 8001298:	f001 f830 	bl	80022fc <_sbrk_r>
 800129c:	3001      	adds	r0, #1
 800129e:	d1f2      	bne.n	8001286 <sbrk_aligned+0x22>
 80012a0:	e7ef      	b.n	8001282 <sbrk_aligned+0x1e>
 80012a2:	bf00      	nop
 80012a4:	20000290 	.word	0x20000290

080012a8 <_malloc_r>:
 80012a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	1ccd      	adds	r5, r1, #3
 80012ae:	f025 0503 	bic.w	r5, r5, #3
 80012b2:	3508      	adds	r5, #8
 80012b4:	2d0c      	cmp	r5, #12
 80012b6:	bf38      	it	cc
 80012b8:	250c      	movcc	r5, #12
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	4606      	mov	r6, r0
 80012be:	db01      	blt.n	80012c4 <_malloc_r+0x1c>
 80012c0:	42a9      	cmp	r1, r5
 80012c2:	d904      	bls.n	80012ce <_malloc_r+0x26>
 80012c4:	230c      	movs	r3, #12
 80012c6:	6033      	str	r3, [r6, #0]
 80012c8:	2000      	movs	r0, #0
 80012ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013a4 <_malloc_r+0xfc>
 80012d2:	f000 f869 	bl	80013a8 <__malloc_lock>
 80012d6:	f8d8 3000 	ldr.w	r3, [r8]
 80012da:	461c      	mov	r4, r3
 80012dc:	bb44      	cbnz	r4, 8001330 <_malloc_r+0x88>
 80012de:	4629      	mov	r1, r5
 80012e0:	4630      	mov	r0, r6
 80012e2:	f7ff ffbf 	bl	8001264 <sbrk_aligned>
 80012e6:	1c43      	adds	r3, r0, #1
 80012e8:	4604      	mov	r4, r0
 80012ea:	d158      	bne.n	800139e <_malloc_r+0xf6>
 80012ec:	f8d8 4000 	ldr.w	r4, [r8]
 80012f0:	4627      	mov	r7, r4
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d143      	bne.n	800137e <_malloc_r+0xd6>
 80012f6:	2c00      	cmp	r4, #0
 80012f8:	d04b      	beq.n	8001392 <_malloc_r+0xea>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	4639      	mov	r1, r7
 80012fe:	4630      	mov	r0, r6
 8001300:	eb04 0903 	add.w	r9, r4, r3
 8001304:	f000 fffa 	bl	80022fc <_sbrk_r>
 8001308:	4581      	cmp	r9, r0
 800130a:	d142      	bne.n	8001392 <_malloc_r+0xea>
 800130c:	6821      	ldr	r1, [r4, #0]
 800130e:	1a6d      	subs	r5, r5, r1
 8001310:	4629      	mov	r1, r5
 8001312:	4630      	mov	r0, r6
 8001314:	f7ff ffa6 	bl	8001264 <sbrk_aligned>
 8001318:	3001      	adds	r0, #1
 800131a:	d03a      	beq.n	8001392 <_malloc_r+0xea>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	442b      	add	r3, r5
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	f8d8 3000 	ldr.w	r3, [r8]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	bb62      	cbnz	r2, 8001384 <_malloc_r+0xdc>
 800132a:	f8c8 7000 	str.w	r7, [r8]
 800132e:	e00f      	b.n	8001350 <_malloc_r+0xa8>
 8001330:	6822      	ldr	r2, [r4, #0]
 8001332:	1b52      	subs	r2, r2, r5
 8001334:	d420      	bmi.n	8001378 <_malloc_r+0xd0>
 8001336:	2a0b      	cmp	r2, #11
 8001338:	d917      	bls.n	800136a <_malloc_r+0xc2>
 800133a:	1961      	adds	r1, r4, r5
 800133c:	42a3      	cmp	r3, r4
 800133e:	6025      	str	r5, [r4, #0]
 8001340:	bf18      	it	ne
 8001342:	6059      	strne	r1, [r3, #4]
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	bf08      	it	eq
 8001348:	f8c8 1000 	streq.w	r1, [r8]
 800134c:	5162      	str	r2, [r4, r5]
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	4630      	mov	r0, r6
 8001352:	f000 f82f 	bl	80013b4 <__malloc_unlock>
 8001356:	f104 000b 	add.w	r0, r4, #11
 800135a:	1d23      	adds	r3, r4, #4
 800135c:	f020 0007 	bic.w	r0, r0, #7
 8001360:	1ac2      	subs	r2, r0, r3
 8001362:	bf1c      	itt	ne
 8001364:	1a1b      	subne	r3, r3, r0
 8001366:	50a3      	strne	r3, [r4, r2]
 8001368:	e7af      	b.n	80012ca <_malloc_r+0x22>
 800136a:	6862      	ldr	r2, [r4, #4]
 800136c:	42a3      	cmp	r3, r4
 800136e:	bf0c      	ite	eq
 8001370:	f8c8 2000 	streq.w	r2, [r8]
 8001374:	605a      	strne	r2, [r3, #4]
 8001376:	e7eb      	b.n	8001350 <_malloc_r+0xa8>
 8001378:	4623      	mov	r3, r4
 800137a:	6864      	ldr	r4, [r4, #4]
 800137c:	e7ae      	b.n	80012dc <_malloc_r+0x34>
 800137e:	463c      	mov	r4, r7
 8001380:	687f      	ldr	r7, [r7, #4]
 8001382:	e7b6      	b.n	80012f2 <_malloc_r+0x4a>
 8001384:	461a      	mov	r2, r3
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	42a3      	cmp	r3, r4
 800138a:	d1fb      	bne.n	8001384 <_malloc_r+0xdc>
 800138c:	2300      	movs	r3, #0
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	e7de      	b.n	8001350 <_malloc_r+0xa8>
 8001392:	230c      	movs	r3, #12
 8001394:	6033      	str	r3, [r6, #0]
 8001396:	4630      	mov	r0, r6
 8001398:	f000 f80c 	bl	80013b4 <__malloc_unlock>
 800139c:	e794      	b.n	80012c8 <_malloc_r+0x20>
 800139e:	6005      	str	r5, [r0, #0]
 80013a0:	e7d6      	b.n	8001350 <_malloc_r+0xa8>
 80013a2:	bf00      	nop
 80013a4:	20000294 	.word	0x20000294

080013a8 <__malloc_lock>:
 80013a8:	4801      	ldr	r0, [pc, #4]	@ (80013b0 <__malloc_lock+0x8>)
 80013aa:	f7ff bf0e 	b.w	80011ca <__retarget_lock_acquire_recursive>
 80013ae:	bf00      	nop
 80013b0:	2000028c 	.word	0x2000028c

080013b4 <__malloc_unlock>:
 80013b4:	4801      	ldr	r0, [pc, #4]	@ (80013bc <__malloc_unlock+0x8>)
 80013b6:	f7ff bf09 	b.w	80011cc <__retarget_lock_release_recursive>
 80013ba:	bf00      	nop
 80013bc:	2000028c 	.word	0x2000028c

080013c0 <_sungetc_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	1c4b      	adds	r3, r1, #1
 80013c4:	4614      	mov	r4, r2
 80013c6:	d103      	bne.n	80013d0 <_sungetc_r+0x10>
 80013c8:	f04f 35ff 	mov.w	r5, #4294967295
 80013cc:	4628      	mov	r0, r5
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	8993      	ldrh	r3, [r2, #12]
 80013d2:	f023 0320 	bic.w	r3, r3, #32
 80013d6:	8193      	strh	r3, [r2, #12]
 80013d8:	6853      	ldr	r3, [r2, #4]
 80013da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013dc:	b2cd      	uxtb	r5, r1
 80013de:	b18a      	cbz	r2, 8001404 <_sungetc_r+0x44>
 80013e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dd08      	ble.n	80013f8 <_sungetc_r+0x38>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	6022      	str	r2, [r4, #0]
 80013ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	6063      	str	r3, [r4, #4]
 80013f6:	e7e9      	b.n	80013cc <_sungetc_r+0xc>
 80013f8:	4621      	mov	r1, r4
 80013fa:	f000 feb0 	bl	800215e <__submore>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d0f1      	beq.n	80013e6 <_sungetc_r+0x26>
 8001402:	e7e1      	b.n	80013c8 <_sungetc_r+0x8>
 8001404:	6921      	ldr	r1, [r4, #16]
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	b141      	cbz	r1, 800141c <_sungetc_r+0x5c>
 800140a:	4291      	cmp	r1, r2
 800140c:	d206      	bcs.n	800141c <_sungetc_r+0x5c>
 800140e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001412:	42a9      	cmp	r1, r5
 8001414:	d102      	bne.n	800141c <_sungetc_r+0x5c>
 8001416:	3a01      	subs	r2, #1
 8001418:	6022      	str	r2, [r4, #0]
 800141a:	e7ea      	b.n	80013f2 <_sungetc_r+0x32>
 800141c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8001420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001424:	6363      	str	r3, [r4, #52]	@ 0x34
 8001426:	2303      	movs	r3, #3
 8001428:	63a3      	str	r3, [r4, #56]	@ 0x38
 800142a:	4623      	mov	r3, r4
 800142c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	e7de      	b.n	80013f4 <_sungetc_r+0x34>

08001436 <__ssrefill_r>:
 8001436:	b510      	push	{r4, lr}
 8001438:	460c      	mov	r4, r1
 800143a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800143c:	b169      	cbz	r1, 800145a <__ssrefill_r+0x24>
 800143e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001442:	4299      	cmp	r1, r3
 8001444:	d001      	beq.n	800144a <__ssrefill_r+0x14>
 8001446:	f7ff fec3 	bl	80011d0 <_free_r>
 800144a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800144c:	6063      	str	r3, [r4, #4]
 800144e:	2000      	movs	r0, #0
 8001450:	6360      	str	r0, [r4, #52]	@ 0x34
 8001452:	b113      	cbz	r3, 800145a <__ssrefill_r+0x24>
 8001454:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001456:	6023      	str	r3, [r4, #0]
 8001458:	bd10      	pop	{r4, pc}
 800145a:	6923      	ldr	r3, [r4, #16]
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	6063      	str	r3, [r4, #4]
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	81a3      	strh	r3, [r4, #12]
 800146a:	f04f 30ff 	mov.w	r0, #4294967295
 800146e:	e7f3      	b.n	8001458 <__ssrefill_r+0x22>

08001470 <__ssvfiscanf_r>:
 8001470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001474:	460c      	mov	r4, r1
 8001476:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800147a:	2100      	movs	r1, #0
 800147c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8001480:	49a5      	ldr	r1, [pc, #660]	@ (8001718 <__ssvfiscanf_r+0x2a8>)
 8001482:	91a0      	str	r1, [sp, #640]	@ 0x280
 8001484:	f10d 0804 	add.w	r8, sp, #4
 8001488:	49a4      	ldr	r1, [pc, #656]	@ (800171c <__ssvfiscanf_r+0x2ac>)
 800148a:	4fa5      	ldr	r7, [pc, #660]	@ (8001720 <__ssvfiscanf_r+0x2b0>)
 800148c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8001490:	4606      	mov	r6, r0
 8001492:	91a1      	str	r1, [sp, #644]	@ 0x284
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	7813      	ldrb	r3, [r2, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8158 	beq.w	800174e <__ssvfiscanf_r+0x2de>
 800149e:	5cf9      	ldrb	r1, [r7, r3]
 80014a0:	f011 0108 	ands.w	r1, r1, #8
 80014a4:	f102 0501 	add.w	r5, r2, #1
 80014a8:	d019      	beq.n	80014de <__ssvfiscanf_r+0x6e>
 80014aa:	6863      	ldr	r3, [r4, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd0f      	ble.n	80014d0 <__ssvfiscanf_r+0x60>
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	5cba      	ldrb	r2, [r7, r2]
 80014b6:	0712      	lsls	r2, r2, #28
 80014b8:	d401      	bmi.n	80014be <__ssvfiscanf_r+0x4e>
 80014ba:	462a      	mov	r2, r5
 80014bc:	e7eb      	b.n	8001496 <__ssvfiscanf_r+0x26>
 80014be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80014c0:	3201      	adds	r2, #1
 80014c2:	9245      	str	r2, [sp, #276]	@ 0x114
 80014c4:	6862      	ldr	r2, [r4, #4]
 80014c6:	3301      	adds	r3, #1
 80014c8:	3a01      	subs	r2, #1
 80014ca:	6062      	str	r2, [r4, #4]
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	e7ec      	b.n	80014aa <__ssvfiscanf_r+0x3a>
 80014d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80014d2:	4621      	mov	r1, r4
 80014d4:	4630      	mov	r0, r6
 80014d6:	4798      	blx	r3
 80014d8:	2800      	cmp	r0, #0
 80014da:	d0e9      	beq.n	80014b0 <__ssvfiscanf_r+0x40>
 80014dc:	e7ed      	b.n	80014ba <__ssvfiscanf_r+0x4a>
 80014de:	2b25      	cmp	r3, #37	@ 0x25
 80014e0:	d012      	beq.n	8001508 <__ssvfiscanf_r+0x98>
 80014e2:	4699      	mov	r9, r3
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f340 8093 	ble.w	8001612 <__ssvfiscanf_r+0x1a2>
 80014ec:	6822      	ldr	r2, [r4, #0]
 80014ee:	7813      	ldrb	r3, [r2, #0]
 80014f0:	454b      	cmp	r3, r9
 80014f2:	f040 812c 	bne.w	800174e <__ssvfiscanf_r+0x2de>
 80014f6:	6863      	ldr	r3, [r4, #4]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	6063      	str	r3, [r4, #4]
 80014fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80014fe:	3201      	adds	r2, #1
 8001500:	3301      	adds	r3, #1
 8001502:	6022      	str	r2, [r4, #0]
 8001504:	9345      	str	r3, [sp, #276]	@ 0x114
 8001506:	e7d8      	b.n	80014ba <__ssvfiscanf_r+0x4a>
 8001508:	9141      	str	r1, [sp, #260]	@ 0x104
 800150a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800150c:	7853      	ldrb	r3, [r2, #1]
 800150e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001510:	bf02      	ittt	eq
 8001512:	2310      	moveq	r3, #16
 8001514:	1c95      	addeq	r5, r2, #2
 8001516:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001518:	220a      	movs	r2, #10
 800151a:	46a9      	mov	r9, r5
 800151c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001520:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8001524:	2b09      	cmp	r3, #9
 8001526:	d91e      	bls.n	8001566 <__ssvfiscanf_r+0xf6>
 8001528:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8001724 <__ssvfiscanf_r+0x2b4>
 800152c:	2203      	movs	r2, #3
 800152e:	4650      	mov	r0, sl
 8001530:	f7fe fe6e 	bl	8000210 <memchr>
 8001534:	b138      	cbz	r0, 8001546 <__ssvfiscanf_r+0xd6>
 8001536:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001538:	eba0 000a 	sub.w	r0, r0, sl
 800153c:	2301      	movs	r3, #1
 800153e:	4083      	lsls	r3, r0
 8001540:	4313      	orrs	r3, r2
 8001542:	9341      	str	r3, [sp, #260]	@ 0x104
 8001544:	464d      	mov	r5, r9
 8001546:	f815 3b01 	ldrb.w	r3, [r5], #1
 800154a:	2b78      	cmp	r3, #120	@ 0x78
 800154c:	d806      	bhi.n	800155c <__ssvfiscanf_r+0xec>
 800154e:	2b57      	cmp	r3, #87	@ 0x57
 8001550:	d810      	bhi.n	8001574 <__ssvfiscanf_r+0x104>
 8001552:	2b25      	cmp	r3, #37	@ 0x25
 8001554:	d0c5      	beq.n	80014e2 <__ssvfiscanf_r+0x72>
 8001556:	d857      	bhi.n	8001608 <__ssvfiscanf_r+0x198>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d065      	beq.n	8001628 <__ssvfiscanf_r+0x1b8>
 800155c:	2303      	movs	r3, #3
 800155e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001560:	230a      	movs	r3, #10
 8001562:	9342      	str	r3, [sp, #264]	@ 0x108
 8001564:	e078      	b.n	8001658 <__ssvfiscanf_r+0x1e8>
 8001566:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8001568:	fb02 1103 	mla	r1, r2, r3, r1
 800156c:	3930      	subs	r1, #48	@ 0x30
 800156e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001570:	464d      	mov	r5, r9
 8001572:	e7d2      	b.n	800151a <__ssvfiscanf_r+0xaa>
 8001574:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8001578:	2a20      	cmp	r2, #32
 800157a:	d8ef      	bhi.n	800155c <__ssvfiscanf_r+0xec>
 800157c:	a101      	add	r1, pc, #4	@ (adr r1, 8001584 <__ssvfiscanf_r+0x114>)
 800157e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001637 	.word	0x08001637
 8001588:	0800155d 	.word	0x0800155d
 800158c:	0800155d 	.word	0x0800155d
 8001590:	08001691 	.word	0x08001691
 8001594:	0800155d 	.word	0x0800155d
 8001598:	0800155d 	.word	0x0800155d
 800159c:	0800155d 	.word	0x0800155d
 80015a0:	0800155d 	.word	0x0800155d
 80015a4:	0800155d 	.word	0x0800155d
 80015a8:	0800155d 	.word	0x0800155d
 80015ac:	0800155d 	.word	0x0800155d
 80015b0:	080016a7 	.word	0x080016a7
 80015b4:	0800168d 	.word	0x0800168d
 80015b8:	0800160f 	.word	0x0800160f
 80015bc:	0800160f 	.word	0x0800160f
 80015c0:	0800160f 	.word	0x0800160f
 80015c4:	0800155d 	.word	0x0800155d
 80015c8:	08001649 	.word	0x08001649
 80015cc:	0800155d 	.word	0x0800155d
 80015d0:	0800155d 	.word	0x0800155d
 80015d4:	0800155d 	.word	0x0800155d
 80015d8:	0800155d 	.word	0x0800155d
 80015dc:	080016b7 	.word	0x080016b7
 80015e0:	08001651 	.word	0x08001651
 80015e4:	0800162f 	.word	0x0800162f
 80015e8:	0800155d 	.word	0x0800155d
 80015ec:	0800155d 	.word	0x0800155d
 80015f0:	080016b3 	.word	0x080016b3
 80015f4:	0800155d 	.word	0x0800155d
 80015f8:	0800168d 	.word	0x0800168d
 80015fc:	0800155d 	.word	0x0800155d
 8001600:	0800155d 	.word	0x0800155d
 8001604:	08001637 	.word	0x08001637
 8001608:	3b45      	subs	r3, #69	@ 0x45
 800160a:	2b02      	cmp	r3, #2
 800160c:	d8a6      	bhi.n	800155c <__ssvfiscanf_r+0xec>
 800160e:	2305      	movs	r3, #5
 8001610:	e021      	b.n	8001656 <__ssvfiscanf_r+0x1e6>
 8001612:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001614:	4621      	mov	r1, r4
 8001616:	4630      	mov	r0, r6
 8001618:	4798      	blx	r3
 800161a:	2800      	cmp	r0, #0
 800161c:	f43f af66 	beq.w	80014ec <__ssvfiscanf_r+0x7c>
 8001620:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001622:	2800      	cmp	r0, #0
 8001624:	f040 808b 	bne.w	800173e <__ssvfiscanf_r+0x2ce>
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	e08b      	b.n	8001746 <__ssvfiscanf_r+0x2d6>
 800162e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	9241      	str	r2, [sp, #260]	@ 0x104
 8001636:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800163c:	9241      	str	r2, [sp, #260]	@ 0x104
 800163e:	2210      	movs	r2, #16
 8001640:	2b6e      	cmp	r3, #110	@ 0x6e
 8001642:	9242      	str	r2, [sp, #264]	@ 0x108
 8001644:	d902      	bls.n	800164c <__ssvfiscanf_r+0x1dc>
 8001646:	e005      	b.n	8001654 <__ssvfiscanf_r+0x1e4>
 8001648:	2300      	movs	r3, #0
 800164a:	9342      	str	r3, [sp, #264]	@ 0x108
 800164c:	2303      	movs	r3, #3
 800164e:	e002      	b.n	8001656 <__ssvfiscanf_r+0x1e6>
 8001650:	2308      	movs	r3, #8
 8001652:	9342      	str	r3, [sp, #264]	@ 0x108
 8001654:	2304      	movs	r3, #4
 8001656:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001658:	6863      	ldr	r3, [r4, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	dd39      	ble.n	80016d2 <__ssvfiscanf_r+0x262>
 800165e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001660:	0659      	lsls	r1, r3, #25
 8001662:	d404      	bmi.n	800166e <__ssvfiscanf_r+0x1fe>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	5cba      	ldrb	r2, [r7, r2]
 800166a:	0712      	lsls	r2, r2, #28
 800166c:	d438      	bmi.n	80016e0 <__ssvfiscanf_r+0x270>
 800166e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001670:	2b02      	cmp	r3, #2
 8001672:	dc47      	bgt.n	8001704 <__ssvfiscanf_r+0x294>
 8001674:	466b      	mov	r3, sp
 8001676:	4622      	mov	r2, r4
 8001678:	a941      	add	r1, sp, #260	@ 0x104
 800167a:	4630      	mov	r0, r6
 800167c:	f000 fb3c 	bl	8001cf8 <_scanf_chars>
 8001680:	2801      	cmp	r0, #1
 8001682:	d064      	beq.n	800174e <__ssvfiscanf_r+0x2de>
 8001684:	2802      	cmp	r0, #2
 8001686:	f47f af18 	bne.w	80014ba <__ssvfiscanf_r+0x4a>
 800168a:	e7c9      	b.n	8001620 <__ssvfiscanf_r+0x1b0>
 800168c:	220a      	movs	r2, #10
 800168e:	e7d7      	b.n	8001640 <__ssvfiscanf_r+0x1d0>
 8001690:	4629      	mov	r1, r5
 8001692:	4640      	mov	r0, r8
 8001694:	f000 fd2a 	bl	80020ec <__sccl>
 8001698:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800169a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800169e:	9341      	str	r3, [sp, #260]	@ 0x104
 80016a0:	4605      	mov	r5, r0
 80016a2:	2301      	movs	r3, #1
 80016a4:	e7d7      	b.n	8001656 <__ssvfiscanf_r+0x1e6>
 80016a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80016a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80016ae:	2300      	movs	r3, #0
 80016b0:	e7d1      	b.n	8001656 <__ssvfiscanf_r+0x1e6>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e7cf      	b.n	8001656 <__ssvfiscanf_r+0x1e6>
 80016b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80016b8:	06c3      	lsls	r3, r0, #27
 80016ba:	f53f aefe 	bmi.w	80014ba <__ssvfiscanf_r+0x4a>
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80016c2:	1d19      	adds	r1, r3, #4
 80016c4:	9100      	str	r1, [sp, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	07c0      	lsls	r0, r0, #31
 80016ca:	bf4c      	ite	mi
 80016cc:	801a      	strhmi	r2, [r3, #0]
 80016ce:	601a      	strpl	r2, [r3, #0]
 80016d0:	e6f3      	b.n	80014ba <__ssvfiscanf_r+0x4a>
 80016d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80016d4:	4621      	mov	r1, r4
 80016d6:	4630      	mov	r0, r6
 80016d8:	4798      	blx	r3
 80016da:	2800      	cmp	r0, #0
 80016dc:	d0bf      	beq.n	800165e <__ssvfiscanf_r+0x1ee>
 80016de:	e79f      	b.n	8001620 <__ssvfiscanf_r+0x1b0>
 80016e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80016e2:	3201      	adds	r2, #1
 80016e4:	9245      	str	r2, [sp, #276]	@ 0x114
 80016e6:	6862      	ldr	r2, [r4, #4]
 80016e8:	3a01      	subs	r2, #1
 80016ea:	2a00      	cmp	r2, #0
 80016ec:	6062      	str	r2, [r4, #4]
 80016ee:	dd02      	ble.n	80016f6 <__ssvfiscanf_r+0x286>
 80016f0:	3301      	adds	r3, #1
 80016f2:	6023      	str	r3, [r4, #0]
 80016f4:	e7b6      	b.n	8001664 <__ssvfiscanf_r+0x1f4>
 80016f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80016f8:	4621      	mov	r1, r4
 80016fa:	4630      	mov	r0, r6
 80016fc:	4798      	blx	r3
 80016fe:	2800      	cmp	r0, #0
 8001700:	d0b0      	beq.n	8001664 <__ssvfiscanf_r+0x1f4>
 8001702:	e78d      	b.n	8001620 <__ssvfiscanf_r+0x1b0>
 8001704:	2b04      	cmp	r3, #4
 8001706:	dc0f      	bgt.n	8001728 <__ssvfiscanf_r+0x2b8>
 8001708:	466b      	mov	r3, sp
 800170a:	4622      	mov	r2, r4
 800170c:	a941      	add	r1, sp, #260	@ 0x104
 800170e:	4630      	mov	r0, r6
 8001710:	f000 fb4c 	bl	8001dac <_scanf_i>
 8001714:	e7b4      	b.n	8001680 <__ssvfiscanf_r+0x210>
 8001716:	bf00      	nop
 8001718:	080013c1 	.word	0x080013c1
 800171c:	08001437 	.word	0x08001437
 8001720:	0800269d 	.word	0x0800269d
 8001724:	0800279d 	.word	0x0800279d
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <__ssvfiscanf_r+0x2e4>)
 800172a:	2b00      	cmp	r3, #0
 800172c:	f43f aec5 	beq.w	80014ba <__ssvfiscanf_r+0x4a>
 8001730:	466b      	mov	r3, sp
 8001732:	4622      	mov	r2, r4
 8001734:	a941      	add	r1, sp, #260	@ 0x104
 8001736:	4630      	mov	r0, r6
 8001738:	f3af 8000 	nop.w
 800173c:	e7a0      	b.n	8001680 <__ssvfiscanf_r+0x210>
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	065b      	lsls	r3, r3, #25
 8001742:	f53f af71 	bmi.w	8001628 <__ssvfiscanf_r+0x1b8>
 8001746:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800174e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001750:	e7f9      	b.n	8001746 <__ssvfiscanf_r+0x2d6>
 8001752:	bf00      	nop
 8001754:	00000000 	.word	0x00000000

08001758 <__sfputc_r>:
 8001758:	6893      	ldr	r3, [r2, #8]
 800175a:	3b01      	subs	r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	b410      	push	{r4}
 8001760:	6093      	str	r3, [r2, #8]
 8001762:	da08      	bge.n	8001776 <__sfputc_r+0x1e>
 8001764:	6994      	ldr	r4, [r2, #24]
 8001766:	42a3      	cmp	r3, r4
 8001768:	db01      	blt.n	800176e <__sfputc_r+0x16>
 800176a:	290a      	cmp	r1, #10
 800176c:	d103      	bne.n	8001776 <__sfputc_r+0x1e>
 800176e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001772:	f000 bd2e 	b.w	80021d2 <__swbuf_r>
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	1c58      	adds	r0, r3, #1
 800177a:	6010      	str	r0, [r2, #0]
 800177c:	7019      	strb	r1, [r3, #0]
 800177e:	4608      	mov	r0, r1
 8001780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001784:	4770      	bx	lr

08001786 <__sfputs_r>:
 8001786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001788:	4606      	mov	r6, r0
 800178a:	460f      	mov	r7, r1
 800178c:	4614      	mov	r4, r2
 800178e:	18d5      	adds	r5, r2, r3
 8001790:	42ac      	cmp	r4, r5
 8001792:	d101      	bne.n	8001798 <__sfputs_r+0x12>
 8001794:	2000      	movs	r0, #0
 8001796:	e007      	b.n	80017a8 <__sfputs_r+0x22>
 8001798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800179c:	463a      	mov	r2, r7
 800179e:	4630      	mov	r0, r6
 80017a0:	f7ff ffda 	bl	8001758 <__sfputc_r>
 80017a4:	1c43      	adds	r3, r0, #1
 80017a6:	d1f3      	bne.n	8001790 <__sfputs_r+0xa>
 80017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017ac <_vfiprintf_r>:
 80017ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b0:	460d      	mov	r5, r1
 80017b2:	b09d      	sub	sp, #116	@ 0x74
 80017b4:	4614      	mov	r4, r2
 80017b6:	4698      	mov	r8, r3
 80017b8:	4606      	mov	r6, r0
 80017ba:	b118      	cbz	r0, 80017c4 <_vfiprintf_r+0x18>
 80017bc:	6a03      	ldr	r3, [r0, #32]
 80017be:	b90b      	cbnz	r3, 80017c4 <_vfiprintf_r+0x18>
 80017c0:	f7ff fbd2 	bl	8000f68 <__sinit>
 80017c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017c6:	07d9      	lsls	r1, r3, #31
 80017c8:	d405      	bmi.n	80017d6 <_vfiprintf_r+0x2a>
 80017ca:	89ab      	ldrh	r3, [r5, #12]
 80017cc:	059a      	lsls	r2, r3, #22
 80017ce:	d402      	bmi.n	80017d6 <_vfiprintf_r+0x2a>
 80017d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017d2:	f7ff fcfa 	bl	80011ca <__retarget_lock_acquire_recursive>
 80017d6:	89ab      	ldrh	r3, [r5, #12]
 80017d8:	071b      	lsls	r3, r3, #28
 80017da:	d501      	bpl.n	80017e0 <_vfiprintf_r+0x34>
 80017dc:	692b      	ldr	r3, [r5, #16]
 80017de:	b99b      	cbnz	r3, 8001808 <_vfiprintf_r+0x5c>
 80017e0:	4629      	mov	r1, r5
 80017e2:	4630      	mov	r0, r6
 80017e4:	f000 fd34 	bl	8002250 <__swsetup_r>
 80017e8:	b170      	cbz	r0, 8001808 <_vfiprintf_r+0x5c>
 80017ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017ec:	07dc      	lsls	r4, r3, #31
 80017ee:	d504      	bpl.n	80017fa <_vfiprintf_r+0x4e>
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	b01d      	add	sp, #116	@ 0x74
 80017f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017fa:	89ab      	ldrh	r3, [r5, #12]
 80017fc:	0598      	lsls	r0, r3, #22
 80017fe:	d4f7      	bmi.n	80017f0 <_vfiprintf_r+0x44>
 8001800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001802:	f7ff fce3 	bl	80011cc <__retarget_lock_release_recursive>
 8001806:	e7f3      	b.n	80017f0 <_vfiprintf_r+0x44>
 8001808:	2300      	movs	r3, #0
 800180a:	9309      	str	r3, [sp, #36]	@ 0x24
 800180c:	2320      	movs	r3, #32
 800180e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001812:	f8cd 800c 	str.w	r8, [sp, #12]
 8001816:	2330      	movs	r3, #48	@ 0x30
 8001818:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80019c8 <_vfiprintf_r+0x21c>
 800181c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001820:	f04f 0901 	mov.w	r9, #1
 8001824:	4623      	mov	r3, r4
 8001826:	469a      	mov	sl, r3
 8001828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800182c:	b10a      	cbz	r2, 8001832 <_vfiprintf_r+0x86>
 800182e:	2a25      	cmp	r2, #37	@ 0x25
 8001830:	d1f9      	bne.n	8001826 <_vfiprintf_r+0x7a>
 8001832:	ebba 0b04 	subs.w	fp, sl, r4
 8001836:	d00b      	beq.n	8001850 <_vfiprintf_r+0xa4>
 8001838:	465b      	mov	r3, fp
 800183a:	4622      	mov	r2, r4
 800183c:	4629      	mov	r1, r5
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff ffa1 	bl	8001786 <__sfputs_r>
 8001844:	3001      	adds	r0, #1
 8001846:	f000 80a7 	beq.w	8001998 <_vfiprintf_r+0x1ec>
 800184a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800184c:	445a      	add	r2, fp
 800184e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001850:	f89a 3000 	ldrb.w	r3, [sl]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 809f 	beq.w	8001998 <_vfiprintf_r+0x1ec>
 800185a:	2300      	movs	r3, #0
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001864:	f10a 0a01 	add.w	sl, sl, #1
 8001868:	9304      	str	r3, [sp, #16]
 800186a:	9307      	str	r3, [sp, #28]
 800186c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001870:	931a      	str	r3, [sp, #104]	@ 0x68
 8001872:	4654      	mov	r4, sl
 8001874:	2205      	movs	r2, #5
 8001876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800187a:	4853      	ldr	r0, [pc, #332]	@ (80019c8 <_vfiprintf_r+0x21c>)
 800187c:	f7fe fcc8 	bl	8000210 <memchr>
 8001880:	9a04      	ldr	r2, [sp, #16]
 8001882:	b9d8      	cbnz	r0, 80018bc <_vfiprintf_r+0x110>
 8001884:	06d1      	lsls	r1, r2, #27
 8001886:	bf44      	itt	mi
 8001888:	2320      	movmi	r3, #32
 800188a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800188e:	0713      	lsls	r3, r2, #28
 8001890:	bf44      	itt	mi
 8001892:	232b      	movmi	r3, #43	@ 0x2b
 8001894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001898:	f89a 3000 	ldrb.w	r3, [sl]
 800189c:	2b2a      	cmp	r3, #42	@ 0x2a
 800189e:	d015      	beq.n	80018cc <_vfiprintf_r+0x120>
 80018a0:	9a07      	ldr	r2, [sp, #28]
 80018a2:	4654      	mov	r4, sl
 80018a4:	2000      	movs	r0, #0
 80018a6:	f04f 0c0a 	mov.w	ip, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018b0:	3b30      	subs	r3, #48	@ 0x30
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	d94b      	bls.n	800194e <_vfiprintf_r+0x1a2>
 80018b6:	b1b0      	cbz	r0, 80018e6 <_vfiprintf_r+0x13a>
 80018b8:	9207      	str	r2, [sp, #28]
 80018ba:	e014      	b.n	80018e6 <_vfiprintf_r+0x13a>
 80018bc:	eba0 0308 	sub.w	r3, r0, r8
 80018c0:	fa09 f303 	lsl.w	r3, r9, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	9304      	str	r3, [sp, #16]
 80018c8:	46a2      	mov	sl, r4
 80018ca:	e7d2      	b.n	8001872 <_vfiprintf_r+0xc6>
 80018cc:	9b03      	ldr	r3, [sp, #12]
 80018ce:	1d19      	adds	r1, r3, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	9103      	str	r1, [sp, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bfbb      	ittet	lt
 80018d8:	425b      	neglt	r3, r3
 80018da:	f042 0202 	orrlt.w	r2, r2, #2
 80018de:	9307      	strge	r3, [sp, #28]
 80018e0:	9307      	strlt	r3, [sp, #28]
 80018e2:	bfb8      	it	lt
 80018e4:	9204      	strlt	r2, [sp, #16]
 80018e6:	7823      	ldrb	r3, [r4, #0]
 80018e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80018ea:	d10a      	bne.n	8001902 <_vfiprintf_r+0x156>
 80018ec:	7863      	ldrb	r3, [r4, #1]
 80018ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80018f0:	d132      	bne.n	8001958 <_vfiprintf_r+0x1ac>
 80018f2:	9b03      	ldr	r3, [sp, #12]
 80018f4:	1d1a      	adds	r2, r3, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	9203      	str	r2, [sp, #12]
 80018fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80018fe:	3402      	adds	r4, #2
 8001900:	9305      	str	r3, [sp, #20]
 8001902:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80019d8 <_vfiprintf_r+0x22c>
 8001906:	7821      	ldrb	r1, [r4, #0]
 8001908:	2203      	movs	r2, #3
 800190a:	4650      	mov	r0, sl
 800190c:	f7fe fc80 	bl	8000210 <memchr>
 8001910:	b138      	cbz	r0, 8001922 <_vfiprintf_r+0x176>
 8001912:	9b04      	ldr	r3, [sp, #16]
 8001914:	eba0 000a 	sub.w	r0, r0, sl
 8001918:	2240      	movs	r2, #64	@ 0x40
 800191a:	4082      	lsls	r2, r0
 800191c:	4313      	orrs	r3, r2
 800191e:	3401      	adds	r4, #1
 8001920:	9304      	str	r3, [sp, #16]
 8001922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001926:	4829      	ldr	r0, [pc, #164]	@ (80019cc <_vfiprintf_r+0x220>)
 8001928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800192c:	2206      	movs	r2, #6
 800192e:	f7fe fc6f 	bl	8000210 <memchr>
 8001932:	2800      	cmp	r0, #0
 8001934:	d03f      	beq.n	80019b6 <_vfiprintf_r+0x20a>
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <_vfiprintf_r+0x224>)
 8001938:	bb1b      	cbnz	r3, 8001982 <_vfiprintf_r+0x1d6>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3307      	adds	r3, #7
 800193e:	f023 0307 	bic.w	r3, r3, #7
 8001942:	3308      	adds	r3, #8
 8001944:	9303      	str	r3, [sp, #12]
 8001946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001948:	443b      	add	r3, r7
 800194a:	9309      	str	r3, [sp, #36]	@ 0x24
 800194c:	e76a      	b.n	8001824 <_vfiprintf_r+0x78>
 800194e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001952:	460c      	mov	r4, r1
 8001954:	2001      	movs	r0, #1
 8001956:	e7a8      	b.n	80018aa <_vfiprintf_r+0xfe>
 8001958:	2300      	movs	r3, #0
 800195a:	3401      	adds	r4, #1
 800195c:	9305      	str	r3, [sp, #20]
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 0c0a 	mov.w	ip, #10
 8001964:	4620      	mov	r0, r4
 8001966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800196a:	3a30      	subs	r2, #48	@ 0x30
 800196c:	2a09      	cmp	r2, #9
 800196e:	d903      	bls.n	8001978 <_vfiprintf_r+0x1cc>
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0c6      	beq.n	8001902 <_vfiprintf_r+0x156>
 8001974:	9105      	str	r1, [sp, #20]
 8001976:	e7c4      	b.n	8001902 <_vfiprintf_r+0x156>
 8001978:	fb0c 2101 	mla	r1, ip, r1, r2
 800197c:	4604      	mov	r4, r0
 800197e:	2301      	movs	r3, #1
 8001980:	e7f0      	b.n	8001964 <_vfiprintf_r+0x1b8>
 8001982:	ab03      	add	r3, sp, #12
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	462a      	mov	r2, r5
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <_vfiprintf_r+0x228>)
 800198a:	a904      	add	r1, sp, #16
 800198c:	4630      	mov	r0, r6
 800198e:	f3af 8000 	nop.w
 8001992:	4607      	mov	r7, r0
 8001994:	1c78      	adds	r0, r7, #1
 8001996:	d1d6      	bne.n	8001946 <_vfiprintf_r+0x19a>
 8001998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800199a:	07d9      	lsls	r1, r3, #31
 800199c:	d405      	bmi.n	80019aa <_vfiprintf_r+0x1fe>
 800199e:	89ab      	ldrh	r3, [r5, #12]
 80019a0:	059a      	lsls	r2, r3, #22
 80019a2:	d402      	bmi.n	80019aa <_vfiprintf_r+0x1fe>
 80019a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019a6:	f7ff fc11 	bl	80011cc <__retarget_lock_release_recursive>
 80019aa:	89ab      	ldrh	r3, [r5, #12]
 80019ac:	065b      	lsls	r3, r3, #25
 80019ae:	f53f af1f 	bmi.w	80017f0 <_vfiprintf_r+0x44>
 80019b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019b4:	e71e      	b.n	80017f4 <_vfiprintf_r+0x48>
 80019b6:	ab03      	add	r3, sp, #12
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	462a      	mov	r2, r5
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <_vfiprintf_r+0x228>)
 80019be:	a904      	add	r1, sp, #16
 80019c0:	4630      	mov	r0, r6
 80019c2:	f000 f879 	bl	8001ab8 <_printf_i>
 80019c6:	e7e4      	b.n	8001992 <_vfiprintf_r+0x1e6>
 80019c8:	080027a1 	.word	0x080027a1
 80019cc:	080027a7 	.word	0x080027a7
 80019d0:	00000000 	.word	0x00000000
 80019d4:	08001787 	.word	0x08001787
 80019d8:	0800279d 	.word	0x0800279d

080019dc <_printf_common>:
 80019dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e0:	4616      	mov	r6, r2
 80019e2:	4698      	mov	r8, r3
 80019e4:	688a      	ldr	r2, [r1, #8]
 80019e6:	690b      	ldr	r3, [r1, #16]
 80019e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	bfb8      	it	lt
 80019f0:	4613      	movlt	r3, r2
 80019f2:	6033      	str	r3, [r6, #0]
 80019f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80019f8:	4607      	mov	r7, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	b10a      	cbz	r2, 8001a02 <_printf_common+0x26>
 80019fe:	3301      	adds	r3, #1
 8001a00:	6033      	str	r3, [r6, #0]
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	0699      	lsls	r1, r3, #26
 8001a06:	bf42      	ittt	mi
 8001a08:	6833      	ldrmi	r3, [r6, #0]
 8001a0a:	3302      	addmi	r3, #2
 8001a0c:	6033      	strmi	r3, [r6, #0]
 8001a0e:	6825      	ldr	r5, [r4, #0]
 8001a10:	f015 0506 	ands.w	r5, r5, #6
 8001a14:	d106      	bne.n	8001a24 <_printf_common+0x48>
 8001a16:	f104 0a19 	add.w	sl, r4, #25
 8001a1a:	68e3      	ldr	r3, [r4, #12]
 8001a1c:	6832      	ldr	r2, [r6, #0]
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	42ab      	cmp	r3, r5
 8001a22:	dc26      	bgt.n	8001a72 <_printf_common+0x96>
 8001a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	3b00      	subs	r3, #0
 8001a2c:	bf18      	it	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	0692      	lsls	r2, r2, #26
 8001a32:	d42b      	bmi.n	8001a8c <_printf_common+0xb0>
 8001a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a38:	4641      	mov	r1, r8
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	47c8      	blx	r9
 8001a3e:	3001      	adds	r0, #1
 8001a40:	d01e      	beq.n	8001a80 <_printf_common+0xa4>
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	6922      	ldr	r2, [r4, #16]
 8001a46:	f003 0306 	and.w	r3, r3, #6
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf02      	ittt	eq
 8001a4e:	68e5      	ldreq	r5, [r4, #12]
 8001a50:	6833      	ldreq	r3, [r6, #0]
 8001a52:	1aed      	subeq	r5, r5, r3
 8001a54:	68a3      	ldr	r3, [r4, #8]
 8001a56:	bf0c      	ite	eq
 8001a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a5c:	2500      	movne	r5, #0
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	bfc4      	itt	gt
 8001a62:	1a9b      	subgt	r3, r3, r2
 8001a64:	18ed      	addgt	r5, r5, r3
 8001a66:	2600      	movs	r6, #0
 8001a68:	341a      	adds	r4, #26
 8001a6a:	42b5      	cmp	r5, r6
 8001a6c:	d11a      	bne.n	8001aa4 <_printf_common+0xc8>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e008      	b.n	8001a84 <_printf_common+0xa8>
 8001a72:	2301      	movs	r3, #1
 8001a74:	4652      	mov	r2, sl
 8001a76:	4641      	mov	r1, r8
 8001a78:	4638      	mov	r0, r7
 8001a7a:	47c8      	blx	r9
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d103      	bne.n	8001a88 <_printf_common+0xac>
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a88:	3501      	adds	r5, #1
 8001a8a:	e7c6      	b.n	8001a1a <_printf_common+0x3e>
 8001a8c:	18e1      	adds	r1, r4, r3
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	2030      	movs	r0, #48	@ 0x30
 8001a92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a96:	4422      	add	r2, r4
 8001a98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	e7c7      	b.n	8001a34 <_printf_common+0x58>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	4638      	mov	r0, r7
 8001aac:	47c8      	blx	r9
 8001aae:	3001      	adds	r0, #1
 8001ab0:	d0e6      	beq.n	8001a80 <_printf_common+0xa4>
 8001ab2:	3601      	adds	r6, #1
 8001ab4:	e7d9      	b.n	8001a6a <_printf_common+0x8e>
	...

08001ab8 <_printf_i>:
 8001ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001abc:	7e0f      	ldrb	r7, [r1, #24]
 8001abe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ac0:	2f78      	cmp	r7, #120	@ 0x78
 8001ac2:	4691      	mov	r9, r2
 8001ac4:	4680      	mov	r8, r0
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	469a      	mov	sl, r3
 8001aca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ace:	d807      	bhi.n	8001ae0 <_printf_i+0x28>
 8001ad0:	2f62      	cmp	r7, #98	@ 0x62
 8001ad2:	d80a      	bhi.n	8001aea <_printf_i+0x32>
 8001ad4:	2f00      	cmp	r7, #0
 8001ad6:	f000 80d2 	beq.w	8001c7e <_printf_i+0x1c6>
 8001ada:	2f58      	cmp	r7, #88	@ 0x58
 8001adc:	f000 80b9 	beq.w	8001c52 <_printf_i+0x19a>
 8001ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ae8:	e03a      	b.n	8001b60 <_printf_i+0xa8>
 8001aea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001aee:	2b15      	cmp	r3, #21
 8001af0:	d8f6      	bhi.n	8001ae0 <_printf_i+0x28>
 8001af2:	a101      	add	r1, pc, #4	@ (adr r1, 8001af8 <_printf_i+0x40>)
 8001af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001af8:	08001b51 	.word	0x08001b51
 8001afc:	08001b65 	.word	0x08001b65
 8001b00:	08001ae1 	.word	0x08001ae1
 8001b04:	08001ae1 	.word	0x08001ae1
 8001b08:	08001ae1 	.word	0x08001ae1
 8001b0c:	08001ae1 	.word	0x08001ae1
 8001b10:	08001b65 	.word	0x08001b65
 8001b14:	08001ae1 	.word	0x08001ae1
 8001b18:	08001ae1 	.word	0x08001ae1
 8001b1c:	08001ae1 	.word	0x08001ae1
 8001b20:	08001ae1 	.word	0x08001ae1
 8001b24:	08001c65 	.word	0x08001c65
 8001b28:	08001b8f 	.word	0x08001b8f
 8001b2c:	08001c1f 	.word	0x08001c1f
 8001b30:	08001ae1 	.word	0x08001ae1
 8001b34:	08001ae1 	.word	0x08001ae1
 8001b38:	08001c87 	.word	0x08001c87
 8001b3c:	08001ae1 	.word	0x08001ae1
 8001b40:	08001b8f 	.word	0x08001b8f
 8001b44:	08001ae1 	.word	0x08001ae1
 8001b48:	08001ae1 	.word	0x08001ae1
 8001b4c:	08001c27 	.word	0x08001c27
 8001b50:	6833      	ldr	r3, [r6, #0]
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6032      	str	r2, [r6, #0]
 8001b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b60:	2301      	movs	r3, #1
 8001b62:	e09d      	b.n	8001ca0 <_printf_i+0x1e8>
 8001b64:	6833      	ldr	r3, [r6, #0]
 8001b66:	6820      	ldr	r0, [r4, #0]
 8001b68:	1d19      	adds	r1, r3, #4
 8001b6a:	6031      	str	r1, [r6, #0]
 8001b6c:	0606      	lsls	r6, r0, #24
 8001b6e:	d501      	bpl.n	8001b74 <_printf_i+0xbc>
 8001b70:	681d      	ldr	r5, [r3, #0]
 8001b72:	e003      	b.n	8001b7c <_printf_i+0xc4>
 8001b74:	0645      	lsls	r5, r0, #25
 8001b76:	d5fb      	bpl.n	8001b70 <_printf_i+0xb8>
 8001b78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b7c:	2d00      	cmp	r5, #0
 8001b7e:	da03      	bge.n	8001b88 <_printf_i+0xd0>
 8001b80:	232d      	movs	r3, #45	@ 0x2d
 8001b82:	426d      	negs	r5, r5
 8001b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b88:	4859      	ldr	r0, [pc, #356]	@ (8001cf0 <_printf_i+0x238>)
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	e011      	b.n	8001bb2 <_printf_i+0xfa>
 8001b8e:	6821      	ldr	r1, [r4, #0]
 8001b90:	6833      	ldr	r3, [r6, #0]
 8001b92:	0608      	lsls	r0, r1, #24
 8001b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b98:	d402      	bmi.n	8001ba0 <_printf_i+0xe8>
 8001b9a:	0649      	lsls	r1, r1, #25
 8001b9c:	bf48      	it	mi
 8001b9e:	b2ad      	uxthmi	r5, r5
 8001ba0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ba2:	4853      	ldr	r0, [pc, #332]	@ (8001cf0 <_printf_i+0x238>)
 8001ba4:	6033      	str	r3, [r6, #0]
 8001ba6:	bf14      	ite	ne
 8001ba8:	230a      	movne	r3, #10
 8001baa:	2308      	moveq	r3, #8
 8001bac:	2100      	movs	r1, #0
 8001bae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001bb2:	6866      	ldr	r6, [r4, #4]
 8001bb4:	60a6      	str	r6, [r4, #8]
 8001bb6:	2e00      	cmp	r6, #0
 8001bb8:	bfa2      	ittt	ge
 8001bba:	6821      	ldrge	r1, [r4, #0]
 8001bbc:	f021 0104 	bicge.w	r1, r1, #4
 8001bc0:	6021      	strge	r1, [r4, #0]
 8001bc2:	b90d      	cbnz	r5, 8001bc8 <_printf_i+0x110>
 8001bc4:	2e00      	cmp	r6, #0
 8001bc6:	d04b      	beq.n	8001c60 <_printf_i+0x1a8>
 8001bc8:	4616      	mov	r6, r2
 8001bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bce:	fb03 5711 	mls	r7, r3, r1, r5
 8001bd2:	5dc7      	ldrb	r7, [r0, r7]
 8001bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001bd8:	462f      	mov	r7, r5
 8001bda:	42bb      	cmp	r3, r7
 8001bdc:	460d      	mov	r5, r1
 8001bde:	d9f4      	bls.n	8001bca <_printf_i+0x112>
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d10b      	bne.n	8001bfc <_printf_i+0x144>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	07df      	lsls	r7, r3, #31
 8001be8:	d508      	bpl.n	8001bfc <_printf_i+0x144>
 8001bea:	6923      	ldr	r3, [r4, #16]
 8001bec:	6861      	ldr	r1, [r4, #4]
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	bfde      	ittt	le
 8001bf2:	2330      	movle	r3, #48	@ 0x30
 8001bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001bf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001bfc:	1b92      	subs	r2, r2, r6
 8001bfe:	6122      	str	r2, [r4, #16]
 8001c00:	f8cd a000 	str.w	sl, [sp]
 8001c04:	464b      	mov	r3, r9
 8001c06:	aa03      	add	r2, sp, #12
 8001c08:	4621      	mov	r1, r4
 8001c0a:	4640      	mov	r0, r8
 8001c0c:	f7ff fee6 	bl	80019dc <_printf_common>
 8001c10:	3001      	adds	r0, #1
 8001c12:	d14a      	bne.n	8001caa <_printf_i+0x1f2>
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	b004      	add	sp, #16
 8001c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	f043 0320 	orr.w	r3, r3, #32
 8001c24:	6023      	str	r3, [r4, #0]
 8001c26:	4833      	ldr	r0, [pc, #204]	@ (8001cf4 <_printf_i+0x23c>)
 8001c28:	2778      	movs	r7, #120	@ 0x78
 8001c2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	6831      	ldr	r1, [r6, #0]
 8001c32:	061f      	lsls	r7, r3, #24
 8001c34:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c38:	d402      	bmi.n	8001c40 <_printf_i+0x188>
 8001c3a:	065f      	lsls	r7, r3, #25
 8001c3c:	bf48      	it	mi
 8001c3e:	b2ad      	uxthmi	r5, r5
 8001c40:	6031      	str	r1, [r6, #0]
 8001c42:	07d9      	lsls	r1, r3, #31
 8001c44:	bf44      	itt	mi
 8001c46:	f043 0320 	orrmi.w	r3, r3, #32
 8001c4a:	6023      	strmi	r3, [r4, #0]
 8001c4c:	b11d      	cbz	r5, 8001c56 <_printf_i+0x19e>
 8001c4e:	2310      	movs	r3, #16
 8001c50:	e7ac      	b.n	8001bac <_printf_i+0xf4>
 8001c52:	4827      	ldr	r0, [pc, #156]	@ (8001cf0 <_printf_i+0x238>)
 8001c54:	e7e9      	b.n	8001c2a <_printf_i+0x172>
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	f023 0320 	bic.w	r3, r3, #32
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	e7f6      	b.n	8001c4e <_printf_i+0x196>
 8001c60:	4616      	mov	r6, r2
 8001c62:	e7bd      	b.n	8001be0 <_printf_i+0x128>
 8001c64:	6833      	ldr	r3, [r6, #0]
 8001c66:	6825      	ldr	r5, [r4, #0]
 8001c68:	6961      	ldr	r1, [r4, #20]
 8001c6a:	1d18      	adds	r0, r3, #4
 8001c6c:	6030      	str	r0, [r6, #0]
 8001c6e:	062e      	lsls	r6, r5, #24
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	d501      	bpl.n	8001c78 <_printf_i+0x1c0>
 8001c74:	6019      	str	r1, [r3, #0]
 8001c76:	e002      	b.n	8001c7e <_printf_i+0x1c6>
 8001c78:	0668      	lsls	r0, r5, #25
 8001c7a:	d5fb      	bpl.n	8001c74 <_printf_i+0x1bc>
 8001c7c:	8019      	strh	r1, [r3, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6123      	str	r3, [r4, #16]
 8001c82:	4616      	mov	r6, r2
 8001c84:	e7bc      	b.n	8001c00 <_printf_i+0x148>
 8001c86:	6833      	ldr	r3, [r6, #0]
 8001c88:	1d1a      	adds	r2, r3, #4
 8001c8a:	6032      	str	r2, [r6, #0]
 8001c8c:	681e      	ldr	r6, [r3, #0]
 8001c8e:	6862      	ldr	r2, [r4, #4]
 8001c90:	2100      	movs	r1, #0
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7fe fabc 	bl	8000210 <memchr>
 8001c98:	b108      	cbz	r0, 8001c9e <_printf_i+0x1e6>
 8001c9a:	1b80      	subs	r0, r0, r6
 8001c9c:	6060      	str	r0, [r4, #4]
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	6123      	str	r3, [r4, #16]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ca8:	e7aa      	b.n	8001c00 <_printf_i+0x148>
 8001caa:	6923      	ldr	r3, [r4, #16]
 8001cac:	4632      	mov	r2, r6
 8001cae:	4649      	mov	r1, r9
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	47d0      	blx	sl
 8001cb4:	3001      	adds	r0, #1
 8001cb6:	d0ad      	beq.n	8001c14 <_printf_i+0x15c>
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	079b      	lsls	r3, r3, #30
 8001cbc:	d413      	bmi.n	8001ce6 <_printf_i+0x22e>
 8001cbe:	68e0      	ldr	r0, [r4, #12]
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	4298      	cmp	r0, r3
 8001cc4:	bfb8      	it	lt
 8001cc6:	4618      	movlt	r0, r3
 8001cc8:	e7a6      	b.n	8001c18 <_printf_i+0x160>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	4632      	mov	r2, r6
 8001cce:	4649      	mov	r1, r9
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	47d0      	blx	sl
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	d09d      	beq.n	8001c14 <_printf_i+0x15c>
 8001cd8:	3501      	adds	r5, #1
 8001cda:	68e3      	ldr	r3, [r4, #12]
 8001cdc:	9903      	ldr	r1, [sp, #12]
 8001cde:	1a5b      	subs	r3, r3, r1
 8001ce0:	42ab      	cmp	r3, r5
 8001ce2:	dcf2      	bgt.n	8001cca <_printf_i+0x212>
 8001ce4:	e7eb      	b.n	8001cbe <_printf_i+0x206>
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	f104 0619 	add.w	r6, r4, #25
 8001cec:	e7f5      	b.n	8001cda <_printf_i+0x222>
 8001cee:	bf00      	nop
 8001cf0:	080027ae 	.word	0x080027ae
 8001cf4:	080027bf 	.word	0x080027bf

08001cf8 <_scanf_chars>:
 8001cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	688a      	ldr	r2, [r1, #8]
 8001d00:	4680      	mov	r8, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	b932      	cbnz	r2, 8001d14 <_scanf_chars+0x1c>
 8001d06:	698a      	ldr	r2, [r1, #24]
 8001d08:	2a00      	cmp	r2, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	f04f 32ff 	movne.w	r2, #4294967295
 8001d10:	2201      	moveq	r2, #1
 8001d12:	608a      	str	r2, [r1, #8]
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001da8 <_scanf_chars+0xb0>
 8001d1a:	06d1      	lsls	r1, r2, #27
 8001d1c:	bf5f      	itttt	pl
 8001d1e:	681a      	ldrpl	r2, [r3, #0]
 8001d20:	1d11      	addpl	r1, r2, #4
 8001d22:	6019      	strpl	r1, [r3, #0]
 8001d24:	6816      	ldrpl	r6, [r2, #0]
 8001d26:	2700      	movs	r7, #0
 8001d28:	69a0      	ldr	r0, [r4, #24]
 8001d2a:	b188      	cbz	r0, 8001d50 <_scanf_chars+0x58>
 8001d2c:	2801      	cmp	r0, #1
 8001d2e:	d107      	bne.n	8001d40 <_scanf_chars+0x48>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	6963      	ldr	r3, [r4, #20]
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b953      	cbnz	r3, 8001d50 <_scanf_chars+0x58>
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d031      	beq.n	8001da2 <_scanf_chars+0xaa>
 8001d3e:	e022      	b.n	8001d86 <_scanf_chars+0x8e>
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d120      	bne.n	8001d86 <_scanf_chars+0x8e>
 8001d44:	682b      	ldr	r3, [r5, #0]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001d4c:	071b      	lsls	r3, r3, #28
 8001d4e:	d41a      	bmi.n	8001d86 <_scanf_chars+0x8e>
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	06da      	lsls	r2, r3, #27
 8001d54:	bf5e      	ittt	pl
 8001d56:	682b      	ldrpl	r3, [r5, #0]
 8001d58:	781b      	ldrbpl	r3, [r3, #0]
 8001d5a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001d5e:	682a      	ldr	r2, [r5, #0]
 8001d60:	686b      	ldr	r3, [r5, #4]
 8001d62:	3201      	adds	r2, #1
 8001d64:	602a      	str	r2, [r5, #0]
 8001d66:	68a2      	ldr	r2, [r4, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	3a01      	subs	r2, #1
 8001d6c:	606b      	str	r3, [r5, #4]
 8001d6e:	3701      	adds	r7, #1
 8001d70:	60a2      	str	r2, [r4, #8]
 8001d72:	b142      	cbz	r2, 8001d86 <_scanf_chars+0x8e>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dcd7      	bgt.n	8001d28 <_scanf_chars+0x30>
 8001d78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4640      	mov	r0, r8
 8001d80:	4798      	blx	r3
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d0d0      	beq.n	8001d28 <_scanf_chars+0x30>
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	f013 0310 	ands.w	r3, r3, #16
 8001d8c:	d105      	bne.n	8001d9a <_scanf_chars+0xa2>
 8001d8e:	68e2      	ldr	r2, [r4, #12]
 8001d90:	3201      	adds	r2, #1
 8001d92:	60e2      	str	r2, [r4, #12]
 8001d94:	69a2      	ldr	r2, [r4, #24]
 8001d96:	b102      	cbz	r2, 8001d9a <_scanf_chars+0xa2>
 8001d98:	7033      	strb	r3, [r6, #0]
 8001d9a:	6923      	ldr	r3, [r4, #16]
 8001d9c:	443b      	add	r3, r7
 8001d9e:	6123      	str	r3, [r4, #16]
 8001da0:	2000      	movs	r0, #0
 8001da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001da6:	bf00      	nop
 8001da8:	0800269d 	.word	0x0800269d

08001dac <_scanf_i>:
 8001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db0:	4698      	mov	r8, r3
 8001db2:	4b74      	ldr	r3, [pc, #464]	@ (8001f84 <_scanf_i+0x1d8>)
 8001db4:	460c      	mov	r4, r1
 8001db6:	4682      	mov	sl, r0
 8001db8:	4616      	mov	r6, r2
 8001dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	ab03      	add	r3, sp, #12
 8001dc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dc6:	4b70      	ldr	r3, [pc, #448]	@ (8001f88 <_scanf_i+0x1dc>)
 8001dc8:	69a1      	ldr	r1, [r4, #24]
 8001dca:	4a70      	ldr	r2, [pc, #448]	@ (8001f8c <_scanf_i+0x1e0>)
 8001dcc:	2903      	cmp	r1, #3
 8001dce:	bf08      	it	eq
 8001dd0:	461a      	moveq	r2, r3
 8001dd2:	68a3      	ldr	r3, [r4, #8]
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001ddc:	bf88      	it	hi
 8001dde:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8001de2:	4627      	mov	r7, r4
 8001de4:	bf82      	ittt	hi
 8001de6:	eb03 0905 	addhi.w	r9, r3, r5
 8001dea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001dee:	60a3      	strhi	r3, [r4, #8]
 8001df0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001df4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8001df8:	bf98      	it	ls
 8001dfa:	f04f 0900 	movls.w	r9, #0
 8001dfe:	6023      	str	r3, [r4, #0]
 8001e00:	463d      	mov	r5, r7
 8001e02:	f04f 0b00 	mov.w	fp, #0
 8001e06:	6831      	ldr	r1, [r6, #0]
 8001e08:	ab03      	add	r3, sp, #12
 8001e0a:	7809      	ldrb	r1, [r1, #0]
 8001e0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f7fe f9fd 	bl	8000210 <memchr>
 8001e16:	b328      	cbz	r0, 8001e64 <_scanf_i+0xb8>
 8001e18:	f1bb 0f01 	cmp.w	fp, #1
 8001e1c:	d159      	bne.n	8001ed2 <_scanf_i+0x126>
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	b92a      	cbnz	r2, 8001e2e <_scanf_i+0x82>
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	2108      	movs	r1, #8
 8001e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2a:	6061      	str	r1, [r4, #4]
 8001e2c:	6022      	str	r2, [r4, #0]
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8001e34:	6022      	str	r2, [r4, #0]
 8001e36:	68a2      	ldr	r2, [r4, #8]
 8001e38:	1e51      	subs	r1, r2, #1
 8001e3a:	60a1      	str	r1, [r4, #8]
 8001e3c:	b192      	cbz	r2, 8001e64 <_scanf_i+0xb8>
 8001e3e:	6832      	ldr	r2, [r6, #0]
 8001e40:	1c51      	adds	r1, r2, #1
 8001e42:	6031      	str	r1, [r6, #0]
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	f805 2b01 	strb.w	r2, [r5], #1
 8001e4a:	6872      	ldr	r2, [r6, #4]
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	6072      	str	r2, [r6, #4]
 8001e52:	dc07      	bgt.n	8001e64 <_scanf_i+0xb8>
 8001e54:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8001e58:	4631      	mov	r1, r6
 8001e5a:	4650      	mov	r0, sl
 8001e5c:	4790      	blx	r2
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f040 8085 	bne.w	8001f6e <_scanf_i+0x1c2>
 8001e64:	f10b 0b01 	add.w	fp, fp, #1
 8001e68:	f1bb 0f03 	cmp.w	fp, #3
 8001e6c:	d1cb      	bne.n	8001e06 <_scanf_i+0x5a>
 8001e6e:	6863      	ldr	r3, [r4, #4]
 8001e70:	b90b      	cbnz	r3, 8001e76 <_scanf_i+0xca>
 8001e72:	230a      	movs	r3, #10
 8001e74:	6063      	str	r3, [r4, #4]
 8001e76:	6863      	ldr	r3, [r4, #4]
 8001e78:	4945      	ldr	r1, [pc, #276]	@ (8001f90 <_scanf_i+0x1e4>)
 8001e7a:	6960      	ldr	r0, [r4, #20]
 8001e7c:	1ac9      	subs	r1, r1, r3
 8001e7e:	f000 f935 	bl	80020ec <__sccl>
 8001e82:	f04f 0b00 	mov.w	fp, #0
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03d      	beq.n	8001f0a <_scanf_i+0x15e>
 8001e8e:	6831      	ldr	r1, [r6, #0]
 8001e90:	6960      	ldr	r0, [r4, #20]
 8001e92:	f891 c000 	ldrb.w	ip, [r1]
 8001e96:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d035      	beq.n	8001f0a <_scanf_i+0x15e>
 8001e9e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8001ea2:	d124      	bne.n	8001eee <_scanf_i+0x142>
 8001ea4:	0510      	lsls	r0, r2, #20
 8001ea6:	d522      	bpl.n	8001eee <_scanf_i+0x142>
 8001ea8:	f10b 0b01 	add.w	fp, fp, #1
 8001eac:	f1b9 0f00 	cmp.w	r9, #0
 8001eb0:	d003      	beq.n	8001eba <_scanf_i+0x10e>
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f109 39ff 	add.w	r9, r9, #4294967295
 8001eb8:	60a3      	str	r3, [r4, #8]
 8001eba:	6873      	ldr	r3, [r6, #4]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	6073      	str	r3, [r6, #4]
 8001ec2:	dd1b      	ble.n	8001efc <_scanf_i+0x150>
 8001ec4:	6833      	ldr	r3, [r6, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6033      	str	r3, [r6, #0]
 8001eca:	68a3      	ldr	r3, [r4, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60a3      	str	r3, [r4, #8]
 8001ed0:	e7d9      	b.n	8001e86 <_scanf_i+0xda>
 8001ed2:	f1bb 0f02 	cmp.w	fp, #2
 8001ed6:	d1ae      	bne.n	8001e36 <_scanf_i+0x8a>
 8001ed8:	6822      	ldr	r2, [r4, #0]
 8001eda:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001ede:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8001ee2:	d1bf      	bne.n	8001e64 <_scanf_i+0xb8>
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	6061      	str	r1, [r4, #4]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eec:	e7a2      	b.n	8001e34 <_scanf_i+0x88>
 8001eee:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8001ef2:	6022      	str	r2, [r4, #0]
 8001ef4:	780b      	ldrb	r3, [r1, #0]
 8001ef6:	f805 3b01 	strb.w	r3, [r5], #1
 8001efa:	e7de      	b.n	8001eba <_scanf_i+0x10e>
 8001efc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001f00:	4631      	mov	r1, r6
 8001f02:	4650      	mov	r0, sl
 8001f04:	4798      	blx	r3
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d0df      	beq.n	8001eca <_scanf_i+0x11e>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	05d9      	lsls	r1, r3, #23
 8001f0e:	d50d      	bpl.n	8001f2c <_scanf_i+0x180>
 8001f10:	42bd      	cmp	r5, r7
 8001f12:	d909      	bls.n	8001f28 <_scanf_i+0x17c>
 8001f14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001f18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001f1c:	4632      	mov	r2, r6
 8001f1e:	4650      	mov	r0, sl
 8001f20:	4798      	blx	r3
 8001f22:	f105 39ff 	add.w	r9, r5, #4294967295
 8001f26:	464d      	mov	r5, r9
 8001f28:	42bd      	cmp	r5, r7
 8001f2a:	d028      	beq.n	8001f7e <_scanf_i+0x1d2>
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	f012 0210 	ands.w	r2, r2, #16
 8001f32:	d113      	bne.n	8001f5c <_scanf_i+0x1b0>
 8001f34:	702a      	strb	r2, [r5, #0]
 8001f36:	6863      	ldr	r3, [r4, #4]
 8001f38:	9e01      	ldr	r6, [sp, #4]
 8001f3a:	4639      	mov	r1, r7
 8001f3c:	4650      	mov	r0, sl
 8001f3e:	47b0      	blx	r6
 8001f40:	f8d8 3000 	ldr.w	r3, [r8]
 8001f44:	6821      	ldr	r1, [r4, #0]
 8001f46:	1d1a      	adds	r2, r3, #4
 8001f48:	f8c8 2000 	str.w	r2, [r8]
 8001f4c:	f011 0f20 	tst.w	r1, #32
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	d00f      	beq.n	8001f74 <_scanf_i+0x1c8>
 8001f54:	6018      	str	r0, [r3, #0]
 8001f56:	68e3      	ldr	r3, [r4, #12]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60e3      	str	r3, [r4, #12]
 8001f5c:	6923      	ldr	r3, [r4, #16]
 8001f5e:	1bed      	subs	r5, r5, r7
 8001f60:	445d      	add	r5, fp
 8001f62:	442b      	add	r3, r5
 8001f64:	6123      	str	r3, [r4, #16]
 8001f66:	2000      	movs	r0, #0
 8001f68:	b007      	add	sp, #28
 8001f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f6e:	f04f 0b00 	mov.w	fp, #0
 8001f72:	e7ca      	b.n	8001f0a <_scanf_i+0x15e>
 8001f74:	07ca      	lsls	r2, r1, #31
 8001f76:	bf4c      	ite	mi
 8001f78:	8018      	strhmi	r0, [r3, #0]
 8001f7a:	6018      	strpl	r0, [r3, #0]
 8001f7c:	e7eb      	b.n	8001f56 <_scanf_i+0x1aa>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	e7f2      	b.n	8001f68 <_scanf_i+0x1bc>
 8001f82:	bf00      	nop
 8001f84:	08002690 	.word	0x08002690
 8001f88:	08000e39 	.word	0x08000e39
 8001f8c:	08002471 	.word	0x08002471
 8001f90:	080027e0 	.word	0x080027e0

08001f94 <__sflush_r>:
 8001f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f9c:	0716      	lsls	r6, r2, #28
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	d454      	bmi.n	800204e <__sflush_r+0xba>
 8001fa4:	684b      	ldr	r3, [r1, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	dc02      	bgt.n	8001fb0 <__sflush_r+0x1c>
 8001faa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	dd48      	ble.n	8002042 <__sflush_r+0xae>
 8001fb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fb2:	2e00      	cmp	r6, #0
 8001fb4:	d045      	beq.n	8002042 <__sflush_r+0xae>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001fbc:	682f      	ldr	r7, [r5, #0]
 8001fbe:	6a21      	ldr	r1, [r4, #32]
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	d030      	beq.n	8002026 <__sflush_r+0x92>
 8001fc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001fc6:	89a3      	ldrh	r3, [r4, #12]
 8001fc8:	0759      	lsls	r1, r3, #29
 8001fca:	d505      	bpl.n	8001fd8 <__sflush_r+0x44>
 8001fcc:	6863      	ldr	r3, [r4, #4]
 8001fce:	1ad2      	subs	r2, r2, r3
 8001fd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001fd2:	b10b      	cbz	r3, 8001fd8 <__sflush_r+0x44>
 8001fd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fdc:	6a21      	ldr	r1, [r4, #32]
 8001fde:	4628      	mov	r0, r5
 8001fe0:	47b0      	blx	r6
 8001fe2:	1c43      	adds	r3, r0, #1
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	d106      	bne.n	8001ff6 <__sflush_r+0x62>
 8001fe8:	6829      	ldr	r1, [r5, #0]
 8001fea:	291d      	cmp	r1, #29
 8001fec:	d82b      	bhi.n	8002046 <__sflush_r+0xb2>
 8001fee:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <__sflush_r+0x104>)
 8001ff0:	410a      	asrs	r2, r1
 8001ff2:	07d6      	lsls	r6, r2, #31
 8001ff4:	d427      	bmi.n	8002046 <__sflush_r+0xb2>
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	6062      	str	r2, [r4, #4]
 8001ffa:	04d9      	lsls	r1, r3, #19
 8001ffc:	6922      	ldr	r2, [r4, #16]
 8001ffe:	6022      	str	r2, [r4, #0]
 8002000:	d504      	bpl.n	800200c <__sflush_r+0x78>
 8002002:	1c42      	adds	r2, r0, #1
 8002004:	d101      	bne.n	800200a <__sflush_r+0x76>
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	b903      	cbnz	r3, 800200c <__sflush_r+0x78>
 800200a:	6560      	str	r0, [r4, #84]	@ 0x54
 800200c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800200e:	602f      	str	r7, [r5, #0]
 8002010:	b1b9      	cbz	r1, 8002042 <__sflush_r+0xae>
 8002012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002016:	4299      	cmp	r1, r3
 8002018:	d002      	beq.n	8002020 <__sflush_r+0x8c>
 800201a:	4628      	mov	r0, r5
 800201c:	f7ff f8d8 	bl	80011d0 <_free_r>
 8002020:	2300      	movs	r3, #0
 8002022:	6363      	str	r3, [r4, #52]	@ 0x34
 8002024:	e00d      	b.n	8002042 <__sflush_r+0xae>
 8002026:	2301      	movs	r3, #1
 8002028:	4628      	mov	r0, r5
 800202a:	47b0      	blx	r6
 800202c:	4602      	mov	r2, r0
 800202e:	1c50      	adds	r0, r2, #1
 8002030:	d1c9      	bne.n	8001fc6 <__sflush_r+0x32>
 8002032:	682b      	ldr	r3, [r5, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0c6      	beq.n	8001fc6 <__sflush_r+0x32>
 8002038:	2b1d      	cmp	r3, #29
 800203a:	d001      	beq.n	8002040 <__sflush_r+0xac>
 800203c:	2b16      	cmp	r3, #22
 800203e:	d11e      	bne.n	800207e <__sflush_r+0xea>
 8002040:	602f      	str	r7, [r5, #0]
 8002042:	2000      	movs	r0, #0
 8002044:	e022      	b.n	800208c <__sflush_r+0xf8>
 8002046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800204a:	b21b      	sxth	r3, r3
 800204c:	e01b      	b.n	8002086 <__sflush_r+0xf2>
 800204e:	690f      	ldr	r7, [r1, #16]
 8002050:	2f00      	cmp	r7, #0
 8002052:	d0f6      	beq.n	8002042 <__sflush_r+0xae>
 8002054:	0793      	lsls	r3, r2, #30
 8002056:	680e      	ldr	r6, [r1, #0]
 8002058:	bf08      	it	eq
 800205a:	694b      	ldreq	r3, [r1, #20]
 800205c:	600f      	str	r7, [r1, #0]
 800205e:	bf18      	it	ne
 8002060:	2300      	movne	r3, #0
 8002062:	eba6 0807 	sub.w	r8, r6, r7
 8002066:	608b      	str	r3, [r1, #8]
 8002068:	f1b8 0f00 	cmp.w	r8, #0
 800206c:	dde9      	ble.n	8002042 <__sflush_r+0xae>
 800206e:	6a21      	ldr	r1, [r4, #32]
 8002070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002072:	4643      	mov	r3, r8
 8002074:	463a      	mov	r2, r7
 8002076:	4628      	mov	r0, r5
 8002078:	47b0      	blx	r6
 800207a:	2800      	cmp	r0, #0
 800207c:	dc08      	bgt.n	8002090 <__sflush_r+0xfc>
 800207e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002086:	81a3      	strh	r3, [r4, #12]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002090:	4407      	add	r7, r0
 8002092:	eba8 0800 	sub.w	r8, r8, r0
 8002096:	e7e7      	b.n	8002068 <__sflush_r+0xd4>
 8002098:	dfbffffe 	.word	0xdfbffffe

0800209c <_fflush_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	690b      	ldr	r3, [r1, #16]
 80020a0:	4605      	mov	r5, r0
 80020a2:	460c      	mov	r4, r1
 80020a4:	b913      	cbnz	r3, 80020ac <_fflush_r+0x10>
 80020a6:	2500      	movs	r5, #0
 80020a8:	4628      	mov	r0, r5
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	b118      	cbz	r0, 80020b6 <_fflush_r+0x1a>
 80020ae:	6a03      	ldr	r3, [r0, #32]
 80020b0:	b90b      	cbnz	r3, 80020b6 <_fflush_r+0x1a>
 80020b2:	f7fe ff59 	bl	8000f68 <__sinit>
 80020b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f3      	beq.n	80020a6 <_fflush_r+0xa>
 80020be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80020c0:	07d0      	lsls	r0, r2, #31
 80020c2:	d404      	bmi.n	80020ce <_fflush_r+0x32>
 80020c4:	0599      	lsls	r1, r3, #22
 80020c6:	d402      	bmi.n	80020ce <_fflush_r+0x32>
 80020c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020ca:	f7ff f87e 	bl	80011ca <__retarget_lock_acquire_recursive>
 80020ce:	4628      	mov	r0, r5
 80020d0:	4621      	mov	r1, r4
 80020d2:	f7ff ff5f 	bl	8001f94 <__sflush_r>
 80020d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020d8:	07da      	lsls	r2, r3, #31
 80020da:	4605      	mov	r5, r0
 80020dc:	d4e4      	bmi.n	80020a8 <_fflush_r+0xc>
 80020de:	89a3      	ldrh	r3, [r4, #12]
 80020e0:	059b      	lsls	r3, r3, #22
 80020e2:	d4e1      	bmi.n	80020a8 <_fflush_r+0xc>
 80020e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020e6:	f7ff f871 	bl	80011cc <__retarget_lock_release_recursive>
 80020ea:	e7dd      	b.n	80020a8 <_fflush_r+0xc>

080020ec <__sccl>:
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	780b      	ldrb	r3, [r1, #0]
 80020f0:	4604      	mov	r4, r0
 80020f2:	2b5e      	cmp	r3, #94	@ 0x5e
 80020f4:	bf0b      	itete	eq
 80020f6:	784b      	ldrbeq	r3, [r1, #1]
 80020f8:	1c4a      	addne	r2, r1, #1
 80020fa:	1c8a      	addeq	r2, r1, #2
 80020fc:	2100      	movne	r1, #0
 80020fe:	bf08      	it	eq
 8002100:	2101      	moveq	r1, #1
 8002102:	3801      	subs	r0, #1
 8002104:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8002108:	f800 1f01 	strb.w	r1, [r0, #1]!
 800210c:	42a8      	cmp	r0, r5
 800210e:	d1fb      	bne.n	8002108 <__sccl+0x1c>
 8002110:	b90b      	cbnz	r3, 8002116 <__sccl+0x2a>
 8002112:	1e50      	subs	r0, r2, #1
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	f081 0101 	eor.w	r1, r1, #1
 800211a:	54e1      	strb	r1, [r4, r3]
 800211c:	4610      	mov	r0, r2
 800211e:	4602      	mov	r2, r0
 8002120:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002124:	2d2d      	cmp	r5, #45	@ 0x2d
 8002126:	d005      	beq.n	8002134 <__sccl+0x48>
 8002128:	2d5d      	cmp	r5, #93	@ 0x5d
 800212a:	d016      	beq.n	800215a <__sccl+0x6e>
 800212c:	2d00      	cmp	r5, #0
 800212e:	d0f1      	beq.n	8002114 <__sccl+0x28>
 8002130:	462b      	mov	r3, r5
 8002132:	e7f2      	b.n	800211a <__sccl+0x2e>
 8002134:	7846      	ldrb	r6, [r0, #1]
 8002136:	2e5d      	cmp	r6, #93	@ 0x5d
 8002138:	d0fa      	beq.n	8002130 <__sccl+0x44>
 800213a:	42b3      	cmp	r3, r6
 800213c:	dcf8      	bgt.n	8002130 <__sccl+0x44>
 800213e:	3002      	adds	r0, #2
 8002140:	461a      	mov	r2, r3
 8002142:	3201      	adds	r2, #1
 8002144:	4296      	cmp	r6, r2
 8002146:	54a1      	strb	r1, [r4, r2]
 8002148:	dcfb      	bgt.n	8002142 <__sccl+0x56>
 800214a:	1af2      	subs	r2, r6, r3
 800214c:	3a01      	subs	r2, #1
 800214e:	1c5d      	adds	r5, r3, #1
 8002150:	42b3      	cmp	r3, r6
 8002152:	bfa8      	it	ge
 8002154:	2200      	movge	r2, #0
 8002156:	18ab      	adds	r3, r5, r2
 8002158:	e7e1      	b.n	800211e <__sccl+0x32>
 800215a:	4610      	mov	r0, r2
 800215c:	e7da      	b.n	8002114 <__sccl+0x28>

0800215e <__submore>:
 800215e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002162:	460c      	mov	r4, r1
 8002164:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002166:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800216a:	4299      	cmp	r1, r3
 800216c:	d11d      	bne.n	80021aa <__submore+0x4c>
 800216e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002172:	f7ff f899 	bl	80012a8 <_malloc_r>
 8002176:	b918      	cbnz	r0, 8002180 <__submore+0x22>
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002184:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002186:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800218a:	6360      	str	r0, [r4, #52]	@ 0x34
 800218c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8002190:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002194:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8002198:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800219c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80021a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80021a4:	6020      	str	r0, [r4, #0]
 80021a6:	2000      	movs	r0, #0
 80021a8:	e7e8      	b.n	800217c <__submore+0x1e>
 80021aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80021ac:	0077      	lsls	r7, r6, #1
 80021ae:	463a      	mov	r2, r7
 80021b0:	f000 f8c2 	bl	8002338 <_realloc_r>
 80021b4:	4605      	mov	r5, r0
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0de      	beq.n	8002178 <__submore+0x1a>
 80021ba:	eb00 0806 	add.w	r8, r0, r6
 80021be:	4601      	mov	r1, r0
 80021c0:	4632      	mov	r2, r6
 80021c2:	4640      	mov	r0, r8
 80021c4:	f000 f8aa 	bl	800231c <memcpy>
 80021c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80021cc:	f8c4 8000 	str.w	r8, [r4]
 80021d0:	e7e9      	b.n	80021a6 <__submore+0x48>

080021d2 <__swbuf_r>:
 80021d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d4:	460e      	mov	r6, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	4605      	mov	r5, r0
 80021da:	b118      	cbz	r0, 80021e4 <__swbuf_r+0x12>
 80021dc:	6a03      	ldr	r3, [r0, #32]
 80021de:	b90b      	cbnz	r3, 80021e4 <__swbuf_r+0x12>
 80021e0:	f7fe fec2 	bl	8000f68 <__sinit>
 80021e4:	69a3      	ldr	r3, [r4, #24]
 80021e6:	60a3      	str	r3, [r4, #8]
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	071a      	lsls	r2, r3, #28
 80021ec:	d501      	bpl.n	80021f2 <__swbuf_r+0x20>
 80021ee:	6923      	ldr	r3, [r4, #16]
 80021f0:	b943      	cbnz	r3, 8002204 <__swbuf_r+0x32>
 80021f2:	4621      	mov	r1, r4
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 f82b 	bl	8002250 <__swsetup_r>
 80021fa:	b118      	cbz	r0, 8002204 <__swbuf_r+0x32>
 80021fc:	f04f 37ff 	mov.w	r7, #4294967295
 8002200:	4638      	mov	r0, r7
 8002202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	6922      	ldr	r2, [r4, #16]
 8002208:	1a98      	subs	r0, r3, r2
 800220a:	6963      	ldr	r3, [r4, #20]
 800220c:	b2f6      	uxtb	r6, r6
 800220e:	4283      	cmp	r3, r0
 8002210:	4637      	mov	r7, r6
 8002212:	dc05      	bgt.n	8002220 <__swbuf_r+0x4e>
 8002214:	4621      	mov	r1, r4
 8002216:	4628      	mov	r0, r5
 8002218:	f7ff ff40 	bl	800209c <_fflush_r>
 800221c:	2800      	cmp	r0, #0
 800221e:	d1ed      	bne.n	80021fc <__swbuf_r+0x2a>
 8002220:	68a3      	ldr	r3, [r4, #8]
 8002222:	3b01      	subs	r3, #1
 8002224:	60a3      	str	r3, [r4, #8]
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	6022      	str	r2, [r4, #0]
 800222c:	701e      	strb	r6, [r3, #0]
 800222e:	6962      	ldr	r2, [r4, #20]
 8002230:	1c43      	adds	r3, r0, #1
 8002232:	429a      	cmp	r2, r3
 8002234:	d004      	beq.n	8002240 <__swbuf_r+0x6e>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	07db      	lsls	r3, r3, #31
 800223a:	d5e1      	bpl.n	8002200 <__swbuf_r+0x2e>
 800223c:	2e0a      	cmp	r6, #10
 800223e:	d1df      	bne.n	8002200 <__swbuf_r+0x2e>
 8002240:	4621      	mov	r1, r4
 8002242:	4628      	mov	r0, r5
 8002244:	f7ff ff2a 	bl	800209c <_fflush_r>
 8002248:	2800      	cmp	r0, #0
 800224a:	d0d9      	beq.n	8002200 <__swbuf_r+0x2e>
 800224c:	e7d6      	b.n	80021fc <__swbuf_r+0x2a>
	...

08002250 <__swsetup_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <__swsetup_r+0xa8>)
 8002254:	4605      	mov	r5, r0
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	460c      	mov	r4, r1
 800225a:	b118      	cbz	r0, 8002264 <__swsetup_r+0x14>
 800225c:	6a03      	ldr	r3, [r0, #32]
 800225e:	b90b      	cbnz	r3, 8002264 <__swsetup_r+0x14>
 8002260:	f7fe fe82 	bl	8000f68 <__sinit>
 8002264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002268:	0719      	lsls	r1, r3, #28
 800226a:	d422      	bmi.n	80022b2 <__swsetup_r+0x62>
 800226c:	06da      	lsls	r2, r3, #27
 800226e:	d407      	bmi.n	8002280 <__swsetup_r+0x30>
 8002270:	2209      	movs	r2, #9
 8002272:	602a      	str	r2, [r5, #0]
 8002274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	f04f 30ff 	mov.w	r0, #4294967295
 800227e:	e033      	b.n	80022e8 <__swsetup_r+0x98>
 8002280:	0758      	lsls	r0, r3, #29
 8002282:	d512      	bpl.n	80022aa <__swsetup_r+0x5a>
 8002284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002286:	b141      	cbz	r1, 800229a <__swsetup_r+0x4a>
 8002288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800228c:	4299      	cmp	r1, r3
 800228e:	d002      	beq.n	8002296 <__swsetup_r+0x46>
 8002290:	4628      	mov	r0, r5
 8002292:	f7fe ff9d 	bl	80011d0 <_free_r>
 8002296:	2300      	movs	r3, #0
 8002298:	6363      	str	r3, [r4, #52]	@ 0x34
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80022a0:	81a3      	strh	r3, [r4, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	6063      	str	r3, [r4, #4]
 80022a6:	6923      	ldr	r3, [r4, #16]
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	89a3      	ldrh	r3, [r4, #12]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	81a3      	strh	r3, [r4, #12]
 80022b2:	6923      	ldr	r3, [r4, #16]
 80022b4:	b94b      	cbnz	r3, 80022ca <__swsetup_r+0x7a>
 80022b6:	89a3      	ldrh	r3, [r4, #12]
 80022b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c0:	d003      	beq.n	80022ca <__swsetup_r+0x7a>
 80022c2:	4621      	mov	r1, r4
 80022c4:	4628      	mov	r0, r5
 80022c6:	f000 f8fb 	bl	80024c0 <__smakebuf_r>
 80022ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ce:	f013 0201 	ands.w	r2, r3, #1
 80022d2:	d00a      	beq.n	80022ea <__swsetup_r+0x9a>
 80022d4:	2200      	movs	r2, #0
 80022d6:	60a2      	str	r2, [r4, #8]
 80022d8:	6962      	ldr	r2, [r4, #20]
 80022da:	4252      	negs	r2, r2
 80022dc:	61a2      	str	r2, [r4, #24]
 80022de:	6922      	ldr	r2, [r4, #16]
 80022e0:	b942      	cbnz	r2, 80022f4 <__swsetup_r+0xa4>
 80022e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80022e6:	d1c5      	bne.n	8002274 <__swsetup_r+0x24>
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
 80022ea:	0799      	lsls	r1, r3, #30
 80022ec:	bf58      	it	pl
 80022ee:	6962      	ldrpl	r2, [r4, #20]
 80022f0:	60a2      	str	r2, [r4, #8]
 80022f2:	e7f4      	b.n	80022de <__swsetup_r+0x8e>
 80022f4:	2000      	movs	r0, #0
 80022f6:	e7f7      	b.n	80022e8 <__swsetup_r+0x98>
 80022f8:	20000038 	.word	0x20000038

080022fc <_sbrk_r>:
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4d06      	ldr	r5, [pc, #24]	@ (8002318 <_sbrk_r+0x1c>)
 8002300:	2300      	movs	r3, #0
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	602b      	str	r3, [r5, #0]
 8002308:	f7fe f9e0 	bl	80006cc <_sbrk>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_sbrk_r+0x1a>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	b103      	cbz	r3, 8002316 <_sbrk_r+0x1a>
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	20000288 	.word	0x20000288

0800231c <memcpy>:
 800231c:	440a      	add	r2, r1
 800231e:	4291      	cmp	r1, r2
 8002320:	f100 33ff 	add.w	r3, r0, #4294967295
 8002324:	d100      	bne.n	8002328 <memcpy+0xc>
 8002326:	4770      	bx	lr
 8002328:	b510      	push	{r4, lr}
 800232a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800232e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002332:	4291      	cmp	r1, r2
 8002334:	d1f9      	bne.n	800232a <memcpy+0xe>
 8002336:	bd10      	pop	{r4, pc}

08002338 <_realloc_r>:
 8002338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800233c:	4680      	mov	r8, r0
 800233e:	4615      	mov	r5, r2
 8002340:	460c      	mov	r4, r1
 8002342:	b921      	cbnz	r1, 800234e <_realloc_r+0x16>
 8002344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002348:	4611      	mov	r1, r2
 800234a:	f7fe bfad 	b.w	80012a8 <_malloc_r>
 800234e:	b92a      	cbnz	r2, 800235c <_realloc_r+0x24>
 8002350:	f7fe ff3e 	bl	80011d0 <_free_r>
 8002354:	2400      	movs	r4, #0
 8002356:	4620      	mov	r0, r4
 8002358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800235c:	f000 f90e 	bl	800257c <_malloc_usable_size_r>
 8002360:	4285      	cmp	r5, r0
 8002362:	4606      	mov	r6, r0
 8002364:	d802      	bhi.n	800236c <_realloc_r+0x34>
 8002366:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800236a:	d8f4      	bhi.n	8002356 <_realloc_r+0x1e>
 800236c:	4629      	mov	r1, r5
 800236e:	4640      	mov	r0, r8
 8002370:	f7fe ff9a 	bl	80012a8 <_malloc_r>
 8002374:	4607      	mov	r7, r0
 8002376:	2800      	cmp	r0, #0
 8002378:	d0ec      	beq.n	8002354 <_realloc_r+0x1c>
 800237a:	42b5      	cmp	r5, r6
 800237c:	462a      	mov	r2, r5
 800237e:	4621      	mov	r1, r4
 8002380:	bf28      	it	cs
 8002382:	4632      	movcs	r2, r6
 8002384:	f7ff ffca 	bl	800231c <memcpy>
 8002388:	4621      	mov	r1, r4
 800238a:	4640      	mov	r0, r8
 800238c:	f7fe ff20 	bl	80011d0 <_free_r>
 8002390:	463c      	mov	r4, r7
 8002392:	e7e0      	b.n	8002356 <_realloc_r+0x1e>

08002394 <_strtoul_l.constprop.0>:
 8002394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002398:	4e34      	ldr	r6, [pc, #208]	@ (800246c <_strtoul_l.constprop.0+0xd8>)
 800239a:	4686      	mov	lr, r0
 800239c:	460d      	mov	r5, r1
 800239e:	4628      	mov	r0, r5
 80023a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023a4:	5d37      	ldrb	r7, [r6, r4]
 80023a6:	f017 0708 	ands.w	r7, r7, #8
 80023aa:	d1f8      	bne.n	800239e <_strtoul_l.constprop.0+0xa>
 80023ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80023ae:	d12f      	bne.n	8002410 <_strtoul_l.constprop.0+0x7c>
 80023b0:	782c      	ldrb	r4, [r5, #0]
 80023b2:	2701      	movs	r7, #1
 80023b4:	1c85      	adds	r5, r0, #2
 80023b6:	f033 0010 	bics.w	r0, r3, #16
 80023ba:	d109      	bne.n	80023d0 <_strtoul_l.constprop.0+0x3c>
 80023bc:	2c30      	cmp	r4, #48	@ 0x30
 80023be:	d12c      	bne.n	800241a <_strtoul_l.constprop.0+0x86>
 80023c0:	7828      	ldrb	r0, [r5, #0]
 80023c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80023c6:	2858      	cmp	r0, #88	@ 0x58
 80023c8:	d127      	bne.n	800241a <_strtoul_l.constprop.0+0x86>
 80023ca:	786c      	ldrb	r4, [r5, #1]
 80023cc:	2310      	movs	r3, #16
 80023ce:	3502      	adds	r5, #2
 80023d0:	f04f 38ff 	mov.w	r8, #4294967295
 80023d4:	2600      	movs	r6, #0
 80023d6:	fbb8 f8f3 	udiv	r8, r8, r3
 80023da:	fb03 f908 	mul.w	r9, r3, r8
 80023de:	ea6f 0909 	mvn.w	r9, r9
 80023e2:	4630      	mov	r0, r6
 80023e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80023e8:	f1bc 0f09 	cmp.w	ip, #9
 80023ec:	d81c      	bhi.n	8002428 <_strtoul_l.constprop.0+0x94>
 80023ee:	4664      	mov	r4, ip
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	dd2a      	ble.n	800244a <_strtoul_l.constprop.0+0xb6>
 80023f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80023f8:	d007      	beq.n	800240a <_strtoul_l.constprop.0+0x76>
 80023fa:	4580      	cmp	r8, r0
 80023fc:	d322      	bcc.n	8002444 <_strtoul_l.constprop.0+0xb0>
 80023fe:	d101      	bne.n	8002404 <_strtoul_l.constprop.0+0x70>
 8002400:	45a1      	cmp	r9, r4
 8002402:	db1f      	blt.n	8002444 <_strtoul_l.constprop.0+0xb0>
 8002404:	fb00 4003 	mla	r0, r0, r3, r4
 8002408:	2601      	movs	r6, #1
 800240a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800240e:	e7e9      	b.n	80023e4 <_strtoul_l.constprop.0+0x50>
 8002410:	2c2b      	cmp	r4, #43	@ 0x2b
 8002412:	bf04      	itt	eq
 8002414:	782c      	ldrbeq	r4, [r5, #0]
 8002416:	1c85      	addeq	r5, r0, #2
 8002418:	e7cd      	b.n	80023b6 <_strtoul_l.constprop.0+0x22>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1d8      	bne.n	80023d0 <_strtoul_l.constprop.0+0x3c>
 800241e:	2c30      	cmp	r4, #48	@ 0x30
 8002420:	bf0c      	ite	eq
 8002422:	2308      	moveq	r3, #8
 8002424:	230a      	movne	r3, #10
 8002426:	e7d3      	b.n	80023d0 <_strtoul_l.constprop.0+0x3c>
 8002428:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800242c:	f1bc 0f19 	cmp.w	ip, #25
 8002430:	d801      	bhi.n	8002436 <_strtoul_l.constprop.0+0xa2>
 8002432:	3c37      	subs	r4, #55	@ 0x37
 8002434:	e7dc      	b.n	80023f0 <_strtoul_l.constprop.0+0x5c>
 8002436:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800243a:	f1bc 0f19 	cmp.w	ip, #25
 800243e:	d804      	bhi.n	800244a <_strtoul_l.constprop.0+0xb6>
 8002440:	3c57      	subs	r4, #87	@ 0x57
 8002442:	e7d5      	b.n	80023f0 <_strtoul_l.constprop.0+0x5c>
 8002444:	f04f 36ff 	mov.w	r6, #4294967295
 8002448:	e7df      	b.n	800240a <_strtoul_l.constprop.0+0x76>
 800244a:	1c73      	adds	r3, r6, #1
 800244c:	d106      	bne.n	800245c <_strtoul_l.constprop.0+0xc8>
 800244e:	2322      	movs	r3, #34	@ 0x22
 8002450:	f8ce 3000 	str.w	r3, [lr]
 8002454:	4630      	mov	r0, r6
 8002456:	b932      	cbnz	r2, 8002466 <_strtoul_l.constprop.0+0xd2>
 8002458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800245c:	b107      	cbz	r7, 8002460 <_strtoul_l.constprop.0+0xcc>
 800245e:	4240      	negs	r0, r0
 8002460:	2a00      	cmp	r2, #0
 8002462:	d0f9      	beq.n	8002458 <_strtoul_l.constprop.0+0xc4>
 8002464:	b106      	cbz	r6, 8002468 <_strtoul_l.constprop.0+0xd4>
 8002466:	1e69      	subs	r1, r5, #1
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	e7f5      	b.n	8002458 <_strtoul_l.constprop.0+0xc4>
 800246c:	0800269d 	.word	0x0800269d

08002470 <_strtoul_r>:
 8002470:	f7ff bf90 	b.w	8002394 <_strtoul_l.constprop.0>

08002474 <__swhatbuf_r>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	460c      	mov	r4, r1
 8002478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247c:	2900      	cmp	r1, #0
 800247e:	b096      	sub	sp, #88	@ 0x58
 8002480:	4615      	mov	r5, r2
 8002482:	461e      	mov	r6, r3
 8002484:	da0d      	bge.n	80024a2 <__swhatbuf_r+0x2e>
 8002486:	89a3      	ldrh	r3, [r4, #12]
 8002488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	bf14      	ite	ne
 8002492:	2340      	movne	r3, #64	@ 0x40
 8002494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002498:	2000      	movs	r0, #0
 800249a:	6031      	str	r1, [r6, #0]
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	b016      	add	sp, #88	@ 0x58
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	466a      	mov	r2, sp
 80024a4:	f000 f848 	bl	8002538 <_fstat_r>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	dbec      	blt.n	8002486 <__swhatbuf_r+0x12>
 80024ac:	9901      	ldr	r1, [sp, #4]
 80024ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80024b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80024b6:	4259      	negs	r1, r3
 80024b8:	4159      	adcs	r1, r3
 80024ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024be:	e7eb      	b.n	8002498 <__swhatbuf_r+0x24>

080024c0 <__smakebuf_r>:
 80024c0:	898b      	ldrh	r3, [r1, #12]
 80024c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024c4:	079d      	lsls	r5, r3, #30
 80024c6:	4606      	mov	r6, r0
 80024c8:	460c      	mov	r4, r1
 80024ca:	d507      	bpl.n	80024dc <__smakebuf_r+0x1c>
 80024cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024d0:	6023      	str	r3, [r4, #0]
 80024d2:	6123      	str	r3, [r4, #16]
 80024d4:	2301      	movs	r3, #1
 80024d6:	6163      	str	r3, [r4, #20]
 80024d8:	b003      	add	sp, #12
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024dc:	ab01      	add	r3, sp, #4
 80024de:	466a      	mov	r2, sp
 80024e0:	f7ff ffc8 	bl	8002474 <__swhatbuf_r>
 80024e4:	9f00      	ldr	r7, [sp, #0]
 80024e6:	4605      	mov	r5, r0
 80024e8:	4639      	mov	r1, r7
 80024ea:	4630      	mov	r0, r6
 80024ec:	f7fe fedc 	bl	80012a8 <_malloc_r>
 80024f0:	b948      	cbnz	r0, 8002506 <__smakebuf_r+0x46>
 80024f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f6:	059a      	lsls	r2, r3, #22
 80024f8:	d4ee      	bmi.n	80024d8 <__smakebuf_r+0x18>
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	f043 0302 	orr.w	r3, r3, #2
 8002502:	81a3      	strh	r3, [r4, #12]
 8002504:	e7e2      	b.n	80024cc <__smakebuf_r+0xc>
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	6020      	str	r0, [r4, #0]
 800250a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250e:	81a3      	strh	r3, [r4, #12]
 8002510:	9b01      	ldr	r3, [sp, #4]
 8002512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002516:	b15b      	cbz	r3, 8002530 <__smakebuf_r+0x70>
 8002518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800251c:	4630      	mov	r0, r6
 800251e:	f000 f81d 	bl	800255c <_isatty_r>
 8002522:	b128      	cbz	r0, 8002530 <__smakebuf_r+0x70>
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	81a3      	strh	r3, [r4, #12]
 8002530:	89a3      	ldrh	r3, [r4, #12]
 8002532:	431d      	orrs	r5, r3
 8002534:	81a5      	strh	r5, [r4, #12]
 8002536:	e7cf      	b.n	80024d8 <__smakebuf_r+0x18>

08002538 <_fstat_r>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	4d07      	ldr	r5, [pc, #28]	@ (8002558 <_fstat_r+0x20>)
 800253c:	2300      	movs	r3, #0
 800253e:	4604      	mov	r4, r0
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	602b      	str	r3, [r5, #0]
 8002546:	f7fe f898 	bl	800067a <_fstat>
 800254a:	1c43      	adds	r3, r0, #1
 800254c:	d102      	bne.n	8002554 <_fstat_r+0x1c>
 800254e:	682b      	ldr	r3, [r5, #0]
 8002550:	b103      	cbz	r3, 8002554 <_fstat_r+0x1c>
 8002552:	6023      	str	r3, [r4, #0]
 8002554:	bd38      	pop	{r3, r4, r5, pc}
 8002556:	bf00      	nop
 8002558:	20000288 	.word	0x20000288

0800255c <_isatty_r>:
 800255c:	b538      	push	{r3, r4, r5, lr}
 800255e:	4d06      	ldr	r5, [pc, #24]	@ (8002578 <_isatty_r+0x1c>)
 8002560:	2300      	movs	r3, #0
 8002562:	4604      	mov	r4, r0
 8002564:	4608      	mov	r0, r1
 8002566:	602b      	str	r3, [r5, #0]
 8002568:	f7fe f897 	bl	800069a <_isatty>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	d102      	bne.n	8002576 <_isatty_r+0x1a>
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	b103      	cbz	r3, 8002576 <_isatty_r+0x1a>
 8002574:	6023      	str	r3, [r4, #0]
 8002576:	bd38      	pop	{r3, r4, r5, pc}
 8002578:	20000288 	.word	0x20000288

0800257c <_malloc_usable_size_r>:
 800257c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002580:	1f18      	subs	r0, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	bfbc      	itt	lt
 8002586:	580b      	ldrlt	r3, [r1, r0]
 8002588:	18c0      	addlt	r0, r0, r3
 800258a:	4770      	bx	lr

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	bf00      	nop
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
