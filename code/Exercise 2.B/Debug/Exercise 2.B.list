
Exercise 2.B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001434  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080015d4  080015d4  000025d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001660  08001660  00003088  2**0
                  CONTENTS
  4 .ARM          00000008  08001660  08001660  00002660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001668  08001668  00003088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001668  08001668  00002668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800166c  0800166c  0000266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08001670  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003088  2**0
                  CONTENTS
 10 .bss          0000016c  20000088  20000088  00003088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  00003088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001025  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005cf  00000000  00000000  000040dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000046b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fc  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c63  00000000  00000000  0000491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b97  00000000  00000000  0001b57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078088  00000000  00000000  0001d116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009519e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c7c  00000000  00000000  000951e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00095e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080015bc 	.word	0x080015bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080015bc 	.word	0x080015bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#include <string.h>

#include "serial.h"
#include "stm32f303xc.h"

int __io_putchar(int ch) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4904      	ldr	r1, [pc, #16]	@ (80002a0 <__io_putchar+0x20>)
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f8c8 	bl	8000424 <SerialOutputChar>
    return ch;
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <__io_getchar>:

int __io_getchar(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    return SerialGetChar(&USART1_PORT);
 80002a8:	4802      	ldr	r0, [pc, #8]	@ (80002b4 <__io_getchar+0x10>)
 80002aa:	f000 f8d4 	bl	8000456 <SerialGetChar>
 80002ae:	4603      	mov	r3, r0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000000 	.word	0x20000000

080002b8 <OnLineReceived>:

void OnLineReceived(char *string, uint32_t length) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
    printf("> You typed: %s\r\n", string);
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	4805      	ldr	r0, [pc, #20]	@ (80002dc <OnLineReceived+0x24>)
 80002c6:	f000 fab1 	bl	800082c <iprintf>
    printf("> Echo: %s\r\n\r\n", string);
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <OnLineReceived+0x28>)
 80002ce:	f000 faad 	bl	800082c <iprintf>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	080015d4 	.word	0x080015d4
 80002e0:	080015e8 	.word	0x080015e8

080002e4 <main>:

int main(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	@ 0x40
 80002e8:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80002ea:	2200      	movs	r2, #0
 80002ec:	490a      	ldr	r1, [pc, #40]	@ (8000318 <main+0x34>)
 80002ee:	2004      	movs	r0, #4
 80002f0:	f000 f81a 	bl	8000328 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived); // Register RX callback
 80002f4:	4909      	ldr	r1, [pc, #36]	@ (800031c <main+0x38>)
 80002f6:	4808      	ldr	r0, [pc, #32]	@ (8000318 <main+0x34>)
 80002f8:	f000 f8fb 	bl	80004f2 <SerialSetReceiveCallback>
    printf("USART1 is ready. Type a line and press Enter:\r\n");
 80002fc:	4808      	ldr	r0, [pc, #32]	@ (8000320 <main+0x3c>)
 80002fe:	f000 fafd 	bl	80008fc <puts>

    char input_buffer[64];

    while (1) {
		printf("> ");  // Print prompt
 8000302:	4808      	ldr	r0, [pc, #32]	@ (8000324 <main+0x40>)
 8000304:	f000 fa92 	bl	800082c <iprintf>
		SerialInputLine(input_buffer, sizeof(input_buffer), &USART1_PORT);  // Read input
 8000308:	463b      	mov	r3, r7
 800030a:	4a03      	ldr	r2, [pc, #12]	@ (8000318 <main+0x34>)
 800030c:	2140      	movs	r1, #64	@ 0x40
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8b8 	bl	8000484 <SerialInputLine>
		printf("> ");  // Print prompt
 8000314:	bf00      	nop
 8000316:	e7f4      	b.n	8000302 <main+0x1e>
 8000318:	20000000 	.word	0x20000000
 800031c:	080002b9 	.word	0x080002b9
 8000320:	080015f8 	.word	0x080015f8
 8000324:	08001628 	.word	0x08001628

08000328 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000328:	b480      	push	{r7}
 800032a:	b087      	sub	sp, #28
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800033a:	4b39      	ldr	r3, [pc, #228]	@ (8000420 <SerialInitialise+0xf8>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	4a38      	ldr	r2, [pc, #224]	@ (8000420 <SerialInitialise+0xf8>)
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000344:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000346:	4b36      	ldr	r3, [pc, #216]	@ (8000420 <SerialInitialise+0xf8>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a35      	ldr	r2, [pc, #212]	@ (8000420 <SerialInitialise+0xf8>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	691a      	ldr	r2, [r3, #16]
 8000356:	4b32      	ldr	r3, [pc, #200]	@ (8000420 <SerialInitialise+0xf8>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4931      	ldr	r1, [pc, #196]	@ (8000420 <SerialInitialise+0xf8>)
 800035c:	4313      	orrs	r3, r2
 800035e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	68ba      	ldr	r2, [r7, #8]
 8000366:	6952      	ldr	r2, [r2, #20]
 8000368:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	6992      	ldr	r2, [r2, #24]
 8000372:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	69d9      	ldr	r1, [r3, #28]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	6a1a      	ldr	r2, [r3, #32]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	430a      	orrs	r2, r1
 8000384:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	6a19      	ldr	r1, [r3, #32]
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	430a      	orrs	r2, r1
 8000396:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <SerialInitialise+0xf8>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	491f      	ldr	r1, [pc, #124]	@ (8000420 <SerialInitialise+0xf8>)
 80003a2:	4313      	orrs	r3, r2
 80003a4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <SerialInitialise+0xf8>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	491c      	ldr	r1, [pc, #112]	@ (8000420 <SerialInitialise+0xf8>)
 80003b0:	4313      	orrs	r3, r2
 80003b2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	330c      	adds	r3, #12
 80003ba:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d820      	bhi.n	8000404 <SerialInitialise+0xdc>
 80003c2:	a201      	add	r2, pc, #4	@ (adr r2, 80003c8 <SerialInitialise+0xa0>)
 80003c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c8:	080003dd 	.word	0x080003dd
 80003cc:	080003e5 	.word	0x080003e5
 80003d0:	080003ed 	.word	0x080003ed
 80003d4:	080003f5 	.word	0x080003f5
 80003d8:	080003fd 	.word	0x080003fd
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	2246      	movs	r2, #70	@ 0x46
 80003e0:	801a      	strh	r2, [r3, #0]
		break;
 80003e2:	e00f      	b.n	8000404 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	2246      	movs	r2, #70	@ 0x46
 80003e8:	801a      	strh	r2, [r3, #0]
		break;
 80003ea:	e00b      	b.n	8000404 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	2246      	movs	r2, #70	@ 0x46
 80003f0:	801a      	strh	r2, [r3, #0]
		break;
 80003f2:	e007      	b.n	8000404 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2246      	movs	r2, #70	@ 0x46
 80003f8:	801a      	strh	r2, [r3, #0]
		break;
 80003fa:	e003      	b.n	8000404 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	2246      	movs	r2, #70	@ 0x46
 8000400:	801a      	strh	r2, [r3, #0]
		break;
 8000402:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f042 020d 	orr.w	r2, r2, #13
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40021000 	.word	0x40021000

08000424 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000430:	bf00      	nop
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f8      	beq.n	8000432 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	79fa      	ldrb	r2, [r7, #7]
 8000446:	b292      	uxth	r2, r2
 8000448:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <SerialGetChar>:
	serial_port->completion_function(counter);
}



uint8_t SerialGetChar(SerialPort *serial_port) {
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);
 800045e:	bf00      	nop
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 0320 	and.w	r3, r3, #32
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f8      	beq.n	8000460 <SerialGetChar+0xa>
	return serial_port->UART->RDR;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000474:	b29b      	uxth	r3, r3
 8000476:	b2db      	uxtb	r3, r3
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <SerialInputLine>:



void SerialInputLine(char *buffer, uint32_t max_len, SerialPort *serial_port) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]

    while (i < max_len - 1) {
 8000494:	e016      	b.n	80004c4 <SerialInputLine+0x40>
        char c = SerialGetChar(serial_port);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff ffdd 	bl	8000456 <SerialGetChar>
 800049c:	4603      	mov	r3, r0
 800049e:	74fb      	strb	r3, [r7, #19]

        // Echo the character back as feedback
        SerialOutputChar(c, serial_port);
 80004a0:	7cfb      	ldrb	r3, [r7, #19]
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffbd 	bl	8000424 <SerialOutputChar>

        if (c == '\r' || c == '\n') {
 80004aa:	7cfb      	ldrb	r3, [r7, #19]
 80004ac:	2b0d      	cmp	r3, #13
 80004ae:	d00e      	beq.n	80004ce <SerialInputLine+0x4a>
 80004b0:	7cfb      	ldrb	r3, [r7, #19]
 80004b2:	2b0a      	cmp	r3, #10
 80004b4:	d00b      	beq.n	80004ce <SerialInputLine+0x4a>
            break;
        }

        buffer[i++] = c;
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	1c5a      	adds	r2, r3, #1
 80004ba:	617a      	str	r2, [r7, #20]
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	7cfa      	ldrb	r2, [r7, #19]
 80004c2:	701a      	strb	r2, [r3, #0]
    while (i < max_len - 1) {
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3e3      	bcc.n	8000496 <SerialInputLine+0x12>
    }

    buffer[i] = '\0'; // Null-terminate
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	4413      	add	r3, r2
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
    // Call the receive callback if it's set
    if (serial_port->receive_callback != NULL) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d004      	beq.n	80004ea <SerialInputLine+0x66>
        serial_port->receive_callback(buffer, i);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004e4:	6979      	ldr	r1, [r7, #20]
 80004e6:	68f8      	ldr	r0, [r7, #12]
 80004e8:	4798      	blx	r3
    }
}
 80004ea:	bf00      	nop
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <SerialSetReceiveCallback>:

void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	683a      	ldr	r2, [r7, #0]
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00a      	b.n	8000536 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000520:	f7ff fec0 	bl	80002a4 <__io_getchar>
 8000524:	4601      	mov	r1, r0
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	60ba      	str	r2, [r7, #8]
 800052c:	b2ca      	uxtb	r2, r1
 800052e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbf0      	blt.n	8000520 <_read+0x12>
	}

return len;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e009      	b.n	800056e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	60ba      	str	r2, [r7, #8]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe8c 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbf1      	blt.n	800055a <_write+0x12>
	}
	return len;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_close>:

int _close(int file)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	return -1;
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a8:	605a      	str	r2, [r3, #4]
	return 0;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_isatty>:

int _isatty(int file)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	return 1;
 80005c0:	2301      	movs	r3, #1
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
	return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f000 f980 	bl	800091c <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000a000 	.word	0x2000a000
 8000648:	00000400 	.word	0x00000400
 800064c:	200000a4 	.word	0x200000a4
 8000650:	200001f8 	.word	0x200001f8

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	@ (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 f951 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fe2d 	bl	80002e4 <main>

0800068a <LoopForever>:

LoopForever:
    b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000698:	08001670 	.word	0x08001670
  ldr r2, =_sbss
 800069c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80006a0:	200001f4 	.word	0x200001f4

080006a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC1_2_IRQHandler>
	...

080006a8 <std>:
 80006a8:	2300      	movs	r3, #0
 80006aa:	b510      	push	{r4, lr}
 80006ac:	4604      	mov	r4, r0
 80006ae:	e9c0 3300 	strd	r3, r3, [r0]
 80006b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006b6:	6083      	str	r3, [r0, #8]
 80006b8:	8181      	strh	r1, [r0, #12]
 80006ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80006bc:	81c2      	strh	r2, [r0, #14]
 80006be:	6183      	str	r3, [r0, #24]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2208      	movs	r2, #8
 80006c4:	305c      	adds	r0, #92	@ 0x5c
 80006c6:	f000 f921 	bl	800090c <memset>
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <std+0x58>)
 80006cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <std+0x5c>)
 80006d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <std+0x60>)
 80006d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <std+0x64>)
 80006d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x68>)
 80006dc:	6224      	str	r4, [r4, #32]
 80006de:	429c      	cmp	r4, r3
 80006e0:	d006      	beq.n	80006f0 <std+0x48>
 80006e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006e6:	4294      	cmp	r4, r2
 80006e8:	d002      	beq.n	80006f0 <std+0x48>
 80006ea:	33d0      	adds	r3, #208	@ 0xd0
 80006ec:	429c      	cmp	r4, r3
 80006ee:	d105      	bne.n	80006fc <std+0x54>
 80006f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f8:	f000 b93a 	b.w	8000970 <__retarget_lock_init_recursive>
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	bf00      	nop
 8000700:	080011c5 	.word	0x080011c5
 8000704:	080011e7 	.word	0x080011e7
 8000708:	0800121f 	.word	0x0800121f
 800070c:	08001243 	.word	0x08001243
 8000710:	200000a8 	.word	0x200000a8

08000714 <stdio_exit_handler>:
 8000714:	4a02      	ldr	r2, [pc, #8]	@ (8000720 <stdio_exit_handler+0xc>)
 8000716:	4903      	ldr	r1, [pc, #12]	@ (8000724 <stdio_exit_handler+0x10>)
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <stdio_exit_handler+0x14>)
 800071a:	f000 b869 	b.w	80007f0 <_fwalk_sglue>
 800071e:	bf00      	nop
 8000720:	2000002c 	.word	0x2000002c
 8000724:	0800115d 	.word	0x0800115d
 8000728:	2000003c 	.word	0x2000003c

0800072c <cleanup_stdio>:
 800072c:	6841      	ldr	r1, [r0, #4]
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <cleanup_stdio+0x34>)
 8000730:	4299      	cmp	r1, r3
 8000732:	b510      	push	{r4, lr}
 8000734:	4604      	mov	r4, r0
 8000736:	d001      	beq.n	800073c <cleanup_stdio+0x10>
 8000738:	f000 fd10 	bl	800115c <_fflush_r>
 800073c:	68a1      	ldr	r1, [r4, #8]
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <cleanup_stdio+0x38>)
 8000740:	4299      	cmp	r1, r3
 8000742:	d002      	beq.n	800074a <cleanup_stdio+0x1e>
 8000744:	4620      	mov	r0, r4
 8000746:	f000 fd09 	bl	800115c <_fflush_r>
 800074a:	68e1      	ldr	r1, [r4, #12]
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <cleanup_stdio+0x3c>)
 800074e:	4299      	cmp	r1, r3
 8000750:	d004      	beq.n	800075c <cleanup_stdio+0x30>
 8000752:	4620      	mov	r0, r4
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f000 bd00 	b.w	800115c <_fflush_r>
 800075c:	bd10      	pop	{r4, pc}
 800075e:	bf00      	nop
 8000760:	200000a8 	.word	0x200000a8
 8000764:	20000110 	.word	0x20000110
 8000768:	20000178 	.word	0x20000178

0800076c <global_stdio_init.part.0>:
 800076c:	b510      	push	{r4, lr}
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <global_stdio_init.part.0+0x30>)
 8000770:	4c0b      	ldr	r4, [pc, #44]	@ (80007a0 <global_stdio_init.part.0+0x34>)
 8000772:	4a0c      	ldr	r2, [pc, #48]	@ (80007a4 <global_stdio_init.part.0+0x38>)
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4620      	mov	r0, r4
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	f7ff ff94 	bl	80006a8 <std>
 8000780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000784:	2201      	movs	r2, #1
 8000786:	2109      	movs	r1, #9
 8000788:	f7ff ff8e 	bl	80006a8 <std>
 800078c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000790:	2202      	movs	r2, #2
 8000792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000796:	2112      	movs	r1, #18
 8000798:	f7ff bf86 	b.w	80006a8 <std>
 800079c:	200001e0 	.word	0x200001e0
 80007a0:	200000a8 	.word	0x200000a8
 80007a4:	08000715 	.word	0x08000715

080007a8 <__sfp_lock_acquire>:
 80007a8:	4801      	ldr	r0, [pc, #4]	@ (80007b0 <__sfp_lock_acquire+0x8>)
 80007aa:	f000 b8e2 	b.w	8000972 <__retarget_lock_acquire_recursive>
 80007ae:	bf00      	nop
 80007b0:	200001e5 	.word	0x200001e5

080007b4 <__sfp_lock_release>:
 80007b4:	4801      	ldr	r0, [pc, #4]	@ (80007bc <__sfp_lock_release+0x8>)
 80007b6:	f000 b8dd 	b.w	8000974 <__retarget_lock_release_recursive>
 80007ba:	bf00      	nop
 80007bc:	200001e5 	.word	0x200001e5

080007c0 <__sinit>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
 80007c4:	f7ff fff0 	bl	80007a8 <__sfp_lock_acquire>
 80007c8:	6a23      	ldr	r3, [r4, #32]
 80007ca:	b11b      	cbz	r3, 80007d4 <__sinit+0x14>
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f7ff bff0 	b.w	80007b4 <__sfp_lock_release>
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <__sinit+0x28>)
 80007d6:	6223      	str	r3, [r4, #32]
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <__sinit+0x2c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f5      	bne.n	80007cc <__sinit+0xc>
 80007e0:	f7ff ffc4 	bl	800076c <global_stdio_init.part.0>
 80007e4:	e7f2      	b.n	80007cc <__sinit+0xc>
 80007e6:	bf00      	nop
 80007e8:	0800072d 	.word	0x0800072d
 80007ec:	200001e0 	.word	0x200001e0

080007f0 <_fwalk_sglue>:
 80007f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f4:	4607      	mov	r7, r0
 80007f6:	4688      	mov	r8, r1
 80007f8:	4614      	mov	r4, r2
 80007fa:	2600      	movs	r6, #0
 80007fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000800:	f1b9 0901 	subs.w	r9, r9, #1
 8000804:	d505      	bpl.n	8000812 <_fwalk_sglue+0x22>
 8000806:	6824      	ldr	r4, [r4, #0]
 8000808:	2c00      	cmp	r4, #0
 800080a:	d1f7      	bne.n	80007fc <_fwalk_sglue+0xc>
 800080c:	4630      	mov	r0, r6
 800080e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000812:	89ab      	ldrh	r3, [r5, #12]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d907      	bls.n	8000828 <_fwalk_sglue+0x38>
 8000818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800081c:	3301      	adds	r3, #1
 800081e:	d003      	beq.n	8000828 <_fwalk_sglue+0x38>
 8000820:	4629      	mov	r1, r5
 8000822:	4638      	mov	r0, r7
 8000824:	47c0      	blx	r8
 8000826:	4306      	orrs	r6, r0
 8000828:	3568      	adds	r5, #104	@ 0x68
 800082a:	e7e9      	b.n	8000800 <_fwalk_sglue+0x10>

0800082c <iprintf>:
 800082c:	b40f      	push	{r0, r1, r2, r3}
 800082e:	b507      	push	{r0, r1, r2, lr}
 8000830:	4906      	ldr	r1, [pc, #24]	@ (800084c <iprintf+0x20>)
 8000832:	ab04      	add	r3, sp, #16
 8000834:	6808      	ldr	r0, [r1, #0]
 8000836:	f853 2b04 	ldr.w	r2, [r3], #4
 800083a:	6881      	ldr	r1, [r0, #8]
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	f000 f8c3 	bl	80009c8 <_vfiprintf_r>
 8000842:	b003      	add	sp, #12
 8000844:	f85d eb04 	ldr.w	lr, [sp], #4
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr
 800084c:	20000038 	.word	0x20000038

08000850 <_puts_r>:
 8000850:	6a03      	ldr	r3, [r0, #32]
 8000852:	b570      	push	{r4, r5, r6, lr}
 8000854:	6884      	ldr	r4, [r0, #8]
 8000856:	4605      	mov	r5, r0
 8000858:	460e      	mov	r6, r1
 800085a:	b90b      	cbnz	r3, 8000860 <_puts_r+0x10>
 800085c:	f7ff ffb0 	bl	80007c0 <__sinit>
 8000860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000862:	07db      	lsls	r3, r3, #31
 8000864:	d405      	bmi.n	8000872 <_puts_r+0x22>
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	0598      	lsls	r0, r3, #22
 800086a:	d402      	bmi.n	8000872 <_puts_r+0x22>
 800086c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800086e:	f000 f880 	bl	8000972 <__retarget_lock_acquire_recursive>
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	0719      	lsls	r1, r3, #28
 8000876:	d502      	bpl.n	800087e <_puts_r+0x2e>
 8000878:	6923      	ldr	r3, [r4, #16]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d135      	bne.n	80008ea <_puts_r+0x9a>
 800087e:	4621      	mov	r1, r4
 8000880:	4628      	mov	r0, r5
 8000882:	f000 fd21 	bl	80012c8 <__swsetup_r>
 8000886:	b380      	cbz	r0, 80008ea <_puts_r+0x9a>
 8000888:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800088c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800088e:	07da      	lsls	r2, r3, #31
 8000890:	d405      	bmi.n	800089e <_puts_r+0x4e>
 8000892:	89a3      	ldrh	r3, [r4, #12]
 8000894:	059b      	lsls	r3, r3, #22
 8000896:	d402      	bmi.n	800089e <_puts_r+0x4e>
 8000898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800089a:	f000 f86b 	bl	8000974 <__retarget_lock_release_recursive>
 800089e:	4628      	mov	r0, r5
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da04      	bge.n	80008b0 <_puts_r+0x60>
 80008a6:	69a2      	ldr	r2, [r4, #24]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dc17      	bgt.n	80008dc <_puts_r+0x8c>
 80008ac:	290a      	cmp	r1, #10
 80008ae:	d015      	beq.n	80008dc <_puts_r+0x8c>
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	6022      	str	r2, [r4, #0]
 80008b6:	7019      	strb	r1, [r3, #0]
 80008b8:	68a3      	ldr	r3, [r4, #8]
 80008ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008be:	3b01      	subs	r3, #1
 80008c0:	60a3      	str	r3, [r4, #8]
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d1ed      	bne.n	80008a2 <_puts_r+0x52>
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da11      	bge.n	80008ee <_puts_r+0x9e>
 80008ca:	4622      	mov	r2, r4
 80008cc:	210a      	movs	r1, #10
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 fcbb 	bl	800124a <__swbuf_r>
 80008d4:	3001      	adds	r0, #1
 80008d6:	d0d7      	beq.n	8000888 <_puts_r+0x38>
 80008d8:	250a      	movs	r5, #10
 80008da:	e7d7      	b.n	800088c <_puts_r+0x3c>
 80008dc:	4622      	mov	r2, r4
 80008de:	4628      	mov	r0, r5
 80008e0:	f000 fcb3 	bl	800124a <__swbuf_r>
 80008e4:	3001      	adds	r0, #1
 80008e6:	d1e7      	bne.n	80008b8 <_puts_r+0x68>
 80008e8:	e7ce      	b.n	8000888 <_puts_r+0x38>
 80008ea:	3e01      	subs	r6, #1
 80008ec:	e7e4      	b.n	80008b8 <_puts_r+0x68>
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	6022      	str	r2, [r4, #0]
 80008f4:	220a      	movs	r2, #10
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e7ee      	b.n	80008d8 <_puts_r+0x88>
	...

080008fc <puts>:
 80008fc:	4b02      	ldr	r3, [pc, #8]	@ (8000908 <puts+0xc>)
 80008fe:	4601      	mov	r1, r0
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	f7ff bfa5 	b.w	8000850 <_puts_r>
 8000906:	bf00      	nop
 8000908:	20000038 	.word	0x20000038

0800090c <memset>:
 800090c:	4402      	add	r2, r0
 800090e:	4603      	mov	r3, r0
 8000910:	4293      	cmp	r3, r2
 8000912:	d100      	bne.n	8000916 <memset+0xa>
 8000914:	4770      	bx	lr
 8000916:	f803 1b01 	strb.w	r1, [r3], #1
 800091a:	e7f9      	b.n	8000910 <memset+0x4>

0800091c <__errno>:
 800091c:	4b01      	ldr	r3, [pc, #4]	@ (8000924 <__errno+0x8>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000038 	.word	0x20000038

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4d0d      	ldr	r5, [pc, #52]	@ (8000960 <__libc_init_array+0x38>)
 800092c:	4c0d      	ldr	r4, [pc, #52]	@ (8000964 <__libc_init_array+0x3c>)
 800092e:	1b64      	subs	r4, r4, r5
 8000930:	10a4      	asrs	r4, r4, #2
 8000932:	2600      	movs	r6, #0
 8000934:	42a6      	cmp	r6, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	4d0b      	ldr	r5, [pc, #44]	@ (8000968 <__libc_init_array+0x40>)
 800093a:	4c0c      	ldr	r4, [pc, #48]	@ (800096c <__libc_init_array+0x44>)
 800093c:	f000 fe3e 	bl	80015bc <_init>
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	10a4      	asrs	r4, r4, #2
 8000944:	2600      	movs	r6, #0
 8000946:	42a6      	cmp	r6, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000950:	4798      	blx	r3
 8000952:	3601      	adds	r6, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f855 3b04 	ldr.w	r3, [r5], #4
 800095a:	4798      	blx	r3
 800095c:	3601      	adds	r6, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	08001668 	.word	0x08001668
 8000964:	08001668 	.word	0x08001668
 8000968:	08001668 	.word	0x08001668
 800096c:	0800166c 	.word	0x0800166c

08000970 <__retarget_lock_init_recursive>:
 8000970:	4770      	bx	lr

08000972 <__retarget_lock_acquire_recursive>:
 8000972:	4770      	bx	lr

08000974 <__retarget_lock_release_recursive>:
 8000974:	4770      	bx	lr

08000976 <__sfputc_r>:
 8000976:	6893      	ldr	r3, [r2, #8]
 8000978:	3b01      	subs	r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	b410      	push	{r4}
 800097e:	6093      	str	r3, [r2, #8]
 8000980:	da08      	bge.n	8000994 <__sfputc_r+0x1e>
 8000982:	6994      	ldr	r4, [r2, #24]
 8000984:	42a3      	cmp	r3, r4
 8000986:	db01      	blt.n	800098c <__sfputc_r+0x16>
 8000988:	290a      	cmp	r1, #10
 800098a:	d103      	bne.n	8000994 <__sfputc_r+0x1e>
 800098c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000990:	f000 bc5b 	b.w	800124a <__swbuf_r>
 8000994:	6813      	ldr	r3, [r2, #0]
 8000996:	1c58      	adds	r0, r3, #1
 8000998:	6010      	str	r0, [r2, #0]
 800099a:	7019      	strb	r1, [r3, #0]
 800099c:	4608      	mov	r0, r1
 800099e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <__sfputs_r>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	4606      	mov	r6, r0
 80009a8:	460f      	mov	r7, r1
 80009aa:	4614      	mov	r4, r2
 80009ac:	18d5      	adds	r5, r2, r3
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	d101      	bne.n	80009b6 <__sfputs_r+0x12>
 80009b2:	2000      	movs	r0, #0
 80009b4:	e007      	b.n	80009c6 <__sfputs_r+0x22>
 80009b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009ba:	463a      	mov	r2, r7
 80009bc:	4630      	mov	r0, r6
 80009be:	f7ff ffda 	bl	8000976 <__sfputc_r>
 80009c2:	1c43      	adds	r3, r0, #1
 80009c4:	d1f3      	bne.n	80009ae <__sfputs_r+0xa>
 80009c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009c8 <_vfiprintf_r>:
 80009c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009cc:	460d      	mov	r5, r1
 80009ce:	b09d      	sub	sp, #116	@ 0x74
 80009d0:	4614      	mov	r4, r2
 80009d2:	4698      	mov	r8, r3
 80009d4:	4606      	mov	r6, r0
 80009d6:	b118      	cbz	r0, 80009e0 <_vfiprintf_r+0x18>
 80009d8:	6a03      	ldr	r3, [r0, #32]
 80009da:	b90b      	cbnz	r3, 80009e0 <_vfiprintf_r+0x18>
 80009dc:	f7ff fef0 	bl	80007c0 <__sinit>
 80009e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009e2:	07d9      	lsls	r1, r3, #31
 80009e4:	d405      	bmi.n	80009f2 <_vfiprintf_r+0x2a>
 80009e6:	89ab      	ldrh	r3, [r5, #12]
 80009e8:	059a      	lsls	r2, r3, #22
 80009ea:	d402      	bmi.n	80009f2 <_vfiprintf_r+0x2a>
 80009ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009ee:	f7ff ffc0 	bl	8000972 <__retarget_lock_acquire_recursive>
 80009f2:	89ab      	ldrh	r3, [r5, #12]
 80009f4:	071b      	lsls	r3, r3, #28
 80009f6:	d501      	bpl.n	80009fc <_vfiprintf_r+0x34>
 80009f8:	692b      	ldr	r3, [r5, #16]
 80009fa:	b99b      	cbnz	r3, 8000a24 <_vfiprintf_r+0x5c>
 80009fc:	4629      	mov	r1, r5
 80009fe:	4630      	mov	r0, r6
 8000a00:	f000 fc62 	bl	80012c8 <__swsetup_r>
 8000a04:	b170      	cbz	r0, 8000a24 <_vfiprintf_r+0x5c>
 8000a06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a08:	07dc      	lsls	r4, r3, #31
 8000a0a:	d504      	bpl.n	8000a16 <_vfiprintf_r+0x4e>
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a10:	b01d      	add	sp, #116	@ 0x74
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a16:	89ab      	ldrh	r3, [r5, #12]
 8000a18:	0598      	lsls	r0, r3, #22
 8000a1a:	d4f7      	bmi.n	8000a0c <_vfiprintf_r+0x44>
 8000a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a1e:	f7ff ffa9 	bl	8000974 <__retarget_lock_release_recursive>
 8000a22:	e7f3      	b.n	8000a0c <_vfiprintf_r+0x44>
 8000a24:	2300      	movs	r3, #0
 8000a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a28:	2320      	movs	r3, #32
 8000a2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a32:	2330      	movs	r3, #48	@ 0x30
 8000a34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000be4 <_vfiprintf_r+0x21c>
 8000a38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a3c:	f04f 0901 	mov.w	r9, #1
 8000a40:	4623      	mov	r3, r4
 8000a42:	469a      	mov	sl, r3
 8000a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a48:	b10a      	cbz	r2, 8000a4e <_vfiprintf_r+0x86>
 8000a4a:	2a25      	cmp	r2, #37	@ 0x25
 8000a4c:	d1f9      	bne.n	8000a42 <_vfiprintf_r+0x7a>
 8000a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a52:	d00b      	beq.n	8000a6c <_vfiprintf_r+0xa4>
 8000a54:	465b      	mov	r3, fp
 8000a56:	4622      	mov	r2, r4
 8000a58:	4629      	mov	r1, r5
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	f7ff ffa2 	bl	80009a4 <__sfputs_r>
 8000a60:	3001      	adds	r0, #1
 8000a62:	f000 80a7 	beq.w	8000bb4 <_vfiprintf_r+0x1ec>
 8000a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a68:	445a      	add	r2, fp
 8000a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 809f 	beq.w	8000bb4 <_vfiprintf_r+0x1ec>
 8000a76:	2300      	movs	r3, #0
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a80:	f10a 0a01 	add.w	sl, sl, #1
 8000a84:	9304      	str	r3, [sp, #16]
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a8e:	4654      	mov	r4, sl
 8000a90:	2205      	movs	r2, #5
 8000a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a96:	4853      	ldr	r0, [pc, #332]	@ (8000be4 <_vfiprintf_r+0x21c>)
 8000a98:	f7ff fba2 	bl	80001e0 <memchr>
 8000a9c:	9a04      	ldr	r2, [sp, #16]
 8000a9e:	b9d8      	cbnz	r0, 8000ad8 <_vfiprintf_r+0x110>
 8000aa0:	06d1      	lsls	r1, r2, #27
 8000aa2:	bf44      	itt	mi
 8000aa4:	2320      	movmi	r3, #32
 8000aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000aaa:	0713      	lsls	r3, r2, #28
 8000aac:	bf44      	itt	mi
 8000aae:	232b      	movmi	r3, #43	@ 0x2b
 8000ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aba:	d015      	beq.n	8000ae8 <_vfiprintf_r+0x120>
 8000abc:	9a07      	ldr	r2, [sp, #28]
 8000abe:	4654      	mov	r4, sl
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f04f 0c0a 	mov.w	ip, #10
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000acc:	3b30      	subs	r3, #48	@ 0x30
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d94b      	bls.n	8000b6a <_vfiprintf_r+0x1a2>
 8000ad2:	b1b0      	cbz	r0, 8000b02 <_vfiprintf_r+0x13a>
 8000ad4:	9207      	str	r2, [sp, #28]
 8000ad6:	e014      	b.n	8000b02 <_vfiprintf_r+0x13a>
 8000ad8:	eba0 0308 	sub.w	r3, r0, r8
 8000adc:	fa09 f303 	lsl.w	r3, r9, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	9304      	str	r3, [sp, #16]
 8000ae4:	46a2      	mov	sl, r4
 8000ae6:	e7d2      	b.n	8000a8e <_vfiprintf_r+0xc6>
 8000ae8:	9b03      	ldr	r3, [sp, #12]
 8000aea:	1d19      	adds	r1, r3, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	9103      	str	r1, [sp, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bfbb      	ittet	lt
 8000af4:	425b      	neglt	r3, r3
 8000af6:	f042 0202 	orrlt.w	r2, r2, #2
 8000afa:	9307      	strge	r3, [sp, #28]
 8000afc:	9307      	strlt	r3, [sp, #28]
 8000afe:	bfb8      	it	lt
 8000b00:	9204      	strlt	r2, [sp, #16]
 8000b02:	7823      	ldrb	r3, [r4, #0]
 8000b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b06:	d10a      	bne.n	8000b1e <_vfiprintf_r+0x156>
 8000b08:	7863      	ldrb	r3, [r4, #1]
 8000b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b0c:	d132      	bne.n	8000b74 <_vfiprintf_r+0x1ac>
 8000b0e:	9b03      	ldr	r3, [sp, #12]
 8000b10:	1d1a      	adds	r2, r3, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	9203      	str	r2, [sp, #12]
 8000b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b1a:	3402      	adds	r4, #2
 8000b1c:	9305      	str	r3, [sp, #20]
 8000b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000bf4 <_vfiprintf_r+0x22c>
 8000b22:	7821      	ldrb	r1, [r4, #0]
 8000b24:	2203      	movs	r2, #3
 8000b26:	4650      	mov	r0, sl
 8000b28:	f7ff fb5a 	bl	80001e0 <memchr>
 8000b2c:	b138      	cbz	r0, 8000b3e <_vfiprintf_r+0x176>
 8000b2e:	9b04      	ldr	r3, [sp, #16]
 8000b30:	eba0 000a 	sub.w	r0, r0, sl
 8000b34:	2240      	movs	r2, #64	@ 0x40
 8000b36:	4082      	lsls	r2, r0
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	3401      	adds	r4, #1
 8000b3c:	9304      	str	r3, [sp, #16]
 8000b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b42:	4829      	ldr	r0, [pc, #164]	@ (8000be8 <_vfiprintf_r+0x220>)
 8000b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b48:	2206      	movs	r2, #6
 8000b4a:	f7ff fb49 	bl	80001e0 <memchr>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d03f      	beq.n	8000bd2 <_vfiprintf_r+0x20a>
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <_vfiprintf_r+0x224>)
 8000b54:	bb1b      	cbnz	r3, 8000b9e <_vfiprintf_r+0x1d6>
 8000b56:	9b03      	ldr	r3, [sp, #12]
 8000b58:	3307      	adds	r3, #7
 8000b5a:	f023 0307 	bic.w	r3, r3, #7
 8000b5e:	3308      	adds	r3, #8
 8000b60:	9303      	str	r3, [sp, #12]
 8000b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b64:	443b      	add	r3, r7
 8000b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b68:	e76a      	b.n	8000a40 <_vfiprintf_r+0x78>
 8000b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b6e:	460c      	mov	r4, r1
 8000b70:	2001      	movs	r0, #1
 8000b72:	e7a8      	b.n	8000ac6 <_vfiprintf_r+0xfe>
 8000b74:	2300      	movs	r3, #0
 8000b76:	3401      	adds	r4, #1
 8000b78:	9305      	str	r3, [sp, #20]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 0c0a 	mov.w	ip, #10
 8000b80:	4620      	mov	r0, r4
 8000b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b86:	3a30      	subs	r2, #48	@ 0x30
 8000b88:	2a09      	cmp	r2, #9
 8000b8a:	d903      	bls.n	8000b94 <_vfiprintf_r+0x1cc>
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0c6      	beq.n	8000b1e <_vfiprintf_r+0x156>
 8000b90:	9105      	str	r1, [sp, #20]
 8000b92:	e7c4      	b.n	8000b1e <_vfiprintf_r+0x156>
 8000b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b98:	4604      	mov	r4, r0
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e7f0      	b.n	8000b80 <_vfiprintf_r+0x1b8>
 8000b9e:	ab03      	add	r3, sp, #12
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	462a      	mov	r2, r5
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <_vfiprintf_r+0x228>)
 8000ba6:	a904      	add	r1, sp, #16
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f3af 8000 	nop.w
 8000bae:	4607      	mov	r7, r0
 8000bb0:	1c78      	adds	r0, r7, #1
 8000bb2:	d1d6      	bne.n	8000b62 <_vfiprintf_r+0x19a>
 8000bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bb6:	07d9      	lsls	r1, r3, #31
 8000bb8:	d405      	bmi.n	8000bc6 <_vfiprintf_r+0x1fe>
 8000bba:	89ab      	ldrh	r3, [r5, #12]
 8000bbc:	059a      	lsls	r2, r3, #22
 8000bbe:	d402      	bmi.n	8000bc6 <_vfiprintf_r+0x1fe>
 8000bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bc2:	f7ff fed7 	bl	8000974 <__retarget_lock_release_recursive>
 8000bc6:	89ab      	ldrh	r3, [r5, #12]
 8000bc8:	065b      	lsls	r3, r3, #25
 8000bca:	f53f af1f 	bmi.w	8000a0c <_vfiprintf_r+0x44>
 8000bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000bd0:	e71e      	b.n	8000a10 <_vfiprintf_r+0x48>
 8000bd2:	ab03      	add	r3, sp, #12
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	462a      	mov	r2, r5
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <_vfiprintf_r+0x228>)
 8000bda:	a904      	add	r1, sp, #16
 8000bdc:	4630      	mov	r0, r6
 8000bde:	f000 f91b 	bl	8000e18 <_printf_i>
 8000be2:	e7e4      	b.n	8000bae <_vfiprintf_r+0x1e6>
 8000be4:	0800162b 	.word	0x0800162b
 8000be8:	08001635 	.word	0x08001635
 8000bec:	00000000 	.word	0x00000000
 8000bf0:	080009a5 	.word	0x080009a5
 8000bf4:	08001631 	.word	0x08001631

08000bf8 <sbrk_aligned>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8000c38 <sbrk_aligned+0x40>)
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	6831      	ldr	r1, [r6, #0]
 8000c00:	4605      	mov	r5, r0
 8000c02:	b911      	cbnz	r1, 8000c0a <sbrk_aligned+0x12>
 8000c04:	f000 fc4c 	bl	80014a0 <_sbrk_r>
 8000c08:	6030      	str	r0, [r6, #0]
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f000 fc47 	bl	80014a0 <_sbrk_r>
 8000c12:	1c43      	adds	r3, r0, #1
 8000c14:	d103      	bne.n	8000c1e <sbrk_aligned+0x26>
 8000c16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	bd70      	pop	{r4, r5, r6, pc}
 8000c1e:	1cc4      	adds	r4, r0, #3
 8000c20:	f024 0403 	bic.w	r4, r4, #3
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d0f8      	beq.n	8000c1a <sbrk_aligned+0x22>
 8000c28:	1a21      	subs	r1, r4, r0
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f000 fc38 	bl	80014a0 <_sbrk_r>
 8000c30:	3001      	adds	r0, #1
 8000c32:	d1f2      	bne.n	8000c1a <sbrk_aligned+0x22>
 8000c34:	e7ef      	b.n	8000c16 <sbrk_aligned+0x1e>
 8000c36:	bf00      	nop
 8000c38:	200001e8 	.word	0x200001e8

08000c3c <_malloc_r>:
 8000c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c40:	1ccd      	adds	r5, r1, #3
 8000c42:	f025 0503 	bic.w	r5, r5, #3
 8000c46:	3508      	adds	r5, #8
 8000c48:	2d0c      	cmp	r5, #12
 8000c4a:	bf38      	it	cc
 8000c4c:	250c      	movcc	r5, #12
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	4606      	mov	r6, r0
 8000c52:	db01      	blt.n	8000c58 <_malloc_r+0x1c>
 8000c54:	42a9      	cmp	r1, r5
 8000c56:	d904      	bls.n	8000c62 <_malloc_r+0x26>
 8000c58:	230c      	movs	r3, #12
 8000c5a:	6033      	str	r3, [r6, #0]
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d38 <_malloc_r+0xfc>
 8000c66:	f000 faa1 	bl	80011ac <__malloc_lock>
 8000c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6e:	461c      	mov	r4, r3
 8000c70:	bb44      	cbnz	r4, 8000cc4 <_malloc_r+0x88>
 8000c72:	4629      	mov	r1, r5
 8000c74:	4630      	mov	r0, r6
 8000c76:	f7ff ffbf 	bl	8000bf8 <sbrk_aligned>
 8000c7a:	1c43      	adds	r3, r0, #1
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	d158      	bne.n	8000d32 <_malloc_r+0xf6>
 8000c80:	f8d8 4000 	ldr.w	r4, [r8]
 8000c84:	4627      	mov	r7, r4
 8000c86:	2f00      	cmp	r7, #0
 8000c88:	d143      	bne.n	8000d12 <_malloc_r+0xd6>
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d04b      	beq.n	8000d26 <_malloc_r+0xea>
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	4639      	mov	r1, r7
 8000c92:	4630      	mov	r0, r6
 8000c94:	eb04 0903 	add.w	r9, r4, r3
 8000c98:	f000 fc02 	bl	80014a0 <_sbrk_r>
 8000c9c:	4581      	cmp	r9, r0
 8000c9e:	d142      	bne.n	8000d26 <_malloc_r+0xea>
 8000ca0:	6821      	ldr	r1, [r4, #0]
 8000ca2:	1a6d      	subs	r5, r5, r1
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f7ff ffa6 	bl	8000bf8 <sbrk_aligned>
 8000cac:	3001      	adds	r0, #1
 8000cae:	d03a      	beq.n	8000d26 <_malloc_r+0xea>
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	442b      	add	r3, r5
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	bb62      	cbnz	r2, 8000d18 <_malloc_r+0xdc>
 8000cbe:	f8c8 7000 	str.w	r7, [r8]
 8000cc2:	e00f      	b.n	8000ce4 <_malloc_r+0xa8>
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	1b52      	subs	r2, r2, r5
 8000cc8:	d420      	bmi.n	8000d0c <_malloc_r+0xd0>
 8000cca:	2a0b      	cmp	r2, #11
 8000ccc:	d917      	bls.n	8000cfe <_malloc_r+0xc2>
 8000cce:	1961      	adds	r1, r4, r5
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	6025      	str	r5, [r4, #0]
 8000cd4:	bf18      	it	ne
 8000cd6:	6059      	strne	r1, [r3, #4]
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	bf08      	it	eq
 8000cdc:	f8c8 1000 	streq.w	r1, [r8]
 8000ce0:	5162      	str	r2, [r4, r5]
 8000ce2:	604b      	str	r3, [r1, #4]
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f000 fa67 	bl	80011b8 <__malloc_unlock>
 8000cea:	f104 000b 	add.w	r0, r4, #11
 8000cee:	1d23      	adds	r3, r4, #4
 8000cf0:	f020 0007 	bic.w	r0, r0, #7
 8000cf4:	1ac2      	subs	r2, r0, r3
 8000cf6:	bf1c      	itt	ne
 8000cf8:	1a1b      	subne	r3, r3, r0
 8000cfa:	50a3      	strne	r3, [r4, r2]
 8000cfc:	e7af      	b.n	8000c5e <_malloc_r+0x22>
 8000cfe:	6862      	ldr	r2, [r4, #4]
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	bf0c      	ite	eq
 8000d04:	f8c8 2000 	streq.w	r2, [r8]
 8000d08:	605a      	strne	r2, [r3, #4]
 8000d0a:	e7eb      	b.n	8000ce4 <_malloc_r+0xa8>
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	6864      	ldr	r4, [r4, #4]
 8000d10:	e7ae      	b.n	8000c70 <_malloc_r+0x34>
 8000d12:	463c      	mov	r4, r7
 8000d14:	687f      	ldr	r7, [r7, #4]
 8000d16:	e7b6      	b.n	8000c86 <_malloc_r+0x4a>
 8000d18:	461a      	mov	r2, r3
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d1fb      	bne.n	8000d18 <_malloc_r+0xdc>
 8000d20:	2300      	movs	r3, #0
 8000d22:	6053      	str	r3, [r2, #4]
 8000d24:	e7de      	b.n	8000ce4 <_malloc_r+0xa8>
 8000d26:	230c      	movs	r3, #12
 8000d28:	6033      	str	r3, [r6, #0]
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	f000 fa44 	bl	80011b8 <__malloc_unlock>
 8000d30:	e794      	b.n	8000c5c <_malloc_r+0x20>
 8000d32:	6005      	str	r5, [r0, #0]
 8000d34:	e7d6      	b.n	8000ce4 <_malloc_r+0xa8>
 8000d36:	bf00      	nop
 8000d38:	200001ec 	.word	0x200001ec

08000d3c <_printf_common>:
 8000d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d40:	4616      	mov	r6, r2
 8000d42:	4698      	mov	r8, r3
 8000d44:	688a      	ldr	r2, [r1, #8]
 8000d46:	690b      	ldr	r3, [r1, #16]
 8000d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	bfb8      	it	lt
 8000d50:	4613      	movlt	r3, r2
 8000d52:	6033      	str	r3, [r6, #0]
 8000d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d58:	4607      	mov	r7, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	b10a      	cbz	r2, 8000d62 <_printf_common+0x26>
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	0699      	lsls	r1, r3, #26
 8000d66:	bf42      	ittt	mi
 8000d68:	6833      	ldrmi	r3, [r6, #0]
 8000d6a:	3302      	addmi	r3, #2
 8000d6c:	6033      	strmi	r3, [r6, #0]
 8000d6e:	6825      	ldr	r5, [r4, #0]
 8000d70:	f015 0506 	ands.w	r5, r5, #6
 8000d74:	d106      	bne.n	8000d84 <_printf_common+0x48>
 8000d76:	f104 0a19 	add.w	sl, r4, #25
 8000d7a:	68e3      	ldr	r3, [r4, #12]
 8000d7c:	6832      	ldr	r2, [r6, #0]
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	dc26      	bgt.n	8000dd2 <_printf_common+0x96>
 8000d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d88:	6822      	ldr	r2, [r4, #0]
 8000d8a:	3b00      	subs	r3, #0
 8000d8c:	bf18      	it	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	0692      	lsls	r2, r2, #26
 8000d92:	d42b      	bmi.n	8000dec <_printf_common+0xb0>
 8000d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d98:	4641      	mov	r1, r8
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	47c8      	blx	r9
 8000d9e:	3001      	adds	r0, #1
 8000da0:	d01e      	beq.n	8000de0 <_printf_common+0xa4>
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	6922      	ldr	r2, [r4, #16]
 8000da6:	f003 0306 	and.w	r3, r3, #6
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf02      	ittt	eq
 8000dae:	68e5      	ldreq	r5, [r4, #12]
 8000db0:	6833      	ldreq	r3, [r6, #0]
 8000db2:	1aed      	subeq	r5, r5, r3
 8000db4:	68a3      	ldr	r3, [r4, #8]
 8000db6:	bf0c      	ite	eq
 8000db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dbc:	2500      	movne	r5, #0
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bfc4      	itt	gt
 8000dc2:	1a9b      	subgt	r3, r3, r2
 8000dc4:	18ed      	addgt	r5, r5, r3
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	341a      	adds	r4, #26
 8000dca:	42b5      	cmp	r5, r6
 8000dcc:	d11a      	bne.n	8000e04 <_printf_common+0xc8>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	e008      	b.n	8000de4 <_printf_common+0xa8>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	4638      	mov	r0, r7
 8000dda:	47c8      	blx	r9
 8000ddc:	3001      	adds	r0, #1
 8000dde:	d103      	bne.n	8000de8 <_printf_common+0xac>
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	3501      	adds	r5, #1
 8000dea:	e7c6      	b.n	8000d7a <_printf_common+0x3e>
 8000dec:	18e1      	adds	r1, r4, r3
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	2030      	movs	r0, #48	@ 0x30
 8000df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000df6:	4422      	add	r2, r4
 8000df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e00:	3302      	adds	r3, #2
 8000e02:	e7c7      	b.n	8000d94 <_printf_common+0x58>
 8000e04:	2301      	movs	r3, #1
 8000e06:	4622      	mov	r2, r4
 8000e08:	4641      	mov	r1, r8
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	47c8      	blx	r9
 8000e0e:	3001      	adds	r0, #1
 8000e10:	d0e6      	beq.n	8000de0 <_printf_common+0xa4>
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7d9      	b.n	8000dca <_printf_common+0x8e>
	...

08000e18 <_printf_i>:
 8000e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	7e0f      	ldrb	r7, [r1, #24]
 8000e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e20:	2f78      	cmp	r7, #120	@ 0x78
 8000e22:	4691      	mov	r9, r2
 8000e24:	4680      	mov	r8, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	469a      	mov	sl, r3
 8000e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e2e:	d807      	bhi.n	8000e40 <_printf_i+0x28>
 8000e30:	2f62      	cmp	r7, #98	@ 0x62
 8000e32:	d80a      	bhi.n	8000e4a <_printf_i+0x32>
 8000e34:	2f00      	cmp	r7, #0
 8000e36:	f000 80d1 	beq.w	8000fdc <_printf_i+0x1c4>
 8000e3a:	2f58      	cmp	r7, #88	@ 0x58
 8000e3c:	f000 80b8 	beq.w	8000fb0 <_printf_i+0x198>
 8000e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e48:	e03a      	b.n	8000ec0 <_printf_i+0xa8>
 8000e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e4e:	2b15      	cmp	r3, #21
 8000e50:	d8f6      	bhi.n	8000e40 <_printf_i+0x28>
 8000e52:	a101      	add	r1, pc, #4	@ (adr r1, 8000e58 <_printf_i+0x40>)
 8000e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e58:	08000eb1 	.word	0x08000eb1
 8000e5c:	08000ec5 	.word	0x08000ec5
 8000e60:	08000e41 	.word	0x08000e41
 8000e64:	08000e41 	.word	0x08000e41
 8000e68:	08000e41 	.word	0x08000e41
 8000e6c:	08000e41 	.word	0x08000e41
 8000e70:	08000ec5 	.word	0x08000ec5
 8000e74:	08000e41 	.word	0x08000e41
 8000e78:	08000e41 	.word	0x08000e41
 8000e7c:	08000e41 	.word	0x08000e41
 8000e80:	08000e41 	.word	0x08000e41
 8000e84:	08000fc3 	.word	0x08000fc3
 8000e88:	08000eef 	.word	0x08000eef
 8000e8c:	08000f7d 	.word	0x08000f7d
 8000e90:	08000e41 	.word	0x08000e41
 8000e94:	08000e41 	.word	0x08000e41
 8000e98:	08000fe5 	.word	0x08000fe5
 8000e9c:	08000e41 	.word	0x08000e41
 8000ea0:	08000eef 	.word	0x08000eef
 8000ea4:	08000e41 	.word	0x08000e41
 8000ea8:	08000e41 	.word	0x08000e41
 8000eac:	08000f85 	.word	0x08000f85
 8000eb0:	6833      	ldr	r3, [r6, #0]
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6032      	str	r2, [r6, #0]
 8000eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e09c      	b.n	8000ffe <_printf_i+0x1e6>
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	6820      	ldr	r0, [r4, #0]
 8000ec8:	1d19      	adds	r1, r3, #4
 8000eca:	6031      	str	r1, [r6, #0]
 8000ecc:	0606      	lsls	r6, r0, #24
 8000ece:	d501      	bpl.n	8000ed4 <_printf_i+0xbc>
 8000ed0:	681d      	ldr	r5, [r3, #0]
 8000ed2:	e003      	b.n	8000edc <_printf_i+0xc4>
 8000ed4:	0645      	lsls	r5, r0, #25
 8000ed6:	d5fb      	bpl.n	8000ed0 <_printf_i+0xb8>
 8000ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	da03      	bge.n	8000ee8 <_printf_i+0xd0>
 8000ee0:	232d      	movs	r3, #45	@ 0x2d
 8000ee2:	426d      	negs	r5, r5
 8000ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ee8:	4858      	ldr	r0, [pc, #352]	@ (800104c <_printf_i+0x234>)
 8000eea:	230a      	movs	r3, #10
 8000eec:	e011      	b.n	8000f12 <_printf_i+0xfa>
 8000eee:	6821      	ldr	r1, [r4, #0]
 8000ef0:	6833      	ldr	r3, [r6, #0]
 8000ef2:	0608      	lsls	r0, r1, #24
 8000ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ef8:	d402      	bmi.n	8000f00 <_printf_i+0xe8>
 8000efa:	0649      	lsls	r1, r1, #25
 8000efc:	bf48      	it	mi
 8000efe:	b2ad      	uxthmi	r5, r5
 8000f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f02:	4852      	ldr	r0, [pc, #328]	@ (800104c <_printf_i+0x234>)
 8000f04:	6033      	str	r3, [r6, #0]
 8000f06:	bf14      	ite	ne
 8000f08:	230a      	movne	r3, #10
 8000f0a:	2308      	moveq	r3, #8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f12:	6866      	ldr	r6, [r4, #4]
 8000f14:	60a6      	str	r6, [r4, #8]
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	db05      	blt.n	8000f26 <_printf_i+0x10e>
 8000f1a:	6821      	ldr	r1, [r4, #0]
 8000f1c:	432e      	orrs	r6, r5
 8000f1e:	f021 0104 	bic.w	r1, r1, #4
 8000f22:	6021      	str	r1, [r4, #0]
 8000f24:	d04b      	beq.n	8000fbe <_printf_i+0x1a6>
 8000f26:	4616      	mov	r6, r2
 8000f28:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f2c:	fb03 5711 	mls	r7, r3, r1, r5
 8000f30:	5dc7      	ldrb	r7, [r0, r7]
 8000f32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f36:	462f      	mov	r7, r5
 8000f38:	42bb      	cmp	r3, r7
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	d9f4      	bls.n	8000f28 <_printf_i+0x110>
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d10b      	bne.n	8000f5a <_printf_i+0x142>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	07df      	lsls	r7, r3, #31
 8000f46:	d508      	bpl.n	8000f5a <_printf_i+0x142>
 8000f48:	6923      	ldr	r3, [r4, #16]
 8000f4a:	6861      	ldr	r1, [r4, #4]
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	bfde      	ittt	le
 8000f50:	2330      	movle	r3, #48	@ 0x30
 8000f52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f56:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f5a:	1b92      	subs	r2, r2, r6
 8000f5c:	6122      	str	r2, [r4, #16]
 8000f5e:	f8cd a000 	str.w	sl, [sp]
 8000f62:	464b      	mov	r3, r9
 8000f64:	aa03      	add	r2, sp, #12
 8000f66:	4621      	mov	r1, r4
 8000f68:	4640      	mov	r0, r8
 8000f6a:	f7ff fee7 	bl	8000d3c <_printf_common>
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d14a      	bne.n	8001008 <_printf_i+0x1f0>
 8000f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f76:	b004      	add	sp, #16
 8000f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	4832      	ldr	r0, [pc, #200]	@ (8001050 <_printf_i+0x238>)
 8000f86:	2778      	movs	r7, #120	@ 0x78
 8000f88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	6831      	ldr	r1, [r6, #0]
 8000f90:	061f      	lsls	r7, r3, #24
 8000f92:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f96:	d402      	bmi.n	8000f9e <_printf_i+0x186>
 8000f98:	065f      	lsls	r7, r3, #25
 8000f9a:	bf48      	it	mi
 8000f9c:	b2ad      	uxthmi	r5, r5
 8000f9e:	6031      	str	r1, [r6, #0]
 8000fa0:	07d9      	lsls	r1, r3, #31
 8000fa2:	bf44      	itt	mi
 8000fa4:	f043 0320 	orrmi.w	r3, r3, #32
 8000fa8:	6023      	strmi	r3, [r4, #0]
 8000faa:	b11d      	cbz	r5, 8000fb4 <_printf_i+0x19c>
 8000fac:	2310      	movs	r3, #16
 8000fae:	e7ad      	b.n	8000f0c <_printf_i+0xf4>
 8000fb0:	4826      	ldr	r0, [pc, #152]	@ (800104c <_printf_i+0x234>)
 8000fb2:	e7e9      	b.n	8000f88 <_printf_i+0x170>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	f023 0320 	bic.w	r3, r3, #32
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	e7f6      	b.n	8000fac <_printf_i+0x194>
 8000fbe:	4616      	mov	r6, r2
 8000fc0:	e7bd      	b.n	8000f3e <_printf_i+0x126>
 8000fc2:	6833      	ldr	r3, [r6, #0]
 8000fc4:	6825      	ldr	r5, [r4, #0]
 8000fc6:	6961      	ldr	r1, [r4, #20]
 8000fc8:	1d18      	adds	r0, r3, #4
 8000fca:	6030      	str	r0, [r6, #0]
 8000fcc:	062e      	lsls	r6, r5, #24
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	d501      	bpl.n	8000fd6 <_printf_i+0x1be>
 8000fd2:	6019      	str	r1, [r3, #0]
 8000fd4:	e002      	b.n	8000fdc <_printf_i+0x1c4>
 8000fd6:	0668      	lsls	r0, r5, #25
 8000fd8:	d5fb      	bpl.n	8000fd2 <_printf_i+0x1ba>
 8000fda:	8019      	strh	r1, [r3, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6123      	str	r3, [r4, #16]
 8000fe0:	4616      	mov	r6, r2
 8000fe2:	e7bc      	b.n	8000f5e <_printf_i+0x146>
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	1d1a      	adds	r2, r3, #4
 8000fe8:	6032      	str	r2, [r6, #0]
 8000fea:	681e      	ldr	r6, [r3, #0]
 8000fec:	6862      	ldr	r2, [r4, #4]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	f7ff f8f5 	bl	80001e0 <memchr>
 8000ff6:	b108      	cbz	r0, 8000ffc <_printf_i+0x1e4>
 8000ff8:	1b80      	subs	r0, r0, r6
 8000ffa:	6060      	str	r0, [r4, #4]
 8000ffc:	6863      	ldr	r3, [r4, #4]
 8000ffe:	6123      	str	r3, [r4, #16]
 8001000:	2300      	movs	r3, #0
 8001002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001006:	e7aa      	b.n	8000f5e <_printf_i+0x146>
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	4632      	mov	r2, r6
 800100c:	4649      	mov	r1, r9
 800100e:	4640      	mov	r0, r8
 8001010:	47d0      	blx	sl
 8001012:	3001      	adds	r0, #1
 8001014:	d0ad      	beq.n	8000f72 <_printf_i+0x15a>
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	079b      	lsls	r3, r3, #30
 800101a:	d413      	bmi.n	8001044 <_printf_i+0x22c>
 800101c:	68e0      	ldr	r0, [r4, #12]
 800101e:	9b03      	ldr	r3, [sp, #12]
 8001020:	4298      	cmp	r0, r3
 8001022:	bfb8      	it	lt
 8001024:	4618      	movlt	r0, r3
 8001026:	e7a6      	b.n	8000f76 <_printf_i+0x15e>
 8001028:	2301      	movs	r3, #1
 800102a:	4632      	mov	r2, r6
 800102c:	4649      	mov	r1, r9
 800102e:	4640      	mov	r0, r8
 8001030:	47d0      	blx	sl
 8001032:	3001      	adds	r0, #1
 8001034:	d09d      	beq.n	8000f72 <_printf_i+0x15a>
 8001036:	3501      	adds	r5, #1
 8001038:	68e3      	ldr	r3, [r4, #12]
 800103a:	9903      	ldr	r1, [sp, #12]
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	42ab      	cmp	r3, r5
 8001040:	dcf2      	bgt.n	8001028 <_printf_i+0x210>
 8001042:	e7eb      	b.n	800101c <_printf_i+0x204>
 8001044:	2500      	movs	r5, #0
 8001046:	f104 0619 	add.w	r6, r4, #25
 800104a:	e7f5      	b.n	8001038 <_printf_i+0x220>
 800104c:	0800163c 	.word	0x0800163c
 8001050:	0800164d 	.word	0x0800164d

08001054 <__sflush_r>:
 8001054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105c:	0716      	lsls	r6, r2, #28
 800105e:	4605      	mov	r5, r0
 8001060:	460c      	mov	r4, r1
 8001062:	d454      	bmi.n	800110e <__sflush_r+0xba>
 8001064:	684b      	ldr	r3, [r1, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dc02      	bgt.n	8001070 <__sflush_r+0x1c>
 800106a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	dd48      	ble.n	8001102 <__sflush_r+0xae>
 8001070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001072:	2e00      	cmp	r6, #0
 8001074:	d045      	beq.n	8001102 <__sflush_r+0xae>
 8001076:	2300      	movs	r3, #0
 8001078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800107c:	682f      	ldr	r7, [r5, #0]
 800107e:	6a21      	ldr	r1, [r4, #32]
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	d030      	beq.n	80010e6 <__sflush_r+0x92>
 8001084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	0759      	lsls	r1, r3, #29
 800108a:	d505      	bpl.n	8001098 <__sflush_r+0x44>
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001092:	b10b      	cbz	r3, 8001098 <__sflush_r+0x44>
 8001094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	2300      	movs	r3, #0
 800109a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800109c:	6a21      	ldr	r1, [r4, #32]
 800109e:	4628      	mov	r0, r5
 80010a0:	47b0      	blx	r6
 80010a2:	1c43      	adds	r3, r0, #1
 80010a4:	89a3      	ldrh	r3, [r4, #12]
 80010a6:	d106      	bne.n	80010b6 <__sflush_r+0x62>
 80010a8:	6829      	ldr	r1, [r5, #0]
 80010aa:	291d      	cmp	r1, #29
 80010ac:	d82b      	bhi.n	8001106 <__sflush_r+0xb2>
 80010ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001158 <__sflush_r+0x104>)
 80010b0:	40ca      	lsrs	r2, r1
 80010b2:	07d6      	lsls	r6, r2, #31
 80010b4:	d527      	bpl.n	8001106 <__sflush_r+0xb2>
 80010b6:	2200      	movs	r2, #0
 80010b8:	6062      	str	r2, [r4, #4]
 80010ba:	04d9      	lsls	r1, r3, #19
 80010bc:	6922      	ldr	r2, [r4, #16]
 80010be:	6022      	str	r2, [r4, #0]
 80010c0:	d504      	bpl.n	80010cc <__sflush_r+0x78>
 80010c2:	1c42      	adds	r2, r0, #1
 80010c4:	d101      	bne.n	80010ca <__sflush_r+0x76>
 80010c6:	682b      	ldr	r3, [r5, #0]
 80010c8:	b903      	cbnz	r3, 80010cc <__sflush_r+0x78>
 80010ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80010cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010ce:	602f      	str	r7, [r5, #0]
 80010d0:	b1b9      	cbz	r1, 8001102 <__sflush_r+0xae>
 80010d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010d6:	4299      	cmp	r1, r3
 80010d8:	d002      	beq.n	80010e0 <__sflush_r+0x8c>
 80010da:	4628      	mov	r0, r5
 80010dc:	f000 fa24 	bl	8001528 <_free_r>
 80010e0:	2300      	movs	r3, #0
 80010e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80010e4:	e00d      	b.n	8001102 <__sflush_r+0xae>
 80010e6:	2301      	movs	r3, #1
 80010e8:	4628      	mov	r0, r5
 80010ea:	47b0      	blx	r6
 80010ec:	4602      	mov	r2, r0
 80010ee:	1c50      	adds	r0, r2, #1
 80010f0:	d1c9      	bne.n	8001086 <__sflush_r+0x32>
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0c6      	beq.n	8001086 <__sflush_r+0x32>
 80010f8:	2b1d      	cmp	r3, #29
 80010fa:	d001      	beq.n	8001100 <__sflush_r+0xac>
 80010fc:	2b16      	cmp	r3, #22
 80010fe:	d11e      	bne.n	800113e <__sflush_r+0xea>
 8001100:	602f      	str	r7, [r5, #0]
 8001102:	2000      	movs	r0, #0
 8001104:	e022      	b.n	800114c <__sflush_r+0xf8>
 8001106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110a:	b21b      	sxth	r3, r3
 800110c:	e01b      	b.n	8001146 <__sflush_r+0xf2>
 800110e:	690f      	ldr	r7, [r1, #16]
 8001110:	2f00      	cmp	r7, #0
 8001112:	d0f6      	beq.n	8001102 <__sflush_r+0xae>
 8001114:	0793      	lsls	r3, r2, #30
 8001116:	680e      	ldr	r6, [r1, #0]
 8001118:	bf08      	it	eq
 800111a:	694b      	ldreq	r3, [r1, #20]
 800111c:	600f      	str	r7, [r1, #0]
 800111e:	bf18      	it	ne
 8001120:	2300      	movne	r3, #0
 8001122:	eba6 0807 	sub.w	r8, r6, r7
 8001126:	608b      	str	r3, [r1, #8]
 8001128:	f1b8 0f00 	cmp.w	r8, #0
 800112c:	dde9      	ble.n	8001102 <__sflush_r+0xae>
 800112e:	6a21      	ldr	r1, [r4, #32]
 8001130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001132:	4643      	mov	r3, r8
 8001134:	463a      	mov	r2, r7
 8001136:	4628      	mov	r0, r5
 8001138:	47b0      	blx	r6
 800113a:	2800      	cmp	r0, #0
 800113c:	dc08      	bgt.n	8001150 <__sflush_r+0xfc>
 800113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001146:	81a3      	strh	r3, [r4, #12]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001150:	4407      	add	r7, r0
 8001152:	eba8 0800 	sub.w	r8, r8, r0
 8001156:	e7e7      	b.n	8001128 <__sflush_r+0xd4>
 8001158:	20400001 	.word	0x20400001

0800115c <_fflush_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	690b      	ldr	r3, [r1, #16]
 8001160:	4605      	mov	r5, r0
 8001162:	460c      	mov	r4, r1
 8001164:	b913      	cbnz	r3, 800116c <_fflush_r+0x10>
 8001166:	2500      	movs	r5, #0
 8001168:	4628      	mov	r0, r5
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	b118      	cbz	r0, 8001176 <_fflush_r+0x1a>
 800116e:	6a03      	ldr	r3, [r0, #32]
 8001170:	b90b      	cbnz	r3, 8001176 <_fflush_r+0x1a>
 8001172:	f7ff fb25 	bl	80007c0 <__sinit>
 8001176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f3      	beq.n	8001166 <_fflush_r+0xa>
 800117e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001180:	07d0      	lsls	r0, r2, #31
 8001182:	d404      	bmi.n	800118e <_fflush_r+0x32>
 8001184:	0599      	lsls	r1, r3, #22
 8001186:	d402      	bmi.n	800118e <_fflush_r+0x32>
 8001188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800118a:	f7ff fbf2 	bl	8000972 <__retarget_lock_acquire_recursive>
 800118e:	4628      	mov	r0, r5
 8001190:	4621      	mov	r1, r4
 8001192:	f7ff ff5f 	bl	8001054 <__sflush_r>
 8001196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001198:	07da      	lsls	r2, r3, #31
 800119a:	4605      	mov	r5, r0
 800119c:	d4e4      	bmi.n	8001168 <_fflush_r+0xc>
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	059b      	lsls	r3, r3, #22
 80011a2:	d4e1      	bmi.n	8001168 <_fflush_r+0xc>
 80011a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011a6:	f7ff fbe5 	bl	8000974 <__retarget_lock_release_recursive>
 80011aa:	e7dd      	b.n	8001168 <_fflush_r+0xc>

080011ac <__malloc_lock>:
 80011ac:	4801      	ldr	r0, [pc, #4]	@ (80011b4 <__malloc_lock+0x8>)
 80011ae:	f7ff bbe0 	b.w	8000972 <__retarget_lock_acquire_recursive>
 80011b2:	bf00      	nop
 80011b4:	200001e4 	.word	0x200001e4

080011b8 <__malloc_unlock>:
 80011b8:	4801      	ldr	r0, [pc, #4]	@ (80011c0 <__malloc_unlock+0x8>)
 80011ba:	f7ff bbdb 	b.w	8000974 <__retarget_lock_release_recursive>
 80011be:	bf00      	nop
 80011c0:	200001e4 	.word	0x200001e4

080011c4 <__sread>:
 80011c4:	b510      	push	{r4, lr}
 80011c6:	460c      	mov	r4, r1
 80011c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011cc:	f000 f956 	bl	800147c <_read_r>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	bfab      	itete	ge
 80011d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80011d6:	89a3      	ldrhlt	r3, [r4, #12]
 80011d8:	181b      	addge	r3, r3, r0
 80011da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011de:	bfac      	ite	ge
 80011e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011e2:	81a3      	strhlt	r3, [r4, #12]
 80011e4:	bd10      	pop	{r4, pc}

080011e6 <__swrite>:
 80011e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ea:	461f      	mov	r7, r3
 80011ec:	898b      	ldrh	r3, [r1, #12]
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	4605      	mov	r5, r0
 80011f2:	460c      	mov	r4, r1
 80011f4:	4616      	mov	r6, r2
 80011f6:	d505      	bpl.n	8001204 <__swrite+0x1e>
 80011f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011fc:	2302      	movs	r3, #2
 80011fe:	2200      	movs	r2, #0
 8001200:	f000 f92a 	bl	8001458 <_lseek_r>
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800120a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800120e:	81a3      	strh	r3, [r4, #12]
 8001210:	4632      	mov	r2, r6
 8001212:	463b      	mov	r3, r7
 8001214:	4628      	mov	r0, r5
 8001216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800121a:	f000 b951 	b.w	80014c0 <_write_r>

0800121e <__sseek>:
 800121e:	b510      	push	{r4, lr}
 8001220:	460c      	mov	r4, r1
 8001222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001226:	f000 f917 	bl	8001458 <_lseek_r>
 800122a:	1c43      	adds	r3, r0, #1
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	bf15      	itete	ne
 8001230:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800123a:	81a3      	strheq	r3, [r4, #12]
 800123c:	bf18      	it	ne
 800123e:	81a3      	strhne	r3, [r4, #12]
 8001240:	bd10      	pop	{r4, pc}

08001242 <__sclose>:
 8001242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001246:	f000 b94d 	b.w	80014e4 <_close_r>

0800124a <__swbuf_r>:
 800124a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124c:	460e      	mov	r6, r1
 800124e:	4614      	mov	r4, r2
 8001250:	4605      	mov	r5, r0
 8001252:	b118      	cbz	r0, 800125c <__swbuf_r+0x12>
 8001254:	6a03      	ldr	r3, [r0, #32]
 8001256:	b90b      	cbnz	r3, 800125c <__swbuf_r+0x12>
 8001258:	f7ff fab2 	bl	80007c0 <__sinit>
 800125c:	69a3      	ldr	r3, [r4, #24]
 800125e:	60a3      	str	r3, [r4, #8]
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	071a      	lsls	r2, r3, #28
 8001264:	d501      	bpl.n	800126a <__swbuf_r+0x20>
 8001266:	6923      	ldr	r3, [r4, #16]
 8001268:	b943      	cbnz	r3, 800127c <__swbuf_r+0x32>
 800126a:	4621      	mov	r1, r4
 800126c:	4628      	mov	r0, r5
 800126e:	f000 f82b 	bl	80012c8 <__swsetup_r>
 8001272:	b118      	cbz	r0, 800127c <__swbuf_r+0x32>
 8001274:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001278:	4638      	mov	r0, r7
 800127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	6922      	ldr	r2, [r4, #16]
 8001280:	1a98      	subs	r0, r3, r2
 8001282:	6963      	ldr	r3, [r4, #20]
 8001284:	b2f6      	uxtb	r6, r6
 8001286:	4283      	cmp	r3, r0
 8001288:	4637      	mov	r7, r6
 800128a:	dc05      	bgt.n	8001298 <__swbuf_r+0x4e>
 800128c:	4621      	mov	r1, r4
 800128e:	4628      	mov	r0, r5
 8001290:	f7ff ff64 	bl	800115c <_fflush_r>
 8001294:	2800      	cmp	r0, #0
 8001296:	d1ed      	bne.n	8001274 <__swbuf_r+0x2a>
 8001298:	68a3      	ldr	r3, [r4, #8]
 800129a:	3b01      	subs	r3, #1
 800129c:	60a3      	str	r3, [r4, #8]
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	6022      	str	r2, [r4, #0]
 80012a4:	701e      	strb	r6, [r3, #0]
 80012a6:	6962      	ldr	r2, [r4, #20]
 80012a8:	1c43      	adds	r3, r0, #1
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d004      	beq.n	80012b8 <__swbuf_r+0x6e>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	07db      	lsls	r3, r3, #31
 80012b2:	d5e1      	bpl.n	8001278 <__swbuf_r+0x2e>
 80012b4:	2e0a      	cmp	r6, #10
 80012b6:	d1df      	bne.n	8001278 <__swbuf_r+0x2e>
 80012b8:	4621      	mov	r1, r4
 80012ba:	4628      	mov	r0, r5
 80012bc:	f7ff ff4e 	bl	800115c <_fflush_r>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d0d9      	beq.n	8001278 <__swbuf_r+0x2e>
 80012c4:	e7d6      	b.n	8001274 <__swbuf_r+0x2a>
	...

080012c8 <__swsetup_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <__swsetup_r+0xa8>)
 80012cc:	4605      	mov	r5, r0
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	460c      	mov	r4, r1
 80012d2:	b118      	cbz	r0, 80012dc <__swsetup_r+0x14>
 80012d4:	6a03      	ldr	r3, [r0, #32]
 80012d6:	b90b      	cbnz	r3, 80012dc <__swsetup_r+0x14>
 80012d8:	f7ff fa72 	bl	80007c0 <__sinit>
 80012dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012e0:	0719      	lsls	r1, r3, #28
 80012e2:	d422      	bmi.n	800132a <__swsetup_r+0x62>
 80012e4:	06da      	lsls	r2, r3, #27
 80012e6:	d407      	bmi.n	80012f8 <__swsetup_r+0x30>
 80012e8:	2209      	movs	r2, #9
 80012ea:	602a      	str	r2, [r5, #0]
 80012ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f0:	81a3      	strh	r3, [r4, #12]
 80012f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f6:	e033      	b.n	8001360 <__swsetup_r+0x98>
 80012f8:	0758      	lsls	r0, r3, #29
 80012fa:	d512      	bpl.n	8001322 <__swsetup_r+0x5a>
 80012fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012fe:	b141      	cbz	r1, 8001312 <__swsetup_r+0x4a>
 8001300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001304:	4299      	cmp	r1, r3
 8001306:	d002      	beq.n	800130e <__swsetup_r+0x46>
 8001308:	4628      	mov	r0, r5
 800130a:	f000 f90d 	bl	8001528 <_free_r>
 800130e:	2300      	movs	r3, #0
 8001310:	6363      	str	r3, [r4, #52]	@ 0x34
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001318:	81a3      	strh	r3, [r4, #12]
 800131a:	2300      	movs	r3, #0
 800131c:	6063      	str	r3, [r4, #4]
 800131e:	6923      	ldr	r3, [r4, #16]
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	81a3      	strh	r3, [r4, #12]
 800132a:	6923      	ldr	r3, [r4, #16]
 800132c:	b94b      	cbnz	r3, 8001342 <__swsetup_r+0x7a>
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001338:	d003      	beq.n	8001342 <__swsetup_r+0x7a>
 800133a:	4621      	mov	r1, r4
 800133c:	4628      	mov	r0, r5
 800133e:	f000 f83f 	bl	80013c0 <__smakebuf_r>
 8001342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001346:	f013 0201 	ands.w	r2, r3, #1
 800134a:	d00a      	beq.n	8001362 <__swsetup_r+0x9a>
 800134c:	2200      	movs	r2, #0
 800134e:	60a2      	str	r2, [r4, #8]
 8001350:	6962      	ldr	r2, [r4, #20]
 8001352:	4252      	negs	r2, r2
 8001354:	61a2      	str	r2, [r4, #24]
 8001356:	6922      	ldr	r2, [r4, #16]
 8001358:	b942      	cbnz	r2, 800136c <__swsetup_r+0xa4>
 800135a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800135e:	d1c5      	bne.n	80012ec <__swsetup_r+0x24>
 8001360:	bd38      	pop	{r3, r4, r5, pc}
 8001362:	0799      	lsls	r1, r3, #30
 8001364:	bf58      	it	pl
 8001366:	6962      	ldrpl	r2, [r4, #20]
 8001368:	60a2      	str	r2, [r4, #8]
 800136a:	e7f4      	b.n	8001356 <__swsetup_r+0x8e>
 800136c:	2000      	movs	r0, #0
 800136e:	e7f7      	b.n	8001360 <__swsetup_r+0x98>
 8001370:	20000038 	.word	0x20000038

08001374 <__swhatbuf_r>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	460c      	mov	r4, r1
 8001378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800137c:	2900      	cmp	r1, #0
 800137e:	b096      	sub	sp, #88	@ 0x58
 8001380:	4615      	mov	r5, r2
 8001382:	461e      	mov	r6, r3
 8001384:	da0d      	bge.n	80013a2 <__swhatbuf_r+0x2e>
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	bf14      	ite	ne
 8001392:	2340      	movne	r3, #64	@ 0x40
 8001394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001398:	2000      	movs	r0, #0
 800139a:	6031      	str	r1, [r6, #0]
 800139c:	602b      	str	r3, [r5, #0]
 800139e:	b016      	add	sp, #88	@ 0x58
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	466a      	mov	r2, sp
 80013a4:	f000 f8ae 	bl	8001504 <_fstat_r>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	dbec      	blt.n	8001386 <__swhatbuf_r+0x12>
 80013ac:	9901      	ldr	r1, [sp, #4]
 80013ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013b6:	4259      	negs	r1, r3
 80013b8:	4159      	adcs	r1, r3
 80013ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013be:	e7eb      	b.n	8001398 <__swhatbuf_r+0x24>

080013c0 <__smakebuf_r>:
 80013c0:	898b      	ldrh	r3, [r1, #12]
 80013c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013c4:	079d      	lsls	r5, r3, #30
 80013c6:	4606      	mov	r6, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	d507      	bpl.n	80013dc <__smakebuf_r+0x1c>
 80013cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	6123      	str	r3, [r4, #16]
 80013d4:	2301      	movs	r3, #1
 80013d6:	6163      	str	r3, [r4, #20]
 80013d8:	b003      	add	sp, #12
 80013da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013dc:	ab01      	add	r3, sp, #4
 80013de:	466a      	mov	r2, sp
 80013e0:	f7ff ffc8 	bl	8001374 <__swhatbuf_r>
 80013e4:	9f00      	ldr	r7, [sp, #0]
 80013e6:	4605      	mov	r5, r0
 80013e8:	4639      	mov	r1, r7
 80013ea:	4630      	mov	r0, r6
 80013ec:	f7ff fc26 	bl	8000c3c <_malloc_r>
 80013f0:	b948      	cbnz	r0, 8001406 <__smakebuf_r+0x46>
 80013f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013f6:	059a      	lsls	r2, r3, #22
 80013f8:	d4ee      	bmi.n	80013d8 <__smakebuf_r+0x18>
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	81a3      	strh	r3, [r4, #12]
 8001404:	e7e2      	b.n	80013cc <__smakebuf_r+0xc>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	6020      	str	r0, [r4, #0]
 800140a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140e:	81a3      	strh	r3, [r4, #12]
 8001410:	9b01      	ldr	r3, [sp, #4]
 8001412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001416:	b15b      	cbz	r3, 8001430 <__smakebuf_r+0x70>
 8001418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800141c:	4630      	mov	r0, r6
 800141e:	f000 f80b 	bl	8001438 <_isatty_r>
 8001422:	b128      	cbz	r0, 8001430 <__smakebuf_r+0x70>
 8001424:	89a3      	ldrh	r3, [r4, #12]
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	81a3      	strh	r3, [r4, #12]
 8001430:	89a3      	ldrh	r3, [r4, #12]
 8001432:	431d      	orrs	r5, r3
 8001434:	81a5      	strh	r5, [r4, #12]
 8001436:	e7cf      	b.n	80013d8 <__smakebuf_r+0x18>

08001438 <_isatty_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4d06      	ldr	r5, [pc, #24]	@ (8001454 <_isatty_r+0x1c>)
 800143c:	2300      	movs	r3, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	f7ff f8b8 	bl	80005b8 <_isatty>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d102      	bne.n	8001452 <_isatty_r+0x1a>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	b103      	cbz	r3, 8001452 <_isatty_r+0x1a>
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	200001f0 	.word	0x200001f0

08001458 <_lseek_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d07      	ldr	r5, [pc, #28]	@ (8001478 <_lseek_r+0x20>)
 800145c:	4604      	mov	r4, r0
 800145e:	4608      	mov	r0, r1
 8001460:	4611      	mov	r1, r2
 8001462:	2200      	movs	r2, #0
 8001464:	602a      	str	r2, [r5, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	f7ff f8b1 	bl	80005ce <_lseek>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	d102      	bne.n	8001476 <_lseek_r+0x1e>
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	b103      	cbz	r3, 8001476 <_lseek_r+0x1e>
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	200001f0 	.word	0x200001f0

0800147c <_read_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d07      	ldr	r5, [pc, #28]	@ (800149c <_read_r+0x20>)
 8001480:	4604      	mov	r4, r0
 8001482:	4608      	mov	r0, r1
 8001484:	4611      	mov	r1, r2
 8001486:	2200      	movs	r2, #0
 8001488:	602a      	str	r2, [r5, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	f7ff f83f 	bl	800050e <_read>
 8001490:	1c43      	adds	r3, r0, #1
 8001492:	d102      	bne.n	800149a <_read_r+0x1e>
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	b103      	cbz	r3, 800149a <_read_r+0x1e>
 8001498:	6023      	str	r3, [r4, #0]
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	200001f0 	.word	0x200001f0

080014a0 <_sbrk_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4d06      	ldr	r5, [pc, #24]	@ (80014bc <_sbrk_r+0x1c>)
 80014a4:	2300      	movs	r3, #0
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	602b      	str	r3, [r5, #0]
 80014ac:	f7ff f89c 	bl	80005e8 <_sbrk>
 80014b0:	1c43      	adds	r3, r0, #1
 80014b2:	d102      	bne.n	80014ba <_sbrk_r+0x1a>
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	b103      	cbz	r3, 80014ba <_sbrk_r+0x1a>
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	bd38      	pop	{r3, r4, r5, pc}
 80014bc:	200001f0 	.word	0x200001f0

080014c0 <_write_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4d07      	ldr	r5, [pc, #28]	@ (80014e0 <_write_r+0x20>)
 80014c4:	4604      	mov	r4, r0
 80014c6:	4608      	mov	r0, r1
 80014c8:	4611      	mov	r1, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	602a      	str	r2, [r5, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f7ff f83a 	bl	8000548 <_write>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d102      	bne.n	80014de <_write_r+0x1e>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	b103      	cbz	r3, 80014de <_write_r+0x1e>
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	200001f0 	.word	0x200001f0

080014e4 <_close_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d06      	ldr	r5, [pc, #24]	@ (8001500 <_close_r+0x1c>)
 80014e8:	2300      	movs	r3, #0
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	602b      	str	r3, [r5, #0]
 80014f0:	f7ff f846 	bl	8000580 <_close>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_close_r+0x1a>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_close_r+0x1a>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	200001f0 	.word	0x200001f0

08001504 <_fstat_r>:
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	4d07      	ldr	r5, [pc, #28]	@ (8001524 <_fstat_r+0x20>)
 8001508:	2300      	movs	r3, #0
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	f7ff f841 	bl	8000598 <_fstat>
 8001516:	1c43      	adds	r3, r0, #1
 8001518:	d102      	bne.n	8001520 <_fstat_r+0x1c>
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	b103      	cbz	r3, 8001520 <_fstat_r+0x1c>
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	bd38      	pop	{r3, r4, r5, pc}
 8001522:	bf00      	nop
 8001524:	200001f0 	.word	0x200001f0

08001528 <_free_r>:
 8001528:	b538      	push	{r3, r4, r5, lr}
 800152a:	4605      	mov	r5, r0
 800152c:	2900      	cmp	r1, #0
 800152e:	d041      	beq.n	80015b4 <_free_r+0x8c>
 8001530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001534:	1f0c      	subs	r4, r1, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	18e4      	addlt	r4, r4, r3
 800153c:	f7ff fe36 	bl	80011ac <__malloc_lock>
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <_free_r+0x90>)
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	b933      	cbnz	r3, 8001554 <_free_r+0x2c>
 8001546:	6063      	str	r3, [r4, #4]
 8001548:	6014      	str	r4, [r2, #0]
 800154a:	4628      	mov	r0, r5
 800154c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001550:	f7ff be32 	b.w	80011b8 <__malloc_unlock>
 8001554:	42a3      	cmp	r3, r4
 8001556:	d908      	bls.n	800156a <_free_r+0x42>
 8001558:	6820      	ldr	r0, [r4, #0]
 800155a:	1821      	adds	r1, r4, r0
 800155c:	428b      	cmp	r3, r1
 800155e:	bf01      	itttt	eq
 8001560:	6819      	ldreq	r1, [r3, #0]
 8001562:	685b      	ldreq	r3, [r3, #4]
 8001564:	1809      	addeq	r1, r1, r0
 8001566:	6021      	streq	r1, [r4, #0]
 8001568:	e7ed      	b.n	8001546 <_free_r+0x1e>
 800156a:	461a      	mov	r2, r3
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	b10b      	cbz	r3, 8001574 <_free_r+0x4c>
 8001570:	42a3      	cmp	r3, r4
 8001572:	d9fa      	bls.n	800156a <_free_r+0x42>
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	1850      	adds	r0, r2, r1
 8001578:	42a0      	cmp	r0, r4
 800157a:	d10b      	bne.n	8001594 <_free_r+0x6c>
 800157c:	6820      	ldr	r0, [r4, #0]
 800157e:	4401      	add	r1, r0
 8001580:	1850      	adds	r0, r2, r1
 8001582:	4283      	cmp	r3, r0
 8001584:	6011      	str	r1, [r2, #0]
 8001586:	d1e0      	bne.n	800154a <_free_r+0x22>
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	6053      	str	r3, [r2, #4]
 800158e:	4408      	add	r0, r1
 8001590:	6010      	str	r0, [r2, #0]
 8001592:	e7da      	b.n	800154a <_free_r+0x22>
 8001594:	d902      	bls.n	800159c <_free_r+0x74>
 8001596:	230c      	movs	r3, #12
 8001598:	602b      	str	r3, [r5, #0]
 800159a:	e7d6      	b.n	800154a <_free_r+0x22>
 800159c:	6820      	ldr	r0, [r4, #0]
 800159e:	1821      	adds	r1, r4, r0
 80015a0:	428b      	cmp	r3, r1
 80015a2:	bf04      	itt	eq
 80015a4:	6819      	ldreq	r1, [r3, #0]
 80015a6:	685b      	ldreq	r3, [r3, #4]
 80015a8:	6063      	str	r3, [r4, #4]
 80015aa:	bf04      	itt	eq
 80015ac:	1809      	addeq	r1, r1, r0
 80015ae:	6021      	streq	r1, [r4, #0]
 80015b0:	6054      	str	r4, [r2, #4]
 80015b2:	e7ca      	b.n	800154a <_free_r+0x22>
 80015b4:	bd38      	pop	{r3, r4, r5, pc}
 80015b6:	bf00      	nop
 80015b8:	200001ec 	.word	0x200001ec

080015bc <_init>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr

080015c8 <_fini>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr
