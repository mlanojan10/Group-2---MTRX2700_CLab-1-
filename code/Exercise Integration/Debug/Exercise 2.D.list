
Exercise 2.D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001998  08001998  00002998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a20  08001a20  00003088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001a20  08001a20  00002a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a28  08001a28  00003088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a28  08001a28  00002a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a2c  08001a2c  00002a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08001a30  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003088  2**0
                  CONTENTS
 10 .bss          0000024c  20000088  20000088  00003088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  00003088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001399  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000666  00000000  00000000  00004451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000112  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c63  00000000  00000000  00004d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c03  00000000  00000000  0001b9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007845d  00000000  00000000  0001d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00095a05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e24  00000000  00000000  00095a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0009686c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001980 	.word	0x08001980

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08001980 	.word	0x08001980

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#include <stdio.h>
#include <string.h>
#include "serial.h"
#include "stm32f303xc.h"

int __io_putchar(int ch) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4904      	ldr	r1, [pc, #16]	@ (80002a0 <__io_putchar+0x20>)
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f8ba 	bl	8000408 <SerialOutputChar>
    return ch;
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <OnLineReceived>:

void OnLineReceived(char *string, uint32_t length) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
    static char response[80];
    snprintf(response, sizeof(response), "> You typed: %s\r\n> Echo: %s\r\n\r\n", string, string);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a05      	ldr	r2, [pc, #20]	@ (80002cc <OnLineReceived+0x28>)
 80002b6:	2150      	movs	r1, #80	@ 0x50
 80002b8:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <OnLineReceived+0x2c>)
 80002ba:	f000 fa49 	bl	8000750 <sniprintf>
    SerialStartTransmission(response);
 80002be:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <OnLineReceived+0x2c>)
 80002c0:	f000 f8ca 	bl	8000458 <SerialStartTransmission>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08001998 	.word	0x08001998
 80002d0:	200000a4 	.word	0x200000a4

080002d4 <main>:

int main(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80002d8:	2200      	movs	r2, #0
 80002da:	4906      	ldr	r1, [pc, #24]	@ (80002f4 <main+0x20>)
 80002dc:	2004      	movs	r0, #4
 80002de:	f000 f82d 	bl	800033c <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 80002e2:	4905      	ldr	r1, [pc, #20]	@ (80002f8 <main+0x24>)
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <main+0x20>)
 80002e6:	f000 f8a8 	bl	800043a <SerialSetReceiveCallback>

    printf("USART1 is ready. Type a line and press Enter:\r\n> ");
 80002ea:	4804      	ldr	r0, [pc, #16]	@ (80002fc <main+0x28>)
 80002ec:	f000 fb28 	bl	8000940 <iprintf>

    while (1) {
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x1c>
 80002f4:	20000000 	.word	0x20000000
 80002f8:	080002a5 	.word	0x080002a5
 80002fc:	080019b8 	.word	0x080019b8

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db0b      	blt.n	800032a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	@ (8000338 <__NVIC_EnableIRQ+0x38>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <SerialInitialise>:
static uint32_t rx_index = 0;

static const char *tx_buffer = NULL;
static uint32_t tx_index = 0;

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034e:	4b2d      	ldr	r3, [pc, #180]	@ (8000404 <SerialInitialise+0xc8>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a2c      	ldr	r2, [pc, #176]	@ (8000404 <SerialInitialise+0xc8>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800035a:	4b2a      	ldr	r3, [pc, #168]	@ (8000404 <SerialInitialise+0xc8>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a29      	ldr	r2, [pc, #164]	@ (8000404 <SerialInitialise+0xc8>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	691a      	ldr	r2, [r3, #16]
 800036a:	4b26      	ldr	r3, [pc, #152]	@ (8000404 <SerialInitialise+0xc8>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4925      	ldr	r1, [pc, #148]	@ (8000404 <SerialInitialise+0xc8>)
 8000370:	4313      	orrs	r3, r2
 8000372:	614b      	str	r3, [r1, #20]

    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	6952      	ldr	r2, [r2, #20]
 800037c:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	6992      	ldr	r2, [r2, #24]
 8000386:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	69d9      	ldr	r1, [r3, #28]
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	6a1a      	ldr	r2, [r3, #32]
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	430a      	orrs	r2, r1
 8000398:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	6a19      	ldr	r1, [r3, #32]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	430a      	orrs	r2, r1
 80003aa:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <SerialInitialise+0xc8>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4913      	ldr	r1, [pc, #76]	@ (8000404 <SerialInitialise+0xc8>)
 80003b6:	4313      	orrs	r3, r2
 80003b8:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	689a      	ldr	r2, [r3, #8]
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <SerialInitialise+0xc8>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4910      	ldr	r1, [pc, #64]	@ (8000404 <SerialInitialise+0xc8>)
 80003c4:	4313      	orrs	r3, r2
 80003c6:	618b      	str	r3, [r1, #24]

    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	330c      	adds	r3, #12
 80003ce:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	2246      	movs	r2, #70	@ 0x46
 80003d4:	801a      	strh	r2, [r3, #0]

    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f042 020d 	orr.w	r2, r2, #13
 80003e4:	601a      	str	r2, [r3, #0]
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f042 0220 	orr.w	r2, r2, #32
 80003f4:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART1_IRQn);
 80003f6:	2025      	movs	r0, #37	@ 0x25
 80003f8:	f7ff ff82 	bl	8000300 <__NVIC_EnableIRQ>
}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000

08000408 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	6039      	str	r1, [r7, #0]
 8000412:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0);
 8000414:	bf00      	nop
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f8      	beq.n	8000416 <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	b292      	uxth	r2, r2
 800042c:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <SerialSetReceiveCallback>:
uint8_t SerialGetChar(SerialPort *serial_port) {
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);
    return serial_port->UART->RDR;
}

void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <SerialStartTransmission>:

void SerialStartTransmission(const char *str) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
    tx_buffer = str;
 8000460:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <SerialStartTransmission+0x2c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6013      	str	r3, [r2, #0]
    tx_index = 0;
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <SerialStartTransmission+0x30>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_TXEIE;
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <SerialStartTransmission+0x34>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a06      	ldr	r2, [pc, #24]	@ (800048c <SerialStartTransmission+0x34>)
 8000472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	2000017c 	.word	0x2000017c
 8000488:	20000180 	.word	0x20000180
 800048c:	40013800 	.word	0x40013800

08000490 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 8000496:	4b40      	ldr	r3, [pc, #256]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0320 	and.w	r3, r3, #32
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d045      	beq.n	800052e <USART1_EXTI25_IRQHandler+0x9e>
        char c = USART1->RDR;
 80004a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 80004a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	71fb      	strb	r3, [r7, #7]
        SerialOutputChar(c, &USART1_PORT);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	493b      	ldr	r1, [pc, #236]	@ (800059c <USART1_EXTI25_IRQHandler+0x10c>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffaa 	bl	8000408 <SerialOutputChar>

        if (c == '\r') return;
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	2b0d      	cmp	r3, #13
 80004b8:	d06a      	beq.n	8000590 <USART1_EXTI25_IRQHandler+0x100>

        if (c == '\n') {
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b0a      	cmp	r3, #10
 80004be:	d124      	bne.n	800050a <USART1_EXTI25_IRQHandler+0x7a>
            rx_buffers[active_rx_buf][rx_index] = '\0';
 80004c0:	4b37      	ldr	r3, [pc, #220]	@ (80005a0 <USART1_EXTI25_IRQHandler+0x110>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b37      	ldr	r3, [pc, #220]	@ (80005a4 <USART1_EXTI25_IRQHandler+0x114>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4937      	ldr	r1, [pc, #220]	@ (80005a8 <USART1_EXTI25_IRQHandler+0x118>)
 80004cc:	0192      	lsls	r2, r2, #6
 80004ce:	440a      	add	r2, r1
 80004d0:	4413      	add	r3, r2
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
            if (USART1_PORT.receive_callback)
 80004d6:	4b31      	ldr	r3, [pc, #196]	@ (800059c <USART1_EXTI25_IRQHandler+0x10c>)
 80004d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00a      	beq.n	80004f4 <USART1_EXTI25_IRQHandler+0x64>
                USART1_PORT.receive_callback(rx_buffers[active_rx_buf], rx_index);
 80004de:	4b2f      	ldr	r3, [pc, #188]	@ (800059c <USART1_EXTI25_IRQHandler+0x10c>)
 80004e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004e2:	4a2f      	ldr	r2, [pc, #188]	@ (80005a0 <USART1_EXTI25_IRQHandler+0x110>)
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	0192      	lsls	r2, r2, #6
 80004e8:	492f      	ldr	r1, [pc, #188]	@ (80005a8 <USART1_EXTI25_IRQHandler+0x118>)
 80004ea:	440a      	add	r2, r1
 80004ec:	492d      	ldr	r1, [pc, #180]	@ (80005a4 <USART1_EXTI25_IRQHandler+0x114>)
 80004ee:	6809      	ldr	r1, [r1, #0]
 80004f0:	4610      	mov	r0, r2
 80004f2:	4798      	blx	r3
            active_rx_buf ^= 1;
 80004f4:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <USART1_EXTI25_IRQHandler+0x110>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <USART1_EXTI25_IRQHandler+0x110>)
 8000500:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000502:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <USART1_EXTI25_IRQHandler+0x114>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	e011      	b.n	800052e <USART1_EXTI25_IRQHandler+0x9e>
        } else if (rx_index < sizeof(rx_buffers[0]) - 1) {
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <USART1_EXTI25_IRQHandler+0x114>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000510:	d80d      	bhi.n	800052e <USART1_EXTI25_IRQHandler+0x9e>
            rx_buffers[active_rx_buf][rx_index++] = c;
 8000512:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <USART1_EXTI25_IRQHandler+0x110>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <USART1_EXTI25_IRQHandler+0x114>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	4921      	ldr	r1, [pc, #132]	@ (80005a4 <USART1_EXTI25_IRQHandler+0x114>)
 8000520:	600a      	str	r2, [r1, #0]
 8000522:	4921      	ldr	r1, [pc, #132]	@ (80005a8 <USART1_EXTI25_IRQHandler+0x118>)
 8000524:	0182      	lsls	r2, r0, #6
 8000526:	440a      	add	r2, r1
 8000528:	4413      	add	r3, r2
 800052a:	79fa      	ldrb	r2, [r7, #7]
 800052c:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 800052e:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000536:	2b00      	cmp	r3, #0
 8000538:	d02b      	beq.n	8000592 <USART1_EXTI25_IRQHandler+0x102>
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000542:	2b00      	cmp	r3, #0
 8000544:	d025      	beq.n	8000592 <USART1_EXTI25_IRQHandler+0x102>
        if (tx_buffer && tx_buffer[tx_index]) {
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <USART1_EXTI25_IRQHandler+0x11c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d013      	beq.n	8000576 <USART1_EXTI25_IRQHandler+0xe6>
 800054e:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <USART1_EXTI25_IRQHandler+0x11c>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <USART1_EXTI25_IRQHandler+0x120>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00b      	beq.n	8000576 <USART1_EXTI25_IRQHandler+0xe6>
            USART1->TDR = tx_buffer[tx_index++];
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <USART1_EXTI25_IRQHandler+0x11c>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <USART1_EXTI25_IRQHandler+0x120>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c59      	adds	r1, r3, #1
 8000568:	4811      	ldr	r0, [pc, #68]	@ (80005b0 <USART1_EXTI25_IRQHandler+0x120>)
 800056a:	6001      	str	r1, [r0, #0]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 8000572:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000574:	e00d      	b.n	8000592 <USART1_EXTI25_IRQHandler+0x102>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <USART1_EXTI25_IRQHandler+0x108>)
 800057c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000580:	6013      	str	r3, [r2, #0]
            tx_buffer = NULL;
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <USART1_EXTI25_IRQHandler+0x11c>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
            tx_index = 0;
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <USART1_EXTI25_IRQHandler+0x120>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e000      	b.n	8000592 <USART1_EXTI25_IRQHandler+0x102>
        if (c == '\r') return;
 8000590:	bf00      	nop
        }
    }
}
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40013800 	.word	0x40013800
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000174 	.word	0x20000174
 80005a4:	20000178 	.word	0x20000178
 80005a8:	200000f4 	.word	0x200000f4
 80005ac:	2000017c 	.word	0x2000017c
 80005b0:	20000180 	.word	0x20000180

080005b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e00a      	b.n	80005dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005c6:	f3af 8000 	nop.w
 80005ca:	4601      	mov	r1, r0
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf0      	blt.n	80005c6 <_read+0x12>
	}

return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe39 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x12>
	}
	return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_close>:

int _close(int file)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	return -1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800064e:	605a      	str	r2, [r3, #4]
	return 0;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <_isatty>:

int _isatty(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
	return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000698:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <_sbrk+0x5c>)
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <_sbrk+0x60>)
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <_sbrk+0x64>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <_sbrk+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d207      	bcs.n	80006d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c0:	f000 f958 	bl	8000974 <__errno>
 80006c4:	4603      	mov	r3, r0
 80006c6:	220c      	movs	r2, #12
 80006c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ce:	e009      	b.n	80006e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <_sbrk+0x64>)
 80006e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000a000 	.word	0x2000a000
 80006f0:	00000400 	.word	0x00000400
 80006f4:	20000184 	.word	0x20000184
 80006f8:	200002d8 	.word	0x200002d8

080006fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000700:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	@ (800073c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	@ (8000744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	@ (8000748 <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072a:	f000 f929 	bl	8000980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072e:	f7ff fdd1 	bl	80002d4 <main>

08000732 <LoopForever>:

LoopForever:
  b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   r0, =_estack
 8000734:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000740:	08001a30 	.word	0x08001a30
  ldr r2, =_sbss
 8000744:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000748:	200002d4 	.word	0x200002d4

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <sniprintf>:
 8000750:	b40c      	push	{r2, r3}
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <sniprintf+0x68>)
 8000756:	1e0c      	subs	r4, r1, #0
 8000758:	681d      	ldr	r5, [r3, #0]
 800075a:	b09d      	sub	sp, #116	@ 0x74
 800075c:	da08      	bge.n	8000770 <sniprintf+0x20>
 800075e:	238b      	movs	r3, #139	@ 0x8b
 8000760:	602b      	str	r3, [r5, #0]
 8000762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000766:	b01d      	add	sp, #116	@ 0x74
 8000768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800076c:	b002      	add	sp, #8
 800076e:	4770      	bx	lr
 8000770:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000774:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800077e:	bf14      	ite	ne
 8000780:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8000784:	4623      	moveq	r3, r4
 8000786:	9304      	str	r3, [sp, #16]
 8000788:	9307      	str	r3, [sp, #28]
 800078a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078e:	9002      	str	r0, [sp, #8]
 8000790:	9006      	str	r0, [sp, #24]
 8000792:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000796:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8000798:	ab21      	add	r3, sp, #132	@ 0x84
 800079a:	a902      	add	r1, sp, #8
 800079c:	4628      	mov	r0, r5
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	f000 f970 	bl	8000a84 <_svfiprintf_r>
 80007a4:	1c43      	adds	r3, r0, #1
 80007a6:	bfbc      	itt	lt
 80007a8:	238b      	movlt	r3, #139	@ 0x8b
 80007aa:	602b      	strlt	r3, [r5, #0]
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d0da      	beq.n	8000766 <sniprintf+0x16>
 80007b0:	9b02      	ldr	r3, [sp, #8]
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e7d6      	b.n	8000766 <sniprintf+0x16>
 80007b8:	20000038 	.word	0x20000038

080007bc <std>:
 80007bc:	2300      	movs	r3, #0
 80007be:	b510      	push	{r4, lr}
 80007c0:	4604      	mov	r4, r0
 80007c2:	e9c0 3300 	strd	r3, r3, [r0]
 80007c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ca:	6083      	str	r3, [r0, #8]
 80007cc:	8181      	strh	r1, [r0, #12]
 80007ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80007d0:	81c2      	strh	r2, [r0, #14]
 80007d2:	6183      	str	r3, [r0, #24]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2208      	movs	r2, #8
 80007d8:	305c      	adds	r0, #92	@ 0x5c
 80007da:	f000 f8c3 	bl	8000964 <memset>
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <std+0x58>)
 80007e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <std+0x5c>)
 80007e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <std+0x60>)
 80007e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <std+0x64>)
 80007ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <std+0x68>)
 80007f0:	6224      	str	r4, [r4, #32]
 80007f2:	429c      	cmp	r4, r3
 80007f4:	d006      	beq.n	8000804 <std+0x48>
 80007f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007fa:	4294      	cmp	r4, r2
 80007fc:	d002      	beq.n	8000804 <std+0x48>
 80007fe:	33d0      	adds	r3, #208	@ 0xd0
 8000800:	429c      	cmp	r4, r3
 8000802:	d105      	bne.n	8000810 <std+0x54>
 8000804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080c:	f000 b8dc 	b.w	80009c8 <__retarget_lock_init_recursive>
 8000810:	bd10      	pop	{r4, pc}
 8000812:	bf00      	nop
 8000814:	080014cd 	.word	0x080014cd
 8000818:	080014ef 	.word	0x080014ef
 800081c:	08001527 	.word	0x08001527
 8000820:	0800154b 	.word	0x0800154b
 8000824:	20000188 	.word	0x20000188

08000828 <stdio_exit_handler>:
 8000828:	4a02      	ldr	r2, [pc, #8]	@ (8000834 <stdio_exit_handler+0xc>)
 800082a:	4903      	ldr	r1, [pc, #12]	@ (8000838 <stdio_exit_handler+0x10>)
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <stdio_exit_handler+0x14>)
 800082e:	f000 b869 	b.w	8000904 <_fwalk_sglue>
 8000832:	bf00      	nop
 8000834:	2000002c 	.word	0x2000002c
 8000838:	08001465 	.word	0x08001465
 800083c:	2000003c 	.word	0x2000003c

08000840 <cleanup_stdio>:
 8000840:	6841      	ldr	r1, [r0, #4]
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <cleanup_stdio+0x34>)
 8000844:	4299      	cmp	r1, r3
 8000846:	b510      	push	{r4, lr}
 8000848:	4604      	mov	r4, r0
 800084a:	d001      	beq.n	8000850 <cleanup_stdio+0x10>
 800084c:	f000 fe0a 	bl	8001464 <_fflush_r>
 8000850:	68a1      	ldr	r1, [r4, #8]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <cleanup_stdio+0x38>)
 8000854:	4299      	cmp	r1, r3
 8000856:	d002      	beq.n	800085e <cleanup_stdio+0x1e>
 8000858:	4620      	mov	r0, r4
 800085a:	f000 fe03 	bl	8001464 <_fflush_r>
 800085e:	68e1      	ldr	r1, [r4, #12]
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <cleanup_stdio+0x3c>)
 8000862:	4299      	cmp	r1, r3
 8000864:	d004      	beq.n	8000870 <cleanup_stdio+0x30>
 8000866:	4620      	mov	r0, r4
 8000868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800086c:	f000 bdfa 	b.w	8001464 <_fflush_r>
 8000870:	bd10      	pop	{r4, pc}
 8000872:	bf00      	nop
 8000874:	20000188 	.word	0x20000188
 8000878:	200001f0 	.word	0x200001f0
 800087c:	20000258 	.word	0x20000258

08000880 <global_stdio_init.part.0>:
 8000880:	b510      	push	{r4, lr}
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <global_stdio_init.part.0+0x30>)
 8000884:	4c0b      	ldr	r4, [pc, #44]	@ (80008b4 <global_stdio_init.part.0+0x34>)
 8000886:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <global_stdio_init.part.0+0x38>)
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	4620      	mov	r0, r4
 800088c:	2200      	movs	r2, #0
 800088e:	2104      	movs	r1, #4
 8000890:	f7ff ff94 	bl	80007bc <std>
 8000894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000898:	2201      	movs	r2, #1
 800089a:	2109      	movs	r1, #9
 800089c:	f7ff ff8e 	bl	80007bc <std>
 80008a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008a4:	2202      	movs	r2, #2
 80008a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008aa:	2112      	movs	r1, #18
 80008ac:	f7ff bf86 	b.w	80007bc <std>
 80008b0:	200002c0 	.word	0x200002c0
 80008b4:	20000188 	.word	0x20000188
 80008b8:	08000829 	.word	0x08000829

080008bc <__sfp_lock_acquire>:
 80008bc:	4801      	ldr	r0, [pc, #4]	@ (80008c4 <__sfp_lock_acquire+0x8>)
 80008be:	f000 b884 	b.w	80009ca <__retarget_lock_acquire_recursive>
 80008c2:	bf00      	nop
 80008c4:	200002c5 	.word	0x200002c5

080008c8 <__sfp_lock_release>:
 80008c8:	4801      	ldr	r0, [pc, #4]	@ (80008d0 <__sfp_lock_release+0x8>)
 80008ca:	f000 b87f 	b.w	80009cc <__retarget_lock_release_recursive>
 80008ce:	bf00      	nop
 80008d0:	200002c5 	.word	0x200002c5

080008d4 <__sinit>:
 80008d4:	b510      	push	{r4, lr}
 80008d6:	4604      	mov	r4, r0
 80008d8:	f7ff fff0 	bl	80008bc <__sfp_lock_acquire>
 80008dc:	6a23      	ldr	r3, [r4, #32]
 80008de:	b11b      	cbz	r3, 80008e8 <__sinit+0x14>
 80008e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e4:	f7ff bff0 	b.w	80008c8 <__sfp_lock_release>
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <__sinit+0x28>)
 80008ea:	6223      	str	r3, [r4, #32]
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <__sinit+0x2c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f5      	bne.n	80008e0 <__sinit+0xc>
 80008f4:	f7ff ffc4 	bl	8000880 <global_stdio_init.part.0>
 80008f8:	e7f2      	b.n	80008e0 <__sinit+0xc>
 80008fa:	bf00      	nop
 80008fc:	08000841 	.word	0x08000841
 8000900:	200002c0 	.word	0x200002c0

08000904 <_fwalk_sglue>:
 8000904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000908:	4607      	mov	r7, r0
 800090a:	4688      	mov	r8, r1
 800090c:	4614      	mov	r4, r2
 800090e:	2600      	movs	r6, #0
 8000910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000914:	f1b9 0901 	subs.w	r9, r9, #1
 8000918:	d505      	bpl.n	8000926 <_fwalk_sglue+0x22>
 800091a:	6824      	ldr	r4, [r4, #0]
 800091c:	2c00      	cmp	r4, #0
 800091e:	d1f7      	bne.n	8000910 <_fwalk_sglue+0xc>
 8000920:	4630      	mov	r0, r6
 8000922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000926:	89ab      	ldrh	r3, [r5, #12]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d907      	bls.n	800093c <_fwalk_sglue+0x38>
 800092c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000930:	3301      	adds	r3, #1
 8000932:	d003      	beq.n	800093c <_fwalk_sglue+0x38>
 8000934:	4629      	mov	r1, r5
 8000936:	4638      	mov	r0, r7
 8000938:	47c0      	blx	r8
 800093a:	4306      	orrs	r6, r0
 800093c:	3568      	adds	r5, #104	@ 0x68
 800093e:	e7e9      	b.n	8000914 <_fwalk_sglue+0x10>

08000940 <iprintf>:
 8000940:	b40f      	push	{r0, r1, r2, r3}
 8000942:	b507      	push	{r0, r1, r2, lr}
 8000944:	4906      	ldr	r1, [pc, #24]	@ (8000960 <iprintf+0x20>)
 8000946:	ab04      	add	r3, sp, #16
 8000948:	6808      	ldr	r0, [r1, #0]
 800094a:	f853 2b04 	ldr.w	r2, [r3], #4
 800094e:	6881      	ldr	r1, [r0, #8]
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f000 f9bd 	bl	8000cd0 <_vfiprintf_r>
 8000956:	b003      	add	sp, #12
 8000958:	f85d eb04 	ldr.w	lr, [sp], #4
 800095c:	b004      	add	sp, #16
 800095e:	4770      	bx	lr
 8000960:	20000038 	.word	0x20000038

08000964 <memset>:
 8000964:	4402      	add	r2, r0
 8000966:	4603      	mov	r3, r0
 8000968:	4293      	cmp	r3, r2
 800096a:	d100      	bne.n	800096e <memset+0xa>
 800096c:	4770      	bx	lr
 800096e:	f803 1b01 	strb.w	r1, [r3], #1
 8000972:	e7f9      	b.n	8000968 <memset+0x4>

08000974 <__errno>:
 8000974:	4b01      	ldr	r3, [pc, #4]	@ (800097c <__errno+0x8>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000038 	.word	0x20000038

08000980 <__libc_init_array>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	4d0d      	ldr	r5, [pc, #52]	@ (80009b8 <__libc_init_array+0x38>)
 8000984:	4c0d      	ldr	r4, [pc, #52]	@ (80009bc <__libc_init_array+0x3c>)
 8000986:	1b64      	subs	r4, r4, r5
 8000988:	10a4      	asrs	r4, r4, #2
 800098a:	2600      	movs	r6, #0
 800098c:	42a6      	cmp	r6, r4
 800098e:	d109      	bne.n	80009a4 <__libc_init_array+0x24>
 8000990:	4d0b      	ldr	r5, [pc, #44]	@ (80009c0 <__libc_init_array+0x40>)
 8000992:	4c0c      	ldr	r4, [pc, #48]	@ (80009c4 <__libc_init_array+0x44>)
 8000994:	f000 fff4 	bl	8001980 <_init>
 8000998:	1b64      	subs	r4, r4, r5
 800099a:	10a4      	asrs	r4, r4, #2
 800099c:	2600      	movs	r6, #0
 800099e:	42a6      	cmp	r6, r4
 80009a0:	d105      	bne.n	80009ae <__libc_init_array+0x2e>
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a8:	4798      	blx	r3
 80009aa:	3601      	adds	r6, #1
 80009ac:	e7ee      	b.n	800098c <__libc_init_array+0xc>
 80009ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b2:	4798      	blx	r3
 80009b4:	3601      	adds	r6, #1
 80009b6:	e7f2      	b.n	800099e <__libc_init_array+0x1e>
 80009b8:	08001a28 	.word	0x08001a28
 80009bc:	08001a28 	.word	0x08001a28
 80009c0:	08001a28 	.word	0x08001a28
 80009c4:	08001a2c 	.word	0x08001a2c

080009c8 <__retarget_lock_init_recursive>:
 80009c8:	4770      	bx	lr

080009ca <__retarget_lock_acquire_recursive>:
 80009ca:	4770      	bx	lr

080009cc <__retarget_lock_release_recursive>:
 80009cc:	4770      	bx	lr

080009ce <__ssputs_r>:
 80009ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d2:	688e      	ldr	r6, [r1, #8]
 80009d4:	461f      	mov	r7, r3
 80009d6:	42be      	cmp	r6, r7
 80009d8:	680b      	ldr	r3, [r1, #0]
 80009da:	4682      	mov	sl, r0
 80009dc:	460c      	mov	r4, r1
 80009de:	4690      	mov	r8, r2
 80009e0:	d82d      	bhi.n	8000a3e <__ssputs_r+0x70>
 80009e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009ea:	d026      	beq.n	8000a3a <__ssputs_r+0x6c>
 80009ec:	6965      	ldr	r5, [r4, #20]
 80009ee:	6909      	ldr	r1, [r1, #16]
 80009f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009f4:	eba3 0901 	sub.w	r9, r3, r1
 80009f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009fc:	1c7b      	adds	r3, r7, #1
 80009fe:	444b      	add	r3, r9
 8000a00:	106d      	asrs	r5, r5, #1
 8000a02:	429d      	cmp	r5, r3
 8000a04:	bf38      	it	cc
 8000a06:	461d      	movcc	r5, r3
 8000a08:	0553      	lsls	r3, r2, #21
 8000a0a:	d527      	bpl.n	8000a5c <__ssputs_r+0x8e>
 8000a0c:	4629      	mov	r1, r5
 8000a0e:	f000 fa99 	bl	8000f44 <_malloc_r>
 8000a12:	4606      	mov	r6, r0
 8000a14:	b360      	cbz	r0, 8000a70 <__ssputs_r+0xa2>
 8000a16:	6921      	ldr	r1, [r4, #16]
 8000a18:	464a      	mov	r2, r9
 8000a1a:	f000 ff51 	bl	80018c0 <memcpy>
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	81a3      	strh	r3, [r4, #12]
 8000a2a:	6126      	str	r6, [r4, #16]
 8000a2c:	6165      	str	r5, [r4, #20]
 8000a2e:	444e      	add	r6, r9
 8000a30:	eba5 0509 	sub.w	r5, r5, r9
 8000a34:	6026      	str	r6, [r4, #0]
 8000a36:	60a5      	str	r5, [r4, #8]
 8000a38:	463e      	mov	r6, r7
 8000a3a:	42be      	cmp	r6, r7
 8000a3c:	d900      	bls.n	8000a40 <__ssputs_r+0x72>
 8000a3e:	463e      	mov	r6, r7
 8000a40:	6820      	ldr	r0, [r4, #0]
 8000a42:	4632      	mov	r2, r6
 8000a44:	4641      	mov	r1, r8
 8000a46:	f000 fea9 	bl	800179c <memmove>
 8000a4a:	68a3      	ldr	r3, [r4, #8]
 8000a4c:	1b9b      	subs	r3, r3, r6
 8000a4e:	60a3      	str	r3, [r4, #8]
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4433      	add	r3, r6
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	2000      	movs	r0, #0
 8000a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5c:	462a      	mov	r2, r5
 8000a5e:	f000 fd78 	bl	8001552 <_realloc_r>
 8000a62:	4606      	mov	r6, r0
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d1e0      	bne.n	8000a2a <__ssputs_r+0x5c>
 8000a68:	6921      	ldr	r1, [r4, #16]
 8000a6a:	4650      	mov	r0, sl
 8000a6c:	f000 ff36 	bl	80018dc <_free_r>
 8000a70:	230c      	movs	r3, #12
 8000a72:	f8ca 3000 	str.w	r3, [sl]
 8000a76:	89a3      	ldrh	r3, [r4, #12]
 8000a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7c:	81a3      	strh	r3, [r4, #12]
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a82:	e7e9      	b.n	8000a58 <__ssputs_r+0x8a>

08000a84 <_svfiprintf_r>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	4698      	mov	r8, r3
 8000a8a:	898b      	ldrh	r3, [r1, #12]
 8000a8c:	061b      	lsls	r3, r3, #24
 8000a8e:	b09d      	sub	sp, #116	@ 0x74
 8000a90:	4607      	mov	r7, r0
 8000a92:	460d      	mov	r5, r1
 8000a94:	4614      	mov	r4, r2
 8000a96:	d510      	bpl.n	8000aba <_svfiprintf_r+0x36>
 8000a98:	690b      	ldr	r3, [r1, #16]
 8000a9a:	b973      	cbnz	r3, 8000aba <_svfiprintf_r+0x36>
 8000a9c:	2140      	movs	r1, #64	@ 0x40
 8000a9e:	f000 fa51 	bl	8000f44 <_malloc_r>
 8000aa2:	6028      	str	r0, [r5, #0]
 8000aa4:	6128      	str	r0, [r5, #16]
 8000aa6:	b930      	cbnz	r0, 8000ab6 <_svfiprintf_r+0x32>
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	b01d      	add	sp, #116	@ 0x74
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	2340      	movs	r3, #64	@ 0x40
 8000ab8:	616b      	str	r3, [r5, #20]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000abe:	2320      	movs	r3, #32
 8000ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ac8:	2330      	movs	r3, #48	@ 0x30
 8000aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c68 <_svfiprintf_r+0x1e4>
 8000ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ad2:	f04f 0901 	mov.w	r9, #1
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	469a      	mov	sl, r3
 8000ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ade:	b10a      	cbz	r2, 8000ae4 <_svfiprintf_r+0x60>
 8000ae0:	2a25      	cmp	r2, #37	@ 0x25
 8000ae2:	d1f9      	bne.n	8000ad8 <_svfiprintf_r+0x54>
 8000ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ae8:	d00b      	beq.n	8000b02 <_svfiprintf_r+0x7e>
 8000aea:	465b      	mov	r3, fp
 8000aec:	4622      	mov	r2, r4
 8000aee:	4629      	mov	r1, r5
 8000af0:	4638      	mov	r0, r7
 8000af2:	f7ff ff6c 	bl	80009ce <__ssputs_r>
 8000af6:	3001      	adds	r0, #1
 8000af8:	f000 80a7 	beq.w	8000c4a <_svfiprintf_r+0x1c6>
 8000afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000afe:	445a      	add	r2, fp
 8000b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b02:	f89a 3000 	ldrb.w	r3, [sl]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 809f 	beq.w	8000c4a <_svfiprintf_r+0x1c6>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b16:	f10a 0a01 	add.w	sl, sl, #1
 8000b1a:	9304      	str	r3, [sp, #16]
 8000b1c:	9307      	str	r3, [sp, #28]
 8000b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b24:	4654      	mov	r4, sl
 8000b26:	2205      	movs	r2, #5
 8000b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b2c:	484e      	ldr	r0, [pc, #312]	@ (8000c68 <_svfiprintf_r+0x1e4>)
 8000b2e:	f7ff fb57 	bl	80001e0 <memchr>
 8000b32:	9a04      	ldr	r2, [sp, #16]
 8000b34:	b9d8      	cbnz	r0, 8000b6e <_svfiprintf_r+0xea>
 8000b36:	06d0      	lsls	r0, r2, #27
 8000b38:	bf44      	itt	mi
 8000b3a:	2320      	movmi	r3, #32
 8000b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b40:	0711      	lsls	r1, r2, #28
 8000b42:	bf44      	itt	mi
 8000b44:	232b      	movmi	r3, #43	@ 0x2b
 8000b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b50:	d015      	beq.n	8000b7e <_svfiprintf_r+0xfa>
 8000b52:	9a07      	ldr	r2, [sp, #28]
 8000b54:	4654      	mov	r4, sl
 8000b56:	2000      	movs	r0, #0
 8000b58:	f04f 0c0a 	mov.w	ip, #10
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b62:	3b30      	subs	r3, #48	@ 0x30
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	d94b      	bls.n	8000c00 <_svfiprintf_r+0x17c>
 8000b68:	b1b0      	cbz	r0, 8000b98 <_svfiprintf_r+0x114>
 8000b6a:	9207      	str	r2, [sp, #28]
 8000b6c:	e014      	b.n	8000b98 <_svfiprintf_r+0x114>
 8000b6e:	eba0 0308 	sub.w	r3, r0, r8
 8000b72:	fa09 f303 	lsl.w	r3, r9, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	46a2      	mov	sl, r4
 8000b7c:	e7d2      	b.n	8000b24 <_svfiprintf_r+0xa0>
 8000b7e:	9b03      	ldr	r3, [sp, #12]
 8000b80:	1d19      	adds	r1, r3, #4
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	9103      	str	r1, [sp, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfbb      	ittet	lt
 8000b8a:	425b      	neglt	r3, r3
 8000b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b90:	9307      	strge	r3, [sp, #28]
 8000b92:	9307      	strlt	r3, [sp, #28]
 8000b94:	bfb8      	it	lt
 8000b96:	9204      	strlt	r2, [sp, #16]
 8000b98:	7823      	ldrb	r3, [r4, #0]
 8000b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b9c:	d10a      	bne.n	8000bb4 <_svfiprintf_r+0x130>
 8000b9e:	7863      	ldrb	r3, [r4, #1]
 8000ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba2:	d132      	bne.n	8000c0a <_svfiprintf_r+0x186>
 8000ba4:	9b03      	ldr	r3, [sp, #12]
 8000ba6:	1d1a      	adds	r2, r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	9203      	str	r2, [sp, #12]
 8000bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bb0:	3402      	adds	r4, #2
 8000bb2:	9305      	str	r3, [sp, #20]
 8000bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c78 <_svfiprintf_r+0x1f4>
 8000bb8:	7821      	ldrb	r1, [r4, #0]
 8000bba:	2203      	movs	r2, #3
 8000bbc:	4650      	mov	r0, sl
 8000bbe:	f7ff fb0f 	bl	80001e0 <memchr>
 8000bc2:	b138      	cbz	r0, 8000bd4 <_svfiprintf_r+0x150>
 8000bc4:	9b04      	ldr	r3, [sp, #16]
 8000bc6:	eba0 000a 	sub.w	r0, r0, sl
 8000bca:	2240      	movs	r2, #64	@ 0x40
 8000bcc:	4082      	lsls	r2, r0
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	3401      	adds	r4, #1
 8000bd2:	9304      	str	r3, [sp, #16]
 8000bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bd8:	4824      	ldr	r0, [pc, #144]	@ (8000c6c <_svfiprintf_r+0x1e8>)
 8000bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bde:	2206      	movs	r2, #6
 8000be0:	f7ff fafe 	bl	80001e0 <memchr>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d036      	beq.n	8000c56 <_svfiprintf_r+0x1d2>
 8000be8:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <_svfiprintf_r+0x1ec>)
 8000bea:	bb1b      	cbnz	r3, 8000c34 <_svfiprintf_r+0x1b0>
 8000bec:	9b03      	ldr	r3, [sp, #12]
 8000bee:	3307      	adds	r3, #7
 8000bf0:	f023 0307 	bic.w	r3, r3, #7
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	9303      	str	r3, [sp, #12]
 8000bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bfa:	4433      	add	r3, r6
 8000bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bfe:	e76a      	b.n	8000ad6 <_svfiprintf_r+0x52>
 8000c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c04:	460c      	mov	r4, r1
 8000c06:	2001      	movs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <_svfiprintf_r+0xd8>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	3401      	adds	r4, #1
 8000c0e:	9305      	str	r3, [sp, #20]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 0c0a 	mov.w	ip, #10
 8000c16:	4620      	mov	r0, r4
 8000c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c1c:	3a30      	subs	r2, #48	@ 0x30
 8000c1e:	2a09      	cmp	r2, #9
 8000c20:	d903      	bls.n	8000c2a <_svfiprintf_r+0x1a6>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0c6      	beq.n	8000bb4 <_svfiprintf_r+0x130>
 8000c26:	9105      	str	r1, [sp, #20]
 8000c28:	e7c4      	b.n	8000bb4 <_svfiprintf_r+0x130>
 8000c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c2e:	4604      	mov	r4, r0
 8000c30:	2301      	movs	r3, #1
 8000c32:	e7f0      	b.n	8000c16 <_svfiprintf_r+0x192>
 8000c34:	ab03      	add	r3, sp, #12
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	462a      	mov	r2, r5
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <_svfiprintf_r+0x1f0>)
 8000c3c:	a904      	add	r1, sp, #16
 8000c3e:	4638      	mov	r0, r7
 8000c40:	f3af 8000 	nop.w
 8000c44:	1c42      	adds	r2, r0, #1
 8000c46:	4606      	mov	r6, r0
 8000c48:	d1d6      	bne.n	8000bf8 <_svfiprintf_r+0x174>
 8000c4a:	89ab      	ldrh	r3, [r5, #12]
 8000c4c:	065b      	lsls	r3, r3, #25
 8000c4e:	f53f af2d 	bmi.w	8000aac <_svfiprintf_r+0x28>
 8000c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c54:	e72c      	b.n	8000ab0 <_svfiprintf_r+0x2c>
 8000c56:	ab03      	add	r3, sp, #12
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	462a      	mov	r2, r5
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <_svfiprintf_r+0x1f0>)
 8000c5e:	a904      	add	r1, sp, #16
 8000c60:	4638      	mov	r0, r7
 8000c62:	f000 fa5d 	bl	8001120 <_printf_i>
 8000c66:	e7ed      	b.n	8000c44 <_svfiprintf_r+0x1c0>
 8000c68:	080019ea 	.word	0x080019ea
 8000c6c:	080019f4 	.word	0x080019f4
 8000c70:	00000000 	.word	0x00000000
 8000c74:	080009cf 	.word	0x080009cf
 8000c78:	080019f0 	.word	0x080019f0

08000c7c <__sfputc_r>:
 8000c7c:	6893      	ldr	r3, [r2, #8]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	b410      	push	{r4}
 8000c84:	6093      	str	r3, [r2, #8]
 8000c86:	da08      	bge.n	8000c9a <__sfputc_r+0x1e>
 8000c88:	6994      	ldr	r4, [r2, #24]
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	db01      	blt.n	8000c92 <__sfputc_r+0x16>
 8000c8e:	290a      	cmp	r1, #10
 8000c90:	d103      	bne.n	8000c9a <__sfputc_r+0x1e>
 8000c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c96:	f000 bc8a 	b.w	80015ae <__swbuf_r>
 8000c9a:	6813      	ldr	r3, [r2, #0]
 8000c9c:	1c58      	adds	r0, r3, #1
 8000c9e:	6010      	str	r0, [r2, #0]
 8000ca0:	7019      	strb	r1, [r3, #0]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <__sfputs_r>:
 8000caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cac:	4606      	mov	r6, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	4614      	mov	r4, r2
 8000cb2:	18d5      	adds	r5, r2, r3
 8000cb4:	42ac      	cmp	r4, r5
 8000cb6:	d101      	bne.n	8000cbc <__sfputs_r+0x12>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e007      	b.n	8000ccc <__sfputs_r+0x22>
 8000cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cc0:	463a      	mov	r2, r7
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f7ff ffda 	bl	8000c7c <__sfputc_r>
 8000cc8:	1c43      	adds	r3, r0, #1
 8000cca:	d1f3      	bne.n	8000cb4 <__sfputs_r+0xa>
 8000ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cd0 <_vfiprintf_r>:
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	b09d      	sub	sp, #116	@ 0x74
 8000cd8:	4614      	mov	r4, r2
 8000cda:	4698      	mov	r8, r3
 8000cdc:	4606      	mov	r6, r0
 8000cde:	b118      	cbz	r0, 8000ce8 <_vfiprintf_r+0x18>
 8000ce0:	6a03      	ldr	r3, [r0, #32]
 8000ce2:	b90b      	cbnz	r3, 8000ce8 <_vfiprintf_r+0x18>
 8000ce4:	f7ff fdf6 	bl	80008d4 <__sinit>
 8000ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cea:	07d9      	lsls	r1, r3, #31
 8000cec:	d405      	bmi.n	8000cfa <_vfiprintf_r+0x2a>
 8000cee:	89ab      	ldrh	r3, [r5, #12]
 8000cf0:	059a      	lsls	r2, r3, #22
 8000cf2:	d402      	bmi.n	8000cfa <_vfiprintf_r+0x2a>
 8000cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cf6:	f7ff fe68 	bl	80009ca <__retarget_lock_acquire_recursive>
 8000cfa:	89ab      	ldrh	r3, [r5, #12]
 8000cfc:	071b      	lsls	r3, r3, #28
 8000cfe:	d501      	bpl.n	8000d04 <_vfiprintf_r+0x34>
 8000d00:	692b      	ldr	r3, [r5, #16]
 8000d02:	b99b      	cbnz	r3, 8000d2c <_vfiprintf_r+0x5c>
 8000d04:	4629      	mov	r1, r5
 8000d06:	4630      	mov	r0, r6
 8000d08:	f000 fc90 	bl	800162c <__swsetup_r>
 8000d0c:	b170      	cbz	r0, 8000d2c <_vfiprintf_r+0x5c>
 8000d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d10:	07dc      	lsls	r4, r3, #31
 8000d12:	d504      	bpl.n	8000d1e <_vfiprintf_r+0x4e>
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	b01d      	add	sp, #116	@ 0x74
 8000d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d1e:	89ab      	ldrh	r3, [r5, #12]
 8000d20:	0598      	lsls	r0, r3, #22
 8000d22:	d4f7      	bmi.n	8000d14 <_vfiprintf_r+0x44>
 8000d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d26:	f7ff fe51 	bl	80009cc <__retarget_lock_release_recursive>
 8000d2a:	e7f3      	b.n	8000d14 <_vfiprintf_r+0x44>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d30:	2320      	movs	r3, #32
 8000d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d3a:	2330      	movs	r3, #48	@ 0x30
 8000d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000eec <_vfiprintf_r+0x21c>
 8000d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d44:	f04f 0901 	mov.w	r9, #1
 8000d48:	4623      	mov	r3, r4
 8000d4a:	469a      	mov	sl, r3
 8000d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d50:	b10a      	cbz	r2, 8000d56 <_vfiprintf_r+0x86>
 8000d52:	2a25      	cmp	r2, #37	@ 0x25
 8000d54:	d1f9      	bne.n	8000d4a <_vfiprintf_r+0x7a>
 8000d56:	ebba 0b04 	subs.w	fp, sl, r4
 8000d5a:	d00b      	beq.n	8000d74 <_vfiprintf_r+0xa4>
 8000d5c:	465b      	mov	r3, fp
 8000d5e:	4622      	mov	r2, r4
 8000d60:	4629      	mov	r1, r5
 8000d62:	4630      	mov	r0, r6
 8000d64:	f7ff ffa1 	bl	8000caa <__sfputs_r>
 8000d68:	3001      	adds	r0, #1
 8000d6a:	f000 80a7 	beq.w	8000ebc <_vfiprintf_r+0x1ec>
 8000d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d70:	445a      	add	r2, fp
 8000d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d74:	f89a 3000 	ldrb.w	r3, [sl]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 809f 	beq.w	8000ebc <_vfiprintf_r+0x1ec>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d88:	f10a 0a01 	add.w	sl, sl, #1
 8000d8c:	9304      	str	r3, [sp, #16]
 8000d8e:	9307      	str	r3, [sp, #28]
 8000d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d96:	4654      	mov	r4, sl
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9e:	4853      	ldr	r0, [pc, #332]	@ (8000eec <_vfiprintf_r+0x21c>)
 8000da0:	f7ff fa1e 	bl	80001e0 <memchr>
 8000da4:	9a04      	ldr	r2, [sp, #16]
 8000da6:	b9d8      	cbnz	r0, 8000de0 <_vfiprintf_r+0x110>
 8000da8:	06d1      	lsls	r1, r2, #27
 8000daa:	bf44      	itt	mi
 8000dac:	2320      	movmi	r3, #32
 8000dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000db2:	0713      	lsls	r3, r2, #28
 8000db4:	bf44      	itt	mi
 8000db6:	232b      	movmi	r3, #43	@ 0x2b
 8000db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dc2:	d015      	beq.n	8000df0 <_vfiprintf_r+0x120>
 8000dc4:	9a07      	ldr	r2, [sp, #28]
 8000dc6:	4654      	mov	r4, sl
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f04f 0c0a 	mov.w	ip, #10
 8000dce:	4621      	mov	r1, r4
 8000dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dd4:	3b30      	subs	r3, #48	@ 0x30
 8000dd6:	2b09      	cmp	r3, #9
 8000dd8:	d94b      	bls.n	8000e72 <_vfiprintf_r+0x1a2>
 8000dda:	b1b0      	cbz	r0, 8000e0a <_vfiprintf_r+0x13a>
 8000ddc:	9207      	str	r2, [sp, #28]
 8000dde:	e014      	b.n	8000e0a <_vfiprintf_r+0x13a>
 8000de0:	eba0 0308 	sub.w	r3, r0, r8
 8000de4:	fa09 f303 	lsl.w	r3, r9, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	9304      	str	r3, [sp, #16]
 8000dec:	46a2      	mov	sl, r4
 8000dee:	e7d2      	b.n	8000d96 <_vfiprintf_r+0xc6>
 8000df0:	9b03      	ldr	r3, [sp, #12]
 8000df2:	1d19      	adds	r1, r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	9103      	str	r1, [sp, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bfbb      	ittet	lt
 8000dfc:	425b      	neglt	r3, r3
 8000dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8000e02:	9307      	strge	r3, [sp, #28]
 8000e04:	9307      	strlt	r3, [sp, #28]
 8000e06:	bfb8      	it	lt
 8000e08:	9204      	strlt	r2, [sp, #16]
 8000e0a:	7823      	ldrb	r3, [r4, #0]
 8000e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e0e:	d10a      	bne.n	8000e26 <_vfiprintf_r+0x156>
 8000e10:	7863      	ldrb	r3, [r4, #1]
 8000e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e14:	d132      	bne.n	8000e7c <_vfiprintf_r+0x1ac>
 8000e16:	9b03      	ldr	r3, [sp, #12]
 8000e18:	1d1a      	adds	r2, r3, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	9203      	str	r2, [sp, #12]
 8000e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e22:	3402      	adds	r4, #2
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000efc <_vfiprintf_r+0x22c>
 8000e2a:	7821      	ldrb	r1, [r4, #0]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4650      	mov	r0, sl
 8000e30:	f7ff f9d6 	bl	80001e0 <memchr>
 8000e34:	b138      	cbz	r0, 8000e46 <_vfiprintf_r+0x176>
 8000e36:	9b04      	ldr	r3, [sp, #16]
 8000e38:	eba0 000a 	sub.w	r0, r0, sl
 8000e3c:	2240      	movs	r2, #64	@ 0x40
 8000e3e:	4082      	lsls	r2, r0
 8000e40:	4313      	orrs	r3, r2
 8000e42:	3401      	adds	r4, #1
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e4a:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <_vfiprintf_r+0x220>)
 8000e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e50:	2206      	movs	r2, #6
 8000e52:	f7ff f9c5 	bl	80001e0 <memchr>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d03f      	beq.n	8000eda <_vfiprintf_r+0x20a>
 8000e5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <_vfiprintf_r+0x224>)
 8000e5c:	bb1b      	cbnz	r3, 8000ea6 <_vfiprintf_r+0x1d6>
 8000e5e:	9b03      	ldr	r3, [sp, #12]
 8000e60:	3307      	adds	r3, #7
 8000e62:	f023 0307 	bic.w	r3, r3, #7
 8000e66:	3308      	adds	r3, #8
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e6c:	443b      	add	r3, r7
 8000e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e70:	e76a      	b.n	8000d48 <_vfiprintf_r+0x78>
 8000e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e76:	460c      	mov	r4, r1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	e7a8      	b.n	8000dce <_vfiprintf_r+0xfe>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	3401      	adds	r4, #1
 8000e80:	9305      	str	r3, [sp, #20]
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 0c0a 	mov.w	ip, #10
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e8e:	3a30      	subs	r2, #48	@ 0x30
 8000e90:	2a09      	cmp	r2, #9
 8000e92:	d903      	bls.n	8000e9c <_vfiprintf_r+0x1cc>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0c6      	beq.n	8000e26 <_vfiprintf_r+0x156>
 8000e98:	9105      	str	r1, [sp, #20]
 8000e9a:	e7c4      	b.n	8000e26 <_vfiprintf_r+0x156>
 8000e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e7f0      	b.n	8000e88 <_vfiprintf_r+0x1b8>
 8000ea6:	ab03      	add	r3, sp, #12
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	462a      	mov	r2, r5
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <_vfiprintf_r+0x228>)
 8000eae:	a904      	add	r1, sp, #16
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4607      	mov	r7, r0
 8000eb8:	1c78      	adds	r0, r7, #1
 8000eba:	d1d6      	bne.n	8000e6a <_vfiprintf_r+0x19a>
 8000ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ebe:	07d9      	lsls	r1, r3, #31
 8000ec0:	d405      	bmi.n	8000ece <_vfiprintf_r+0x1fe>
 8000ec2:	89ab      	ldrh	r3, [r5, #12]
 8000ec4:	059a      	lsls	r2, r3, #22
 8000ec6:	d402      	bmi.n	8000ece <_vfiprintf_r+0x1fe>
 8000ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000eca:	f7ff fd7f 	bl	80009cc <__retarget_lock_release_recursive>
 8000ece:	89ab      	ldrh	r3, [r5, #12]
 8000ed0:	065b      	lsls	r3, r3, #25
 8000ed2:	f53f af1f 	bmi.w	8000d14 <_vfiprintf_r+0x44>
 8000ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ed8:	e71e      	b.n	8000d18 <_vfiprintf_r+0x48>
 8000eda:	ab03      	add	r3, sp, #12
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	462a      	mov	r2, r5
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <_vfiprintf_r+0x228>)
 8000ee2:	a904      	add	r1, sp, #16
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f000 f91b 	bl	8001120 <_printf_i>
 8000eea:	e7e4      	b.n	8000eb6 <_vfiprintf_r+0x1e6>
 8000eec:	080019ea 	.word	0x080019ea
 8000ef0:	080019f4 	.word	0x080019f4
 8000ef4:	00000000 	.word	0x00000000
 8000ef8:	08000cab 	.word	0x08000cab
 8000efc:	080019f0 	.word	0x080019f0

08000f00 <sbrk_aligned>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	4e0f      	ldr	r6, [pc, #60]	@ (8000f40 <sbrk_aligned+0x40>)
 8000f04:	460c      	mov	r4, r1
 8000f06:	6831      	ldr	r1, [r6, #0]
 8000f08:	4605      	mov	r5, r0
 8000f0a:	b911      	cbnz	r1, 8000f12 <sbrk_aligned+0x12>
 8000f0c:	f000 fc94 	bl	8001838 <_sbrk_r>
 8000f10:	6030      	str	r0, [r6, #0]
 8000f12:	4621      	mov	r1, r4
 8000f14:	4628      	mov	r0, r5
 8000f16:	f000 fc8f 	bl	8001838 <_sbrk_r>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	d103      	bne.n	8000f26 <sbrk_aligned+0x26>
 8000f1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	1cc4      	adds	r4, r0, #3
 8000f28:	f024 0403 	bic.w	r4, r4, #3
 8000f2c:	42a0      	cmp	r0, r4
 8000f2e:	d0f8      	beq.n	8000f22 <sbrk_aligned+0x22>
 8000f30:	1a21      	subs	r1, r4, r0
 8000f32:	4628      	mov	r0, r5
 8000f34:	f000 fc80 	bl	8001838 <_sbrk_r>
 8000f38:	3001      	adds	r0, #1
 8000f3a:	d1f2      	bne.n	8000f22 <sbrk_aligned+0x22>
 8000f3c:	e7ef      	b.n	8000f1e <sbrk_aligned+0x1e>
 8000f3e:	bf00      	nop
 8000f40:	200002c8 	.word	0x200002c8

08000f44 <_malloc_r>:
 8000f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f48:	1ccd      	adds	r5, r1, #3
 8000f4a:	f025 0503 	bic.w	r5, r5, #3
 8000f4e:	3508      	adds	r5, #8
 8000f50:	2d0c      	cmp	r5, #12
 8000f52:	bf38      	it	cc
 8000f54:	250c      	movcc	r5, #12
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	4606      	mov	r6, r0
 8000f5a:	db01      	blt.n	8000f60 <_malloc_r+0x1c>
 8000f5c:	42a9      	cmp	r1, r5
 8000f5e:	d904      	bls.n	8000f6a <_malloc_r+0x26>
 8000f60:	230c      	movs	r3, #12
 8000f62:	6033      	str	r3, [r6, #0]
 8000f64:	2000      	movs	r0, #0
 8000f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001040 <_malloc_r+0xfc>
 8000f6e:	f000 faa1 	bl	80014b4 <__malloc_lock>
 8000f72:	f8d8 3000 	ldr.w	r3, [r8]
 8000f76:	461c      	mov	r4, r3
 8000f78:	bb44      	cbnz	r4, 8000fcc <_malloc_r+0x88>
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f7ff ffbf 	bl	8000f00 <sbrk_aligned>
 8000f82:	1c43      	adds	r3, r0, #1
 8000f84:	4604      	mov	r4, r0
 8000f86:	d158      	bne.n	800103a <_malloc_r+0xf6>
 8000f88:	f8d8 4000 	ldr.w	r4, [r8]
 8000f8c:	4627      	mov	r7, r4
 8000f8e:	2f00      	cmp	r7, #0
 8000f90:	d143      	bne.n	800101a <_malloc_r+0xd6>
 8000f92:	2c00      	cmp	r4, #0
 8000f94:	d04b      	beq.n	800102e <_malloc_r+0xea>
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	4639      	mov	r1, r7
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	eb04 0903 	add.w	r9, r4, r3
 8000fa0:	f000 fc4a 	bl	8001838 <_sbrk_r>
 8000fa4:	4581      	cmp	r9, r0
 8000fa6:	d142      	bne.n	800102e <_malloc_r+0xea>
 8000fa8:	6821      	ldr	r1, [r4, #0]
 8000faa:	1a6d      	subs	r5, r5, r1
 8000fac:	4629      	mov	r1, r5
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f7ff ffa6 	bl	8000f00 <sbrk_aligned>
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	d03a      	beq.n	800102e <_malloc_r+0xea>
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	442b      	add	r3, r5
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	bb62      	cbnz	r2, 8001020 <_malloc_r+0xdc>
 8000fc6:	f8c8 7000 	str.w	r7, [r8]
 8000fca:	e00f      	b.n	8000fec <_malloc_r+0xa8>
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	1b52      	subs	r2, r2, r5
 8000fd0:	d420      	bmi.n	8001014 <_malloc_r+0xd0>
 8000fd2:	2a0b      	cmp	r2, #11
 8000fd4:	d917      	bls.n	8001006 <_malloc_r+0xc2>
 8000fd6:	1961      	adds	r1, r4, r5
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	6025      	str	r5, [r4, #0]
 8000fdc:	bf18      	it	ne
 8000fde:	6059      	strne	r1, [r3, #4]
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	bf08      	it	eq
 8000fe4:	f8c8 1000 	streq.w	r1, [r8]
 8000fe8:	5162      	str	r2, [r4, r5]
 8000fea:	604b      	str	r3, [r1, #4]
 8000fec:	4630      	mov	r0, r6
 8000fee:	f000 fa67 	bl	80014c0 <__malloc_unlock>
 8000ff2:	f104 000b 	add.w	r0, r4, #11
 8000ff6:	1d23      	adds	r3, r4, #4
 8000ff8:	f020 0007 	bic.w	r0, r0, #7
 8000ffc:	1ac2      	subs	r2, r0, r3
 8000ffe:	bf1c      	itt	ne
 8001000:	1a1b      	subne	r3, r3, r0
 8001002:	50a3      	strne	r3, [r4, r2]
 8001004:	e7af      	b.n	8000f66 <_malloc_r+0x22>
 8001006:	6862      	ldr	r2, [r4, #4]
 8001008:	42a3      	cmp	r3, r4
 800100a:	bf0c      	ite	eq
 800100c:	f8c8 2000 	streq.w	r2, [r8]
 8001010:	605a      	strne	r2, [r3, #4]
 8001012:	e7eb      	b.n	8000fec <_malloc_r+0xa8>
 8001014:	4623      	mov	r3, r4
 8001016:	6864      	ldr	r4, [r4, #4]
 8001018:	e7ae      	b.n	8000f78 <_malloc_r+0x34>
 800101a:	463c      	mov	r4, r7
 800101c:	687f      	ldr	r7, [r7, #4]
 800101e:	e7b6      	b.n	8000f8e <_malloc_r+0x4a>
 8001020:	461a      	mov	r2, r3
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	42a3      	cmp	r3, r4
 8001026:	d1fb      	bne.n	8001020 <_malloc_r+0xdc>
 8001028:	2300      	movs	r3, #0
 800102a:	6053      	str	r3, [r2, #4]
 800102c:	e7de      	b.n	8000fec <_malloc_r+0xa8>
 800102e:	230c      	movs	r3, #12
 8001030:	6033      	str	r3, [r6, #0]
 8001032:	4630      	mov	r0, r6
 8001034:	f000 fa44 	bl	80014c0 <__malloc_unlock>
 8001038:	e794      	b.n	8000f64 <_malloc_r+0x20>
 800103a:	6005      	str	r5, [r0, #0]
 800103c:	e7d6      	b.n	8000fec <_malloc_r+0xa8>
 800103e:	bf00      	nop
 8001040:	200002cc 	.word	0x200002cc

08001044 <_printf_common>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	4616      	mov	r6, r2
 800104a:	4698      	mov	r8, r3
 800104c:	688a      	ldr	r2, [r1, #8]
 800104e:	690b      	ldr	r3, [r1, #16]
 8001050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001054:	4293      	cmp	r3, r2
 8001056:	bfb8      	it	lt
 8001058:	4613      	movlt	r3, r2
 800105a:	6033      	str	r3, [r6, #0]
 800105c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001060:	4607      	mov	r7, r0
 8001062:	460c      	mov	r4, r1
 8001064:	b10a      	cbz	r2, 800106a <_printf_common+0x26>
 8001066:	3301      	adds	r3, #1
 8001068:	6033      	str	r3, [r6, #0]
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	0699      	lsls	r1, r3, #26
 800106e:	bf42      	ittt	mi
 8001070:	6833      	ldrmi	r3, [r6, #0]
 8001072:	3302      	addmi	r3, #2
 8001074:	6033      	strmi	r3, [r6, #0]
 8001076:	6825      	ldr	r5, [r4, #0]
 8001078:	f015 0506 	ands.w	r5, r5, #6
 800107c:	d106      	bne.n	800108c <_printf_common+0x48>
 800107e:	f104 0a19 	add.w	sl, r4, #25
 8001082:	68e3      	ldr	r3, [r4, #12]
 8001084:	6832      	ldr	r2, [r6, #0]
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	42ab      	cmp	r3, r5
 800108a:	dc26      	bgt.n	80010da <_printf_common+0x96>
 800108c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	3b00      	subs	r3, #0
 8001094:	bf18      	it	ne
 8001096:	2301      	movne	r3, #1
 8001098:	0692      	lsls	r2, r2, #26
 800109a:	d42b      	bmi.n	80010f4 <_printf_common+0xb0>
 800109c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80010a0:	4641      	mov	r1, r8
 80010a2:	4638      	mov	r0, r7
 80010a4:	47c8      	blx	r9
 80010a6:	3001      	adds	r0, #1
 80010a8:	d01e      	beq.n	80010e8 <_printf_common+0xa4>
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	6922      	ldr	r2, [r4, #16]
 80010ae:	f003 0306 	and.w	r3, r3, #6
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf02      	ittt	eq
 80010b6:	68e5      	ldreq	r5, [r4, #12]
 80010b8:	6833      	ldreq	r3, [r6, #0]
 80010ba:	1aed      	subeq	r5, r5, r3
 80010bc:	68a3      	ldr	r3, [r4, #8]
 80010be:	bf0c      	ite	eq
 80010c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010c4:	2500      	movne	r5, #0
 80010c6:	4293      	cmp	r3, r2
 80010c8:	bfc4      	itt	gt
 80010ca:	1a9b      	subgt	r3, r3, r2
 80010cc:	18ed      	addgt	r5, r5, r3
 80010ce:	2600      	movs	r6, #0
 80010d0:	341a      	adds	r4, #26
 80010d2:	42b5      	cmp	r5, r6
 80010d4:	d11a      	bne.n	800110c <_printf_common+0xc8>
 80010d6:	2000      	movs	r0, #0
 80010d8:	e008      	b.n	80010ec <_printf_common+0xa8>
 80010da:	2301      	movs	r3, #1
 80010dc:	4652      	mov	r2, sl
 80010de:	4641      	mov	r1, r8
 80010e0:	4638      	mov	r0, r7
 80010e2:	47c8      	blx	r9
 80010e4:	3001      	adds	r0, #1
 80010e6:	d103      	bne.n	80010f0 <_printf_common+0xac>
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	3501      	adds	r5, #1
 80010f2:	e7c6      	b.n	8001082 <_printf_common+0x3e>
 80010f4:	18e1      	adds	r1, r4, r3
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	2030      	movs	r0, #48	@ 0x30
 80010fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80010fe:	4422      	add	r2, r4
 8001100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001108:	3302      	adds	r3, #2
 800110a:	e7c7      	b.n	800109c <_printf_common+0x58>
 800110c:	2301      	movs	r3, #1
 800110e:	4622      	mov	r2, r4
 8001110:	4641      	mov	r1, r8
 8001112:	4638      	mov	r0, r7
 8001114:	47c8      	blx	r9
 8001116:	3001      	adds	r0, #1
 8001118:	d0e6      	beq.n	80010e8 <_printf_common+0xa4>
 800111a:	3601      	adds	r6, #1
 800111c:	e7d9      	b.n	80010d2 <_printf_common+0x8e>
	...

08001120 <_printf_i>:
 8001120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001124:	7e0f      	ldrb	r7, [r1, #24]
 8001126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001128:	2f78      	cmp	r7, #120	@ 0x78
 800112a:	4691      	mov	r9, r2
 800112c:	4680      	mov	r8, r0
 800112e:	460c      	mov	r4, r1
 8001130:	469a      	mov	sl, r3
 8001132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001136:	d807      	bhi.n	8001148 <_printf_i+0x28>
 8001138:	2f62      	cmp	r7, #98	@ 0x62
 800113a:	d80a      	bhi.n	8001152 <_printf_i+0x32>
 800113c:	2f00      	cmp	r7, #0
 800113e:	f000 80d1 	beq.w	80012e4 <_printf_i+0x1c4>
 8001142:	2f58      	cmp	r7, #88	@ 0x58
 8001144:	f000 80b8 	beq.w	80012b8 <_printf_i+0x198>
 8001148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800114c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001150:	e03a      	b.n	80011c8 <_printf_i+0xa8>
 8001152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001156:	2b15      	cmp	r3, #21
 8001158:	d8f6      	bhi.n	8001148 <_printf_i+0x28>
 800115a:	a101      	add	r1, pc, #4	@ (adr r1, 8001160 <_printf_i+0x40>)
 800115c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001160:	080011b9 	.word	0x080011b9
 8001164:	080011cd 	.word	0x080011cd
 8001168:	08001149 	.word	0x08001149
 800116c:	08001149 	.word	0x08001149
 8001170:	08001149 	.word	0x08001149
 8001174:	08001149 	.word	0x08001149
 8001178:	080011cd 	.word	0x080011cd
 800117c:	08001149 	.word	0x08001149
 8001180:	08001149 	.word	0x08001149
 8001184:	08001149 	.word	0x08001149
 8001188:	08001149 	.word	0x08001149
 800118c:	080012cb 	.word	0x080012cb
 8001190:	080011f7 	.word	0x080011f7
 8001194:	08001285 	.word	0x08001285
 8001198:	08001149 	.word	0x08001149
 800119c:	08001149 	.word	0x08001149
 80011a0:	080012ed 	.word	0x080012ed
 80011a4:	08001149 	.word	0x08001149
 80011a8:	080011f7 	.word	0x080011f7
 80011ac:	08001149 	.word	0x08001149
 80011b0:	08001149 	.word	0x08001149
 80011b4:	0800128d 	.word	0x0800128d
 80011b8:	6833      	ldr	r3, [r6, #0]
 80011ba:	1d1a      	adds	r2, r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6032      	str	r2, [r6, #0]
 80011c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80011c8:	2301      	movs	r3, #1
 80011ca:	e09c      	b.n	8001306 <_printf_i+0x1e6>
 80011cc:	6833      	ldr	r3, [r6, #0]
 80011ce:	6820      	ldr	r0, [r4, #0]
 80011d0:	1d19      	adds	r1, r3, #4
 80011d2:	6031      	str	r1, [r6, #0]
 80011d4:	0606      	lsls	r6, r0, #24
 80011d6:	d501      	bpl.n	80011dc <_printf_i+0xbc>
 80011d8:	681d      	ldr	r5, [r3, #0]
 80011da:	e003      	b.n	80011e4 <_printf_i+0xc4>
 80011dc:	0645      	lsls	r5, r0, #25
 80011de:	d5fb      	bpl.n	80011d8 <_printf_i+0xb8>
 80011e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80011e4:	2d00      	cmp	r5, #0
 80011e6:	da03      	bge.n	80011f0 <_printf_i+0xd0>
 80011e8:	232d      	movs	r3, #45	@ 0x2d
 80011ea:	426d      	negs	r5, r5
 80011ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011f0:	4858      	ldr	r0, [pc, #352]	@ (8001354 <_printf_i+0x234>)
 80011f2:	230a      	movs	r3, #10
 80011f4:	e011      	b.n	800121a <_printf_i+0xfa>
 80011f6:	6821      	ldr	r1, [r4, #0]
 80011f8:	6833      	ldr	r3, [r6, #0]
 80011fa:	0608      	lsls	r0, r1, #24
 80011fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001200:	d402      	bmi.n	8001208 <_printf_i+0xe8>
 8001202:	0649      	lsls	r1, r1, #25
 8001204:	bf48      	it	mi
 8001206:	b2ad      	uxthmi	r5, r5
 8001208:	2f6f      	cmp	r7, #111	@ 0x6f
 800120a:	4852      	ldr	r0, [pc, #328]	@ (8001354 <_printf_i+0x234>)
 800120c:	6033      	str	r3, [r6, #0]
 800120e:	bf14      	ite	ne
 8001210:	230a      	movne	r3, #10
 8001212:	2308      	moveq	r3, #8
 8001214:	2100      	movs	r1, #0
 8001216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800121a:	6866      	ldr	r6, [r4, #4]
 800121c:	60a6      	str	r6, [r4, #8]
 800121e:	2e00      	cmp	r6, #0
 8001220:	db05      	blt.n	800122e <_printf_i+0x10e>
 8001222:	6821      	ldr	r1, [r4, #0]
 8001224:	432e      	orrs	r6, r5
 8001226:	f021 0104 	bic.w	r1, r1, #4
 800122a:	6021      	str	r1, [r4, #0]
 800122c:	d04b      	beq.n	80012c6 <_printf_i+0x1a6>
 800122e:	4616      	mov	r6, r2
 8001230:	fbb5 f1f3 	udiv	r1, r5, r3
 8001234:	fb03 5711 	mls	r7, r3, r1, r5
 8001238:	5dc7      	ldrb	r7, [r0, r7]
 800123a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800123e:	462f      	mov	r7, r5
 8001240:	42bb      	cmp	r3, r7
 8001242:	460d      	mov	r5, r1
 8001244:	d9f4      	bls.n	8001230 <_printf_i+0x110>
 8001246:	2b08      	cmp	r3, #8
 8001248:	d10b      	bne.n	8001262 <_printf_i+0x142>
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	07df      	lsls	r7, r3, #31
 800124e:	d508      	bpl.n	8001262 <_printf_i+0x142>
 8001250:	6923      	ldr	r3, [r4, #16]
 8001252:	6861      	ldr	r1, [r4, #4]
 8001254:	4299      	cmp	r1, r3
 8001256:	bfde      	ittt	le
 8001258:	2330      	movle	r3, #48	@ 0x30
 800125a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800125e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001262:	1b92      	subs	r2, r2, r6
 8001264:	6122      	str	r2, [r4, #16]
 8001266:	f8cd a000 	str.w	sl, [sp]
 800126a:	464b      	mov	r3, r9
 800126c:	aa03      	add	r2, sp, #12
 800126e:	4621      	mov	r1, r4
 8001270:	4640      	mov	r0, r8
 8001272:	f7ff fee7 	bl	8001044 <_printf_common>
 8001276:	3001      	adds	r0, #1
 8001278:	d14a      	bne.n	8001310 <_printf_i+0x1f0>
 800127a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800127e:	b004      	add	sp, #16
 8001280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	4832      	ldr	r0, [pc, #200]	@ (8001358 <_printf_i+0x238>)
 800128e:	2778      	movs	r7, #120	@ 0x78
 8001290:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	6831      	ldr	r1, [r6, #0]
 8001298:	061f      	lsls	r7, r3, #24
 800129a:	f851 5b04 	ldr.w	r5, [r1], #4
 800129e:	d402      	bmi.n	80012a6 <_printf_i+0x186>
 80012a0:	065f      	lsls	r7, r3, #25
 80012a2:	bf48      	it	mi
 80012a4:	b2ad      	uxthmi	r5, r5
 80012a6:	6031      	str	r1, [r6, #0]
 80012a8:	07d9      	lsls	r1, r3, #31
 80012aa:	bf44      	itt	mi
 80012ac:	f043 0320 	orrmi.w	r3, r3, #32
 80012b0:	6023      	strmi	r3, [r4, #0]
 80012b2:	b11d      	cbz	r5, 80012bc <_printf_i+0x19c>
 80012b4:	2310      	movs	r3, #16
 80012b6:	e7ad      	b.n	8001214 <_printf_i+0xf4>
 80012b8:	4826      	ldr	r0, [pc, #152]	@ (8001354 <_printf_i+0x234>)
 80012ba:	e7e9      	b.n	8001290 <_printf_i+0x170>
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	f023 0320 	bic.w	r3, r3, #32
 80012c2:	6023      	str	r3, [r4, #0]
 80012c4:	e7f6      	b.n	80012b4 <_printf_i+0x194>
 80012c6:	4616      	mov	r6, r2
 80012c8:	e7bd      	b.n	8001246 <_printf_i+0x126>
 80012ca:	6833      	ldr	r3, [r6, #0]
 80012cc:	6825      	ldr	r5, [r4, #0]
 80012ce:	6961      	ldr	r1, [r4, #20]
 80012d0:	1d18      	adds	r0, r3, #4
 80012d2:	6030      	str	r0, [r6, #0]
 80012d4:	062e      	lsls	r6, r5, #24
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	d501      	bpl.n	80012de <_printf_i+0x1be>
 80012da:	6019      	str	r1, [r3, #0]
 80012dc:	e002      	b.n	80012e4 <_printf_i+0x1c4>
 80012de:	0668      	lsls	r0, r5, #25
 80012e0:	d5fb      	bpl.n	80012da <_printf_i+0x1ba>
 80012e2:	8019      	strh	r1, [r3, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	6123      	str	r3, [r4, #16]
 80012e8:	4616      	mov	r6, r2
 80012ea:	e7bc      	b.n	8001266 <_printf_i+0x146>
 80012ec:	6833      	ldr	r3, [r6, #0]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	6032      	str	r2, [r6, #0]
 80012f2:	681e      	ldr	r6, [r3, #0]
 80012f4:	6862      	ldr	r2, [r4, #4]
 80012f6:	2100      	movs	r1, #0
 80012f8:	4630      	mov	r0, r6
 80012fa:	f7fe ff71 	bl	80001e0 <memchr>
 80012fe:	b108      	cbz	r0, 8001304 <_printf_i+0x1e4>
 8001300:	1b80      	subs	r0, r0, r6
 8001302:	6060      	str	r0, [r4, #4]
 8001304:	6863      	ldr	r3, [r4, #4]
 8001306:	6123      	str	r3, [r4, #16]
 8001308:	2300      	movs	r3, #0
 800130a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800130e:	e7aa      	b.n	8001266 <_printf_i+0x146>
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	4632      	mov	r2, r6
 8001314:	4649      	mov	r1, r9
 8001316:	4640      	mov	r0, r8
 8001318:	47d0      	blx	sl
 800131a:	3001      	adds	r0, #1
 800131c:	d0ad      	beq.n	800127a <_printf_i+0x15a>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	079b      	lsls	r3, r3, #30
 8001322:	d413      	bmi.n	800134c <_printf_i+0x22c>
 8001324:	68e0      	ldr	r0, [r4, #12]
 8001326:	9b03      	ldr	r3, [sp, #12]
 8001328:	4298      	cmp	r0, r3
 800132a:	bfb8      	it	lt
 800132c:	4618      	movlt	r0, r3
 800132e:	e7a6      	b.n	800127e <_printf_i+0x15e>
 8001330:	2301      	movs	r3, #1
 8001332:	4632      	mov	r2, r6
 8001334:	4649      	mov	r1, r9
 8001336:	4640      	mov	r0, r8
 8001338:	47d0      	blx	sl
 800133a:	3001      	adds	r0, #1
 800133c:	d09d      	beq.n	800127a <_printf_i+0x15a>
 800133e:	3501      	adds	r5, #1
 8001340:	68e3      	ldr	r3, [r4, #12]
 8001342:	9903      	ldr	r1, [sp, #12]
 8001344:	1a5b      	subs	r3, r3, r1
 8001346:	42ab      	cmp	r3, r5
 8001348:	dcf2      	bgt.n	8001330 <_printf_i+0x210>
 800134a:	e7eb      	b.n	8001324 <_printf_i+0x204>
 800134c:	2500      	movs	r5, #0
 800134e:	f104 0619 	add.w	r6, r4, #25
 8001352:	e7f5      	b.n	8001340 <_printf_i+0x220>
 8001354:	080019fb 	.word	0x080019fb
 8001358:	08001a0c 	.word	0x08001a0c

0800135c <__sflush_r>:
 800135c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001364:	0716      	lsls	r6, r2, #28
 8001366:	4605      	mov	r5, r0
 8001368:	460c      	mov	r4, r1
 800136a:	d454      	bmi.n	8001416 <__sflush_r+0xba>
 800136c:	684b      	ldr	r3, [r1, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	dc02      	bgt.n	8001378 <__sflush_r+0x1c>
 8001372:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd48      	ble.n	800140a <__sflush_r+0xae>
 8001378:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800137a:	2e00      	cmp	r6, #0
 800137c:	d045      	beq.n	800140a <__sflush_r+0xae>
 800137e:	2300      	movs	r3, #0
 8001380:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001384:	682f      	ldr	r7, [r5, #0]
 8001386:	6a21      	ldr	r1, [r4, #32]
 8001388:	602b      	str	r3, [r5, #0]
 800138a:	d030      	beq.n	80013ee <__sflush_r+0x92>
 800138c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	0759      	lsls	r1, r3, #29
 8001392:	d505      	bpl.n	80013a0 <__sflush_r+0x44>
 8001394:	6863      	ldr	r3, [r4, #4]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800139a:	b10b      	cbz	r3, 80013a0 <__sflush_r+0x44>
 800139c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800139e:	1ad2      	subs	r2, r2, r3
 80013a0:	2300      	movs	r3, #0
 80013a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013a4:	6a21      	ldr	r1, [r4, #32]
 80013a6:	4628      	mov	r0, r5
 80013a8:	47b0      	blx	r6
 80013aa:	1c43      	adds	r3, r0, #1
 80013ac:	89a3      	ldrh	r3, [r4, #12]
 80013ae:	d106      	bne.n	80013be <__sflush_r+0x62>
 80013b0:	6829      	ldr	r1, [r5, #0]
 80013b2:	291d      	cmp	r1, #29
 80013b4:	d82b      	bhi.n	800140e <__sflush_r+0xb2>
 80013b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001460 <__sflush_r+0x104>)
 80013b8:	40ca      	lsrs	r2, r1
 80013ba:	07d6      	lsls	r6, r2, #31
 80013bc:	d527      	bpl.n	800140e <__sflush_r+0xb2>
 80013be:	2200      	movs	r2, #0
 80013c0:	6062      	str	r2, [r4, #4]
 80013c2:	04d9      	lsls	r1, r3, #19
 80013c4:	6922      	ldr	r2, [r4, #16]
 80013c6:	6022      	str	r2, [r4, #0]
 80013c8:	d504      	bpl.n	80013d4 <__sflush_r+0x78>
 80013ca:	1c42      	adds	r2, r0, #1
 80013cc:	d101      	bne.n	80013d2 <__sflush_r+0x76>
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	b903      	cbnz	r3, 80013d4 <__sflush_r+0x78>
 80013d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80013d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013d6:	602f      	str	r7, [r5, #0]
 80013d8:	b1b9      	cbz	r1, 800140a <__sflush_r+0xae>
 80013da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013de:	4299      	cmp	r1, r3
 80013e0:	d002      	beq.n	80013e8 <__sflush_r+0x8c>
 80013e2:	4628      	mov	r0, r5
 80013e4:	f000 fa7a 	bl	80018dc <_free_r>
 80013e8:	2300      	movs	r3, #0
 80013ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80013ec:	e00d      	b.n	800140a <__sflush_r+0xae>
 80013ee:	2301      	movs	r3, #1
 80013f0:	4628      	mov	r0, r5
 80013f2:	47b0      	blx	r6
 80013f4:	4602      	mov	r2, r0
 80013f6:	1c50      	adds	r0, r2, #1
 80013f8:	d1c9      	bne.n	800138e <__sflush_r+0x32>
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0c6      	beq.n	800138e <__sflush_r+0x32>
 8001400:	2b1d      	cmp	r3, #29
 8001402:	d001      	beq.n	8001408 <__sflush_r+0xac>
 8001404:	2b16      	cmp	r3, #22
 8001406:	d11e      	bne.n	8001446 <__sflush_r+0xea>
 8001408:	602f      	str	r7, [r5, #0]
 800140a:	2000      	movs	r0, #0
 800140c:	e022      	b.n	8001454 <__sflush_r+0xf8>
 800140e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001412:	b21b      	sxth	r3, r3
 8001414:	e01b      	b.n	800144e <__sflush_r+0xf2>
 8001416:	690f      	ldr	r7, [r1, #16]
 8001418:	2f00      	cmp	r7, #0
 800141a:	d0f6      	beq.n	800140a <__sflush_r+0xae>
 800141c:	0793      	lsls	r3, r2, #30
 800141e:	680e      	ldr	r6, [r1, #0]
 8001420:	bf08      	it	eq
 8001422:	694b      	ldreq	r3, [r1, #20]
 8001424:	600f      	str	r7, [r1, #0]
 8001426:	bf18      	it	ne
 8001428:	2300      	movne	r3, #0
 800142a:	eba6 0807 	sub.w	r8, r6, r7
 800142e:	608b      	str	r3, [r1, #8]
 8001430:	f1b8 0f00 	cmp.w	r8, #0
 8001434:	dde9      	ble.n	800140a <__sflush_r+0xae>
 8001436:	6a21      	ldr	r1, [r4, #32]
 8001438:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800143a:	4643      	mov	r3, r8
 800143c:	463a      	mov	r2, r7
 800143e:	4628      	mov	r0, r5
 8001440:	47b0      	blx	r6
 8001442:	2800      	cmp	r0, #0
 8001444:	dc08      	bgt.n	8001458 <__sflush_r+0xfc>
 8001446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001458:	4407      	add	r7, r0
 800145a:	eba8 0800 	sub.w	r8, r8, r0
 800145e:	e7e7      	b.n	8001430 <__sflush_r+0xd4>
 8001460:	20400001 	.word	0x20400001

08001464 <_fflush_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	690b      	ldr	r3, [r1, #16]
 8001468:	4605      	mov	r5, r0
 800146a:	460c      	mov	r4, r1
 800146c:	b913      	cbnz	r3, 8001474 <_fflush_r+0x10>
 800146e:	2500      	movs	r5, #0
 8001470:	4628      	mov	r0, r5
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	b118      	cbz	r0, 800147e <_fflush_r+0x1a>
 8001476:	6a03      	ldr	r3, [r0, #32]
 8001478:	b90b      	cbnz	r3, 800147e <_fflush_r+0x1a>
 800147a:	f7ff fa2b 	bl	80008d4 <__sinit>
 800147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f3      	beq.n	800146e <_fflush_r+0xa>
 8001486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001488:	07d0      	lsls	r0, r2, #31
 800148a:	d404      	bmi.n	8001496 <_fflush_r+0x32>
 800148c:	0599      	lsls	r1, r3, #22
 800148e:	d402      	bmi.n	8001496 <_fflush_r+0x32>
 8001490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001492:	f7ff fa9a 	bl	80009ca <__retarget_lock_acquire_recursive>
 8001496:	4628      	mov	r0, r5
 8001498:	4621      	mov	r1, r4
 800149a:	f7ff ff5f 	bl	800135c <__sflush_r>
 800149e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014a0:	07da      	lsls	r2, r3, #31
 80014a2:	4605      	mov	r5, r0
 80014a4:	d4e4      	bmi.n	8001470 <_fflush_r+0xc>
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	059b      	lsls	r3, r3, #22
 80014aa:	d4e1      	bmi.n	8001470 <_fflush_r+0xc>
 80014ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014ae:	f7ff fa8d 	bl	80009cc <__retarget_lock_release_recursive>
 80014b2:	e7dd      	b.n	8001470 <_fflush_r+0xc>

080014b4 <__malloc_lock>:
 80014b4:	4801      	ldr	r0, [pc, #4]	@ (80014bc <__malloc_lock+0x8>)
 80014b6:	f7ff ba88 	b.w	80009ca <__retarget_lock_acquire_recursive>
 80014ba:	bf00      	nop
 80014bc:	200002c4 	.word	0x200002c4

080014c0 <__malloc_unlock>:
 80014c0:	4801      	ldr	r0, [pc, #4]	@ (80014c8 <__malloc_unlock+0x8>)
 80014c2:	f7ff ba83 	b.w	80009cc <__retarget_lock_release_recursive>
 80014c6:	bf00      	nop
 80014c8:	200002c4 	.word	0x200002c4

080014cc <__sread>:
 80014cc:	b510      	push	{r4, lr}
 80014ce:	460c      	mov	r4, r1
 80014d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d4:	f000 f99e 	bl	8001814 <_read_r>
 80014d8:	2800      	cmp	r0, #0
 80014da:	bfab      	itete	ge
 80014dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80014de:	89a3      	ldrhlt	r3, [r4, #12]
 80014e0:	181b      	addge	r3, r3, r0
 80014e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80014e6:	bfac      	ite	ge
 80014e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80014ea:	81a3      	strhlt	r3, [r4, #12]
 80014ec:	bd10      	pop	{r4, pc}

080014ee <__swrite>:
 80014ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f2:	461f      	mov	r7, r3
 80014f4:	898b      	ldrh	r3, [r1, #12]
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	4605      	mov	r5, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	4616      	mov	r6, r2
 80014fe:	d505      	bpl.n	800150c <__swrite+0x1e>
 8001500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001504:	2302      	movs	r3, #2
 8001506:	2200      	movs	r2, #0
 8001508:	f000 f972 	bl	80017f0 <_lseek_r>
 800150c:	89a3      	ldrh	r3, [r4, #12]
 800150e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001516:	81a3      	strh	r3, [r4, #12]
 8001518:	4632      	mov	r2, r6
 800151a:	463b      	mov	r3, r7
 800151c:	4628      	mov	r0, r5
 800151e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001522:	f000 b999 	b.w	8001858 <_write_r>

08001526 <__sseek>:
 8001526:	b510      	push	{r4, lr}
 8001528:	460c      	mov	r4, r1
 800152a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800152e:	f000 f95f 	bl	80017f0 <_lseek_r>
 8001532:	1c43      	adds	r3, r0, #1
 8001534:	89a3      	ldrh	r3, [r4, #12]
 8001536:	bf15      	itete	ne
 8001538:	6560      	strne	r0, [r4, #84]	@ 0x54
 800153a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800153e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001542:	81a3      	strheq	r3, [r4, #12]
 8001544:	bf18      	it	ne
 8001546:	81a3      	strhne	r3, [r4, #12]
 8001548:	bd10      	pop	{r4, pc}

0800154a <__sclose>:
 800154a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800154e:	f000 b995 	b.w	800187c <_close_r>

08001552 <_realloc_r>:
 8001552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001556:	4607      	mov	r7, r0
 8001558:	4614      	mov	r4, r2
 800155a:	460d      	mov	r5, r1
 800155c:	b921      	cbnz	r1, 8001568 <_realloc_r+0x16>
 800155e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001562:	4611      	mov	r1, r2
 8001564:	f7ff bcee 	b.w	8000f44 <_malloc_r>
 8001568:	b92a      	cbnz	r2, 8001576 <_realloc_r+0x24>
 800156a:	f000 f9b7 	bl	80018dc <_free_r>
 800156e:	4625      	mov	r5, r4
 8001570:	4628      	mov	r0, r5
 8001572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001576:	f000 f9fb 	bl	8001970 <_malloc_usable_size_r>
 800157a:	4284      	cmp	r4, r0
 800157c:	4606      	mov	r6, r0
 800157e:	d802      	bhi.n	8001586 <_realloc_r+0x34>
 8001580:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001584:	d8f4      	bhi.n	8001570 <_realloc_r+0x1e>
 8001586:	4621      	mov	r1, r4
 8001588:	4638      	mov	r0, r7
 800158a:	f7ff fcdb 	bl	8000f44 <_malloc_r>
 800158e:	4680      	mov	r8, r0
 8001590:	b908      	cbnz	r0, 8001596 <_realloc_r+0x44>
 8001592:	4645      	mov	r5, r8
 8001594:	e7ec      	b.n	8001570 <_realloc_r+0x1e>
 8001596:	42b4      	cmp	r4, r6
 8001598:	4622      	mov	r2, r4
 800159a:	4629      	mov	r1, r5
 800159c:	bf28      	it	cs
 800159e:	4632      	movcs	r2, r6
 80015a0:	f000 f98e 	bl	80018c0 <memcpy>
 80015a4:	4629      	mov	r1, r5
 80015a6:	4638      	mov	r0, r7
 80015a8:	f000 f998 	bl	80018dc <_free_r>
 80015ac:	e7f1      	b.n	8001592 <_realloc_r+0x40>

080015ae <__swbuf_r>:
 80015ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b0:	460e      	mov	r6, r1
 80015b2:	4614      	mov	r4, r2
 80015b4:	4605      	mov	r5, r0
 80015b6:	b118      	cbz	r0, 80015c0 <__swbuf_r+0x12>
 80015b8:	6a03      	ldr	r3, [r0, #32]
 80015ba:	b90b      	cbnz	r3, 80015c0 <__swbuf_r+0x12>
 80015bc:	f7ff f98a 	bl	80008d4 <__sinit>
 80015c0:	69a3      	ldr	r3, [r4, #24]
 80015c2:	60a3      	str	r3, [r4, #8]
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	071a      	lsls	r2, r3, #28
 80015c8:	d501      	bpl.n	80015ce <__swbuf_r+0x20>
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	b943      	cbnz	r3, 80015e0 <__swbuf_r+0x32>
 80015ce:	4621      	mov	r1, r4
 80015d0:	4628      	mov	r0, r5
 80015d2:	f000 f82b 	bl	800162c <__swsetup_r>
 80015d6:	b118      	cbz	r0, 80015e0 <__swbuf_r+0x32>
 80015d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80015dc:	4638      	mov	r0, r7
 80015de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	6922      	ldr	r2, [r4, #16]
 80015e4:	1a98      	subs	r0, r3, r2
 80015e6:	6963      	ldr	r3, [r4, #20]
 80015e8:	b2f6      	uxtb	r6, r6
 80015ea:	4283      	cmp	r3, r0
 80015ec:	4637      	mov	r7, r6
 80015ee:	dc05      	bgt.n	80015fc <__swbuf_r+0x4e>
 80015f0:	4621      	mov	r1, r4
 80015f2:	4628      	mov	r0, r5
 80015f4:	f7ff ff36 	bl	8001464 <_fflush_r>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d1ed      	bne.n	80015d8 <__swbuf_r+0x2a>
 80015fc:	68a3      	ldr	r3, [r4, #8]
 80015fe:	3b01      	subs	r3, #1
 8001600:	60a3      	str	r3, [r4, #8]
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	6022      	str	r2, [r4, #0]
 8001608:	701e      	strb	r6, [r3, #0]
 800160a:	6962      	ldr	r2, [r4, #20]
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	429a      	cmp	r2, r3
 8001610:	d004      	beq.n	800161c <__swbuf_r+0x6e>
 8001612:	89a3      	ldrh	r3, [r4, #12]
 8001614:	07db      	lsls	r3, r3, #31
 8001616:	d5e1      	bpl.n	80015dc <__swbuf_r+0x2e>
 8001618:	2e0a      	cmp	r6, #10
 800161a:	d1df      	bne.n	80015dc <__swbuf_r+0x2e>
 800161c:	4621      	mov	r1, r4
 800161e:	4628      	mov	r0, r5
 8001620:	f7ff ff20 	bl	8001464 <_fflush_r>
 8001624:	2800      	cmp	r0, #0
 8001626:	d0d9      	beq.n	80015dc <__swbuf_r+0x2e>
 8001628:	e7d6      	b.n	80015d8 <__swbuf_r+0x2a>
	...

0800162c <__swsetup_r>:
 800162c:	b538      	push	{r3, r4, r5, lr}
 800162e:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <__swsetup_r+0xa8>)
 8001630:	4605      	mov	r5, r0
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	460c      	mov	r4, r1
 8001636:	b118      	cbz	r0, 8001640 <__swsetup_r+0x14>
 8001638:	6a03      	ldr	r3, [r0, #32]
 800163a:	b90b      	cbnz	r3, 8001640 <__swsetup_r+0x14>
 800163c:	f7ff f94a 	bl	80008d4 <__sinit>
 8001640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001644:	0719      	lsls	r1, r3, #28
 8001646:	d422      	bmi.n	800168e <__swsetup_r+0x62>
 8001648:	06da      	lsls	r2, r3, #27
 800164a:	d407      	bmi.n	800165c <__swsetup_r+0x30>
 800164c:	2209      	movs	r2, #9
 800164e:	602a      	str	r2, [r5, #0]
 8001650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001654:	81a3      	strh	r3, [r4, #12]
 8001656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800165a:	e033      	b.n	80016c4 <__swsetup_r+0x98>
 800165c:	0758      	lsls	r0, r3, #29
 800165e:	d512      	bpl.n	8001686 <__swsetup_r+0x5a>
 8001660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001662:	b141      	cbz	r1, 8001676 <__swsetup_r+0x4a>
 8001664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001668:	4299      	cmp	r1, r3
 800166a:	d002      	beq.n	8001672 <__swsetup_r+0x46>
 800166c:	4628      	mov	r0, r5
 800166e:	f000 f935 	bl	80018dc <_free_r>
 8001672:	2300      	movs	r3, #0
 8001674:	6363      	str	r3, [r4, #52]	@ 0x34
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800167c:	81a3      	strh	r3, [r4, #12]
 800167e:	2300      	movs	r3, #0
 8001680:	6063      	str	r3, [r4, #4]
 8001682:	6923      	ldr	r3, [r4, #16]
 8001684:	6023      	str	r3, [r4, #0]
 8001686:	89a3      	ldrh	r3, [r4, #12]
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	81a3      	strh	r3, [r4, #12]
 800168e:	6923      	ldr	r3, [r4, #16]
 8001690:	b94b      	cbnz	r3, 80016a6 <__swsetup_r+0x7a>
 8001692:	89a3      	ldrh	r3, [r4, #12]
 8001694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800169c:	d003      	beq.n	80016a6 <__swsetup_r+0x7a>
 800169e:	4621      	mov	r1, r4
 80016a0:	4628      	mov	r0, r5
 80016a2:	f000 f83f 	bl	8001724 <__smakebuf_r>
 80016a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016aa:	f013 0201 	ands.w	r2, r3, #1
 80016ae:	d00a      	beq.n	80016c6 <__swsetup_r+0x9a>
 80016b0:	2200      	movs	r2, #0
 80016b2:	60a2      	str	r2, [r4, #8]
 80016b4:	6962      	ldr	r2, [r4, #20]
 80016b6:	4252      	negs	r2, r2
 80016b8:	61a2      	str	r2, [r4, #24]
 80016ba:	6922      	ldr	r2, [r4, #16]
 80016bc:	b942      	cbnz	r2, 80016d0 <__swsetup_r+0xa4>
 80016be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80016c2:	d1c5      	bne.n	8001650 <__swsetup_r+0x24>
 80016c4:	bd38      	pop	{r3, r4, r5, pc}
 80016c6:	0799      	lsls	r1, r3, #30
 80016c8:	bf58      	it	pl
 80016ca:	6962      	ldrpl	r2, [r4, #20]
 80016cc:	60a2      	str	r2, [r4, #8]
 80016ce:	e7f4      	b.n	80016ba <__swsetup_r+0x8e>
 80016d0:	2000      	movs	r0, #0
 80016d2:	e7f7      	b.n	80016c4 <__swsetup_r+0x98>
 80016d4:	20000038 	.word	0x20000038

080016d8 <__swhatbuf_r>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	460c      	mov	r4, r1
 80016dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e0:	2900      	cmp	r1, #0
 80016e2:	b096      	sub	sp, #88	@ 0x58
 80016e4:	4615      	mov	r5, r2
 80016e6:	461e      	mov	r6, r3
 80016e8:	da0d      	bge.n	8001706 <__swhatbuf_r+0x2e>
 80016ea:	89a3      	ldrh	r3, [r4, #12]
 80016ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2340      	movne	r3, #64	@ 0x40
 80016f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80016fc:	2000      	movs	r0, #0
 80016fe:	6031      	str	r1, [r6, #0]
 8001700:	602b      	str	r3, [r5, #0]
 8001702:	b016      	add	sp, #88	@ 0x58
 8001704:	bd70      	pop	{r4, r5, r6, pc}
 8001706:	466a      	mov	r2, sp
 8001708:	f000 f8c8 	bl	800189c <_fstat_r>
 800170c:	2800      	cmp	r0, #0
 800170e:	dbec      	blt.n	80016ea <__swhatbuf_r+0x12>
 8001710:	9901      	ldr	r1, [sp, #4]
 8001712:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001716:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800171a:	4259      	negs	r1, r3
 800171c:	4159      	adcs	r1, r3
 800171e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001722:	e7eb      	b.n	80016fc <__swhatbuf_r+0x24>

08001724 <__smakebuf_r>:
 8001724:	898b      	ldrh	r3, [r1, #12]
 8001726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001728:	079d      	lsls	r5, r3, #30
 800172a:	4606      	mov	r6, r0
 800172c:	460c      	mov	r4, r1
 800172e:	d507      	bpl.n	8001740 <__smakebuf_r+0x1c>
 8001730:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	6123      	str	r3, [r4, #16]
 8001738:	2301      	movs	r3, #1
 800173a:	6163      	str	r3, [r4, #20]
 800173c:	b003      	add	sp, #12
 800173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001740:	ab01      	add	r3, sp, #4
 8001742:	466a      	mov	r2, sp
 8001744:	f7ff ffc8 	bl	80016d8 <__swhatbuf_r>
 8001748:	9f00      	ldr	r7, [sp, #0]
 800174a:	4605      	mov	r5, r0
 800174c:	4639      	mov	r1, r7
 800174e:	4630      	mov	r0, r6
 8001750:	f7ff fbf8 	bl	8000f44 <_malloc_r>
 8001754:	b948      	cbnz	r0, 800176a <__smakebuf_r+0x46>
 8001756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800175a:	059a      	lsls	r2, r3, #22
 800175c:	d4ee      	bmi.n	800173c <__smakebuf_r+0x18>
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	81a3      	strh	r3, [r4, #12]
 8001768:	e7e2      	b.n	8001730 <__smakebuf_r+0xc>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	6020      	str	r0, [r4, #0]
 800176e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001772:	81a3      	strh	r3, [r4, #12]
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800177a:	b15b      	cbz	r3, 8001794 <__smakebuf_r+0x70>
 800177c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001780:	4630      	mov	r0, r6
 8001782:	f000 f825 	bl	80017d0 <_isatty_r>
 8001786:	b128      	cbz	r0, 8001794 <__smakebuf_r+0x70>
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	81a3      	strh	r3, [r4, #12]
 8001794:	89a3      	ldrh	r3, [r4, #12]
 8001796:	431d      	orrs	r5, r3
 8001798:	81a5      	strh	r5, [r4, #12]
 800179a:	e7cf      	b.n	800173c <__smakebuf_r+0x18>

0800179c <memmove>:
 800179c:	4288      	cmp	r0, r1
 800179e:	b510      	push	{r4, lr}
 80017a0:	eb01 0402 	add.w	r4, r1, r2
 80017a4:	d902      	bls.n	80017ac <memmove+0x10>
 80017a6:	4284      	cmp	r4, r0
 80017a8:	4623      	mov	r3, r4
 80017aa:	d807      	bhi.n	80017bc <memmove+0x20>
 80017ac:	1e43      	subs	r3, r0, #1
 80017ae:	42a1      	cmp	r1, r4
 80017b0:	d008      	beq.n	80017c4 <memmove+0x28>
 80017b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017ba:	e7f8      	b.n	80017ae <memmove+0x12>
 80017bc:	4402      	add	r2, r0
 80017be:	4601      	mov	r1, r0
 80017c0:	428a      	cmp	r2, r1
 80017c2:	d100      	bne.n	80017c6 <memmove+0x2a>
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80017ce:	e7f7      	b.n	80017c0 <memmove+0x24>

080017d0 <_isatty_r>:
 80017d0:	b538      	push	{r3, r4, r5, lr}
 80017d2:	4d06      	ldr	r5, [pc, #24]	@ (80017ec <_isatty_r+0x1c>)
 80017d4:	2300      	movs	r3, #0
 80017d6:	4604      	mov	r4, r0
 80017d8:	4608      	mov	r0, r1
 80017da:	602b      	str	r3, [r5, #0]
 80017dc:	f7fe ff3f 	bl	800065e <_isatty>
 80017e0:	1c43      	adds	r3, r0, #1
 80017e2:	d102      	bne.n	80017ea <_isatty_r+0x1a>
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	b103      	cbz	r3, 80017ea <_isatty_r+0x1a>
 80017e8:	6023      	str	r3, [r4, #0]
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
 80017ec:	200002d0 	.word	0x200002d0

080017f0 <_lseek_r>:
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	4d07      	ldr	r5, [pc, #28]	@ (8001810 <_lseek_r+0x20>)
 80017f4:	4604      	mov	r4, r0
 80017f6:	4608      	mov	r0, r1
 80017f8:	4611      	mov	r1, r2
 80017fa:	2200      	movs	r2, #0
 80017fc:	602a      	str	r2, [r5, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	f7fe ff38 	bl	8000674 <_lseek>
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	d102      	bne.n	800180e <_lseek_r+0x1e>
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	b103      	cbz	r3, 800180e <_lseek_r+0x1e>
 800180c:	6023      	str	r3, [r4, #0]
 800180e:	bd38      	pop	{r3, r4, r5, pc}
 8001810:	200002d0 	.word	0x200002d0

08001814 <_read_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4d07      	ldr	r5, [pc, #28]	@ (8001834 <_read_r+0x20>)
 8001818:	4604      	mov	r4, r0
 800181a:	4608      	mov	r0, r1
 800181c:	4611      	mov	r1, r2
 800181e:	2200      	movs	r2, #0
 8001820:	602a      	str	r2, [r5, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f7fe fec6 	bl	80005b4 <_read>
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	d102      	bne.n	8001832 <_read_r+0x1e>
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	b103      	cbz	r3, 8001832 <_read_r+0x1e>
 8001830:	6023      	str	r3, [r4, #0]
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	200002d0 	.word	0x200002d0

08001838 <_sbrk_r>:
 8001838:	b538      	push	{r3, r4, r5, lr}
 800183a:	4d06      	ldr	r5, [pc, #24]	@ (8001854 <_sbrk_r+0x1c>)
 800183c:	2300      	movs	r3, #0
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	f7fe ff24 	bl	8000690 <_sbrk>
 8001848:	1c43      	adds	r3, r0, #1
 800184a:	d102      	bne.n	8001852 <_sbrk_r+0x1a>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	b103      	cbz	r3, 8001852 <_sbrk_r+0x1a>
 8001850:	6023      	str	r3, [r4, #0]
 8001852:	bd38      	pop	{r3, r4, r5, pc}
 8001854:	200002d0 	.word	0x200002d0

08001858 <_write_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4d07      	ldr	r5, [pc, #28]	@ (8001878 <_write_r+0x20>)
 800185c:	4604      	mov	r4, r0
 800185e:	4608      	mov	r0, r1
 8001860:	4611      	mov	r1, r2
 8001862:	2200      	movs	r2, #0
 8001864:	602a      	str	r2, [r5, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	f7fe fec1 	bl	80005ee <_write>
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	d102      	bne.n	8001876 <_write_r+0x1e>
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	b103      	cbz	r3, 8001876 <_write_r+0x1e>
 8001874:	6023      	str	r3, [r4, #0]
 8001876:	bd38      	pop	{r3, r4, r5, pc}
 8001878:	200002d0 	.word	0x200002d0

0800187c <_close_r>:
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4d06      	ldr	r5, [pc, #24]	@ (8001898 <_close_r+0x1c>)
 8001880:	2300      	movs	r3, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	602b      	str	r3, [r5, #0]
 8001888:	f7fe fecd 	bl	8000626 <_close>
 800188c:	1c43      	adds	r3, r0, #1
 800188e:	d102      	bne.n	8001896 <_close_r+0x1a>
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	b103      	cbz	r3, 8001896 <_close_r+0x1a>
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	200002d0 	.word	0x200002d0

0800189c <_fstat_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4d07      	ldr	r5, [pc, #28]	@ (80018bc <_fstat_r+0x20>)
 80018a0:	2300      	movs	r3, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	602b      	str	r3, [r5, #0]
 80018aa:	f7fe fec8 	bl	800063e <_fstat>
 80018ae:	1c43      	adds	r3, r0, #1
 80018b0:	d102      	bne.n	80018b8 <_fstat_r+0x1c>
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	b103      	cbz	r3, 80018b8 <_fstat_r+0x1c>
 80018b6:	6023      	str	r3, [r4, #0]
 80018b8:	bd38      	pop	{r3, r4, r5, pc}
 80018ba:	bf00      	nop
 80018bc:	200002d0 	.word	0x200002d0

080018c0 <memcpy>:
 80018c0:	440a      	add	r2, r1
 80018c2:	4291      	cmp	r1, r2
 80018c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80018c8:	d100      	bne.n	80018cc <memcpy+0xc>
 80018ca:	4770      	bx	lr
 80018cc:	b510      	push	{r4, lr}
 80018ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018d6:	4291      	cmp	r1, r2
 80018d8:	d1f9      	bne.n	80018ce <memcpy+0xe>
 80018da:	bd10      	pop	{r4, pc}

080018dc <_free_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4605      	mov	r5, r0
 80018e0:	2900      	cmp	r1, #0
 80018e2:	d041      	beq.n	8001968 <_free_r+0x8c>
 80018e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018e8:	1f0c      	subs	r4, r1, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bfb8      	it	lt
 80018ee:	18e4      	addlt	r4, r4, r3
 80018f0:	f7ff fde0 	bl	80014b4 <__malloc_lock>
 80018f4:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <_free_r+0x90>)
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	b933      	cbnz	r3, 8001908 <_free_r+0x2c>
 80018fa:	6063      	str	r3, [r4, #4]
 80018fc:	6014      	str	r4, [r2, #0]
 80018fe:	4628      	mov	r0, r5
 8001900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001904:	f7ff bddc 	b.w	80014c0 <__malloc_unlock>
 8001908:	42a3      	cmp	r3, r4
 800190a:	d908      	bls.n	800191e <_free_r+0x42>
 800190c:	6820      	ldr	r0, [r4, #0]
 800190e:	1821      	adds	r1, r4, r0
 8001910:	428b      	cmp	r3, r1
 8001912:	bf01      	itttt	eq
 8001914:	6819      	ldreq	r1, [r3, #0]
 8001916:	685b      	ldreq	r3, [r3, #4]
 8001918:	1809      	addeq	r1, r1, r0
 800191a:	6021      	streq	r1, [r4, #0]
 800191c:	e7ed      	b.n	80018fa <_free_r+0x1e>
 800191e:	461a      	mov	r2, r3
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	b10b      	cbz	r3, 8001928 <_free_r+0x4c>
 8001924:	42a3      	cmp	r3, r4
 8001926:	d9fa      	bls.n	800191e <_free_r+0x42>
 8001928:	6811      	ldr	r1, [r2, #0]
 800192a:	1850      	adds	r0, r2, r1
 800192c:	42a0      	cmp	r0, r4
 800192e:	d10b      	bne.n	8001948 <_free_r+0x6c>
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	4401      	add	r1, r0
 8001934:	1850      	adds	r0, r2, r1
 8001936:	4283      	cmp	r3, r0
 8001938:	6011      	str	r1, [r2, #0]
 800193a:	d1e0      	bne.n	80018fe <_free_r+0x22>
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	6053      	str	r3, [r2, #4]
 8001942:	4408      	add	r0, r1
 8001944:	6010      	str	r0, [r2, #0]
 8001946:	e7da      	b.n	80018fe <_free_r+0x22>
 8001948:	d902      	bls.n	8001950 <_free_r+0x74>
 800194a:	230c      	movs	r3, #12
 800194c:	602b      	str	r3, [r5, #0]
 800194e:	e7d6      	b.n	80018fe <_free_r+0x22>
 8001950:	6820      	ldr	r0, [r4, #0]
 8001952:	1821      	adds	r1, r4, r0
 8001954:	428b      	cmp	r3, r1
 8001956:	bf04      	itt	eq
 8001958:	6819      	ldreq	r1, [r3, #0]
 800195a:	685b      	ldreq	r3, [r3, #4]
 800195c:	6063      	str	r3, [r4, #4]
 800195e:	bf04      	itt	eq
 8001960:	1809      	addeq	r1, r1, r0
 8001962:	6021      	streq	r1, [r4, #0]
 8001964:	6054      	str	r4, [r2, #4]
 8001966:	e7ca      	b.n	80018fe <_free_r+0x22>
 8001968:	bd38      	pop	{r3, r4, r5, pc}
 800196a:	bf00      	nop
 800196c:	200002cc 	.word	0x200002cc

08001970 <_malloc_usable_size_r>:
 8001970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001974:	1f18      	subs	r0, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	bfbc      	itt	lt
 800197a:	580b      	ldrlt	r3, [r1, r0]
 800197c:	18c0      	addlt	r0, r0, r3
 800197e:	4770      	bx	lr

08001980 <_init>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	bf00      	nop
 8001984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001986:	bc08      	pop	{r3}
 8001988:	469e      	mov	lr, r3
 800198a:	4770      	bx	lr

0800198c <_fini>:
 800198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198e:	bf00      	nop
 8001990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001992:	bc08      	pop	{r3}
 8001994:	469e      	mov	lr, r3
 8001996:	4770      	bx	lr
