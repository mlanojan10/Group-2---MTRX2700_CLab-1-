
Exercise_4_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08002894  08002894  00003894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  00004088  2**0
                  CONTENTS
  4 .ARM          00000008  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002aec  08002aec  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00003aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002af0  08002af0  00003af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08002af4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004088  2**0
                  CONTENTS
 10 .bss          000002dc  20000088  20000088  00004088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00004088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d86  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bc3  00000000  00000000  00006e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00007a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e7  00000000  00000000  00007c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016de3  00000000  00000000  00007e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028cf  00000000  00000000  0001ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007876f  00000000  00000000  00021531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00099ca0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001550  00000000  00000000  00099ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0009b234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800287c 	.word	0x0800287c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800287c 	.word	0x0800287c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <enable_clocks>:


//-------------------------MAIN CONTROL -----------------------

//Enable clocks for the STM
void enable_clocks() {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <enable_clocks+0x1c>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <enable_clocks+0x1c>)
 80002ba:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80002be:	6153      	str	r3, [r2, #20]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <display_pattern_callback>:
    for (volatile int i = 0; i < 1000000; i++) {}  // Adjust delay time here

    chase_led();    //Call normal chase function
}

void display_pattern_callback(uint8_t *buffer) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// Convert ASCII binary string (e.g., "11011110") to uint8_t pattern
	uint8_t pattern = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 8; i++) {    // Loop through ONLY 8 characters in the buffer
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	e01b      	b.n	800031a <display_pattern_callback+0x4a>
		if (buffer[i] == '1') {      // If the character is '1', set the corresponding bit in 'pattern'
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b31      	cmp	r3, #49	@ 0x31
 80002ec:	d10c      	bne.n	8000308 <display_pattern_callback+0x38>
			pattern |= (1 << (7 - i));  // Ensures the first character goes to the highest bit
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f1c3 0307 	rsb	r3, r3, #7
 80002f4:	2201      	movs	r2, #1
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	b25a      	sxtb	r2, r3
 80002fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000300:	4313      	orrs	r3, r2
 8000302:	b25b      	sxtb	r3, r3
 8000304:	73fb      	strb	r3, [r7, #15]
 8000306:	e005      	b.n	8000314 <display_pattern_callback+0x44>
		} else if (buffer[i] != '0') {
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b30      	cmp	r3, #48	@ 0x30
 8000312:	d10a      	bne.n	800032a <display_pattern_callback+0x5a>
	for (int i = 0; i < 8; i++) {    // Loop through ONLY 8 characters in the buffer
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	3301      	adds	r3, #1
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b07      	cmp	r3, #7
 800031e:	dde0      	ble.n	80002e2 <display_pattern_callback+0x12>
			// Invalid character found â€” stop and do not update LEDs
			return;
		}
	}

	leds_set_state(pattern);      //pass the new pattern to LEDs
 8000320:	7bfb      	ldrb	r3, [r7, #15]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f868 	bl	80003f8 <leds_set_state>
 8000328:	e000      	b.n	800032c <display_pattern_callback+0x5c>
			return;
 800032a:	bf00      	nop
}
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <pattern_callback_init>:

// Define a static (file-scope) variable to store the callback function pointer
static pattern_callback_t pattern_display_callback = 0x00;

// Initialize the pattern display callback function
void pattern_callback_init(pattern_callback_t callback) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    pattern_display_callback = callback;    // Store the provided callback function in the static variable
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <pattern_callback_init+0x1c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6013      	str	r3, [r2, #0]

}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	200000a4 	.word	0x200000a4

08000354 <trigger_pattern_display>:

void trigger_pattern_display(uint8_t *pattern_buffer) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    if (pattern_display_callback != 0x00) {       // Check if a valid callback has been registered
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <trigger_pattern_display+0x20>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <trigger_pattern_display+0x18>
        pattern_display_callback(pattern_buffer); // Call the registered callback function with the provided pattern buffer
 8000364:	4b03      	ldr	r3, [pc, #12]	@ (8000374 <trigger_pattern_display+0x20>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	4798      	blx	r3

    }
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200000a4 	.word	0x200000a4

08000378 <DigitalIO_SetPattern>:

void DigitalIO_SetPattern(char *pattern) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	 	 // Call trigger_pattern_display, casting the string to a uint8_t pointer
	 // This passes the ASCII pattern string to the callback function
    trigger_pattern_display((uint8_t*)pattern);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ffe7 	bl	8000354 <trigger_pattern_display>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <EXTI0_IRQHandler>:

// Static variable only accessible in this file
static button_callback_t on_button_press = 0x00;

void EXTI0_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (on_button_press != 0x00) { 
 8000394:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <EXTI0_IRQHandler+0x24>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI0_IRQHandler+0x12>
		on_button_press();           //Check if the button is registered as pressed 
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <EXTI0_IRQHandler+0x24>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4798      	blx	r3
	}

	EXTI->PR |= EXTI_PR_PR0; // clear interrupt flag
 80003a2:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <EXTI0_IRQHandler+0x28>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <EXTI0_IRQHandler+0x28>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6153      	str	r3, [r2, #20]
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000a8 	.word	0x200000a8
 80003b8:	40010400 	.word	0x40010400

080003bc <initialise_board>:


//-------------------------LED CONTROL -----------------------

// LED GPIO Initialization (GPIOE, assuming LEDs are connected here)
void initialise_board(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    // Enable clock for GPIOE
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <initialise_board+0x34>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <initialise_board+0x34>)
 80003c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ca:	6153      	str	r3, [r2, #20]

    // Set pins PE8-PE15 as output
    GPIOE->MODER &= ~(0xFFFF0000);  // Clear mode bits for PE8-PE15
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <initialise_board+0x38>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <initialise_board+0x38>)
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= 0x55550000;     // Set PE8-PE15 to output mode (01)
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <initialise_board+0x38>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a06      	ldr	r2, [pc, #24]	@ (80003f4 <initialise_board+0x38>)
 80003dc:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80003e0:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48001000 	.word	0x48001000

080003f8 <leds_set_state>:
    state = (GPIOE->ODR >> 8) & 0xFF;  // Read ODR for PE8-PE15 and mask lower 8 bits
    return state;
}

// Set the state of the LEDs (PE8 to PE15 using a bitmask)
void leds_set_state(uint8_t state) {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
    GPIOE->ODR = (GPIOE->ODR & 0x00FF) | (state << 8); // Set only PE8-PE15
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <leds_set_state+0x28>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	4904      	ldr	r1, [pc, #16]	@ (8000420 <leds_set_state+0x28>)
 800040e:	4313      	orrs	r3, r2
 8000410:	614b      	str	r3, [r1, #20]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	48001000 	.word	0x48001000

08000424 <__io_putchar>:
#include "digitalio.h"
#include "stm32f303xc.h"

#define MAX_CMD_LEN 64               // Maximum length of command and argument strings

int __io_putchar(int ch) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4904      	ldr	r1, [pc, #16]	@ (8000444 <__io_putchar+0x20>)
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fb54 	bl	8000ae0 <SerialOutputChar>
    return ch;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000

08000448 <reset_all_modes>:
} SystemMode;

SystemMode current_mode = MODE_NONE;   // Global variable to track current system mode

// Function to resets everything back to default state, so a new mode can be set
void reset_all_modes() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    TIM2->CR1 = 0;              // Stop Timer 2
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
    leds_set_state(0);          // Turn off all LEDs
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ffcf 	bl	80003f8 <leds_set_state>
    USART1->CR1 &= ~USART_CR1_TXEIE; // Disable USART1 TX interrupt
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <reset_all_modes+0x28>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <reset_all_modes+0x28>)
 8000460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000464:	6013      	str	r3, [r2, #0]
    current_mode = MODE_NONE;   // Reset current mode state
 8000466:	4b03      	ldr	r3, [pc, #12]	@ (8000474 <reset_all_modes+0x2c>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40013800 	.word	0x40013800
 8000474:	200000ac 	.word	0x200000ac

08000478 <OnLineReceived>:

void OnLineReceived(char *input, uint32_t len) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
    static char command[MAX_CMD_LEN], argument[MAX_CMD_LEN];

    // Parse input into a command and an argument using sscanf
    // This splits the command and instructions
    if (sscanf(input, "%s %[^\n]", command, argument) != 2) {
 8000482:	4b35      	ldr	r3, [pc, #212]	@ (8000558 <OnLineReceived+0xe0>)
 8000484:	4a35      	ldr	r2, [pc, #212]	@ (800055c <OnLineReceived+0xe4>)
 8000486:	4936      	ldr	r1, [pc, #216]	@ (8000560 <OnLineReceived+0xe8>)
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 fc61 	bl	8000d50 <siscanf>
 800048e:	4603      	mov	r3, r0
 8000490:	2b02      	cmp	r3, #2
 8000492:	d003      	beq.n	800049c <OnLineReceived+0x24>
        SerialStartTransmission("Invalid input format.\r\n> ");
 8000494:	4833      	ldr	r0, [pc, #204]	@ (8000564 <OnLineReceived+0xec>)
 8000496:	f000 fb4b 	bl	8000b30 <SerialStartTransmission>
        return;
 800049a:	e059      	b.n	8000550 <OnLineReceived+0xd8>
    }
    reset_all_modes();     // Reset all modes so a new one can be chosen
 800049c:	f7ff ffd4 	bl	8000448 <reset_all_modes>

    // The command is then checked against set names to switch between modules
    // The instructions are passed as an argument to the chosen module to complete the task

    //DIGITALIO Module
    if (strcmp(command, "led") == 0) {      // If command is "led" complete DIGITALIO Module
 80004a0:	4931      	ldr	r1, [pc, #196]	@ (8000568 <OnLineReceived+0xf0>)
 80004a2:	482e      	ldr	r0, [pc, #184]	@ (800055c <OnLineReceived+0xe4>)
 80004a4:	f7ff fea4 	bl	80001f0 <strcmp>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d109      	bne.n	80004c2 <OnLineReceived+0x4a>
        //Integration Main Functionality
    	DigitalIO_SetPattern(argument);
 80004ae:	482a      	ldr	r0, [pc, #168]	@ (8000558 <OnLineReceived+0xe0>)
 80004b0:	f7ff ff62 	bl	8000378 <DigitalIO_SetPattern>
    	//button_init(test_callback);

    	//To show function with timer embedded, please refer to code within EX_222D
    	//There is issues with having TIM2_IRQHandler defined twice in the project for the Timer Interface and this

        current_mode = MODE_LED;            // Update system mode
 80004b4:	4b2d      	ldr	r3, [pc, #180]	@ (800056c <OnLineReceived+0xf4>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("LED pattern set.\r\n> ");
 80004ba:	482d      	ldr	r0, [pc, #180]	@ (8000570 <OnLineReceived+0xf8>)
 80004bc:	f000 fb38 	bl	8000b30 <SerialStartTransmission>
 80004c0:	e046      	b.n	8000550 <OnLineReceived+0xd8>
    }

    // SERIAL Module
    else if (strcmp(command, "serial") == 0) {     // If command is "serial" complete SERIAL Module
 80004c2:	492c      	ldr	r1, [pc, #176]	@ (8000574 <OnLineReceived+0xfc>)
 80004c4:	4825      	ldr	r0, [pc, #148]	@ (800055c <OnLineReceived+0xe4>)
 80004c6:	f7ff fe93 	bl	80001f0 <strcmp>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d10c      	bne.n	80004ea <OnLineReceived+0x72>
        current_mode = MODE_SERIAL;               // Update system mode
 80004d0:	4b26      	ldr	r3, [pc, #152]	@ (800056c <OnLineReceived+0xf4>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	701a      	strb	r2, [r3, #0]

        static char formatted[80];  // Static buffer to hold formatted string
        snprintf(formatted, sizeof(formatted), "String: %s \n>", argument); //Show string to User
 80004d6:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <OnLineReceived+0xe0>)
 80004d8:	4a27      	ldr	r2, [pc, #156]	@ (8000578 <OnLineReceived+0x100>)
 80004da:	2150      	movs	r1, #80	@ 0x50
 80004dc:	4827      	ldr	r0, [pc, #156]	@ (800057c <OnLineReceived+0x104>)
 80004de:	f000 fc03 	bl	8000ce8 <sniprintf>

        SerialStartTransmission(formatted);
 80004e2:	4826      	ldr	r0, [pc, #152]	@ (800057c <OnLineReceived+0x104>)
 80004e4:	f000 fb24 	bl	8000b30 <SerialStartTransmission>
 80004e8:	e032      	b.n	8000550 <OnLineReceived+0xd8>
    }

    // TIMER Module (timer)
    else if (strcmp(command, "timer") == 0) {   // If command is "timer" complete TIMER Module
 80004ea:	4925      	ldr	r1, [pc, #148]	@ (8000580 <OnLineReceived+0x108>)
 80004ec:	481b      	ldr	r0, [pc, #108]	@ (800055c <OnLineReceived+0xe4>)
 80004ee:	f7ff fe7f 	bl	80001f0 <strcmp>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d110      	bne.n	800051a <OnLineReceived+0xa2>
        uint32_t ms = atoi(argument);           // Convert argument to integer milliseconds
 80004f8:	4817      	ldr	r0, [pc, #92]	@ (8000558 <OnLineReceived+0xe0>)
 80004fa:	f000 fbf0 	bl	8000cde <atoi>
 80004fe:	4603      	mov	r3, r0
 8000500:	60bb      	str	r3, [r7, #8]
        current_mode = MODE_TIMER;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <OnLineReceived+0xf4>)
 8000504:	2202      	movs	r2, #2
 8000506:	701a      	strb	r2, [r3, #0]
        reset_timer(TIM2, ms);                  // Start periodic timer with that interval
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800050e:	f000 fa2a 	bl	8000966 <reset_timer>
        SerialStartTransmission("Periodic timer started.\r\n> ");
 8000512:	481c      	ldr	r0, [pc, #112]	@ (8000584 <OnLineReceived+0x10c>)
 8000514:	f000 fb0c 	bl	8000b30 <SerialStartTransmission>
 8000518:	e01a      	b.n	8000550 <OnLineReceived+0xd8>
    }

    // TIMER Module (Oneshot)
    else if (strcmp(command, "oneshot") == 0) {
 800051a:	491b      	ldr	r1, [pc, #108]	@ (8000588 <OnLineReceived+0x110>)
 800051c:	480f      	ldr	r0, [pc, #60]	@ (800055c <OnLineReceived+0xe4>)
 800051e:	f7ff fe67 	bl	80001f0 <strcmp>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d110      	bne.n	800054a <OnLineReceived+0xd2>
        uint32_t ms = atoi(argument);         // Convert argument to integer milliseconds
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <OnLineReceived+0xe0>)
 800052a:	f000 fbd8 	bl	8000cde <atoi>
 800052e:	4603      	mov	r3, r0
 8000530:	60fb      	str	r3, [r7, #12]
        one_shot(TIM2, ms);             // Trigger one-shot timer event
 8000532:	68f9      	ldr	r1, [r7, #12]
 8000534:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000538:	f000 fa31 	bl	800099e <one_shot>
        current_mode = MODE_ONESHOT;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <OnLineReceived+0xf4>)
 800053e:	2203      	movs	r2, #3
 8000540:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("One-shot timer triggered.\r\n> ");
 8000542:	4812      	ldr	r0, [pc, #72]	@ (800058c <OnLineReceived+0x114>)
 8000544:	f000 faf4 	bl	8000b30 <SerialStartTransmission>
 8000548:	e002      	b.n	8000550 <OnLineReceived+0xd8>
    }

    // If command is unknown, notify user and do nothing
    else {
        SerialStartTransmission("Unknown command.\r\n> ");
 800054a:	4811      	ldr	r0, [pc, #68]	@ (8000590 <OnLineReceived+0x118>)
 800054c:	f000 faf0 	bl	8000b30 <SerialStartTransmission>
    }
}
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000f0 	.word	0x200000f0
 800055c:	200000b0 	.word	0x200000b0
 8000560:	08002894 	.word	0x08002894
 8000564:	080028a0 	.word	0x080028a0
 8000568:	080028bc 	.word	0x080028bc
 800056c:	200000ac 	.word	0x200000ac
 8000570:	080028c0 	.word	0x080028c0
 8000574:	080028d8 	.word	0x080028d8
 8000578:	080028e0 	.word	0x080028e0
 800057c:	20000130 	.word	0x20000130
 8000580:	080028f0 	.word	0x080028f0
 8000584:	080028f8 	.word	0x080028f8
 8000588:	08002914 	.word	0x08002914
 800058c:	0800291c 	.word	0x0800291c
 8000590:	0800293c 	.word	0x0800293c

08000594 <main>:

int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    enable_clocks();                       // Enable GPIO/TIM clocks
 8000598:	f7ff fe8a 	bl	80002b0 <enable_clocks>
    initialise_board();                    // Configure LEDs
 800059c:	f7ff ff0e 	bl	80003bc <initialise_board>
    timer_enable_clocks();                 // Enable Timer-related clocks
 80005a0:	f000 f910 	bl	80007c4 <timer_enable_clocks>
    timer_initialise_board();              // Initialise Timer peripheral
 80005a4:	f000 f924 	bl	80007f0 <timer_initialise_board>

    // Initialise Serial communication over USART1
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80005a8:	2200      	movs	r2, #0
 80005aa:	490b      	ldr	r1, [pc, #44]	@ (80005d8 <main+0x44>)
 80005ac:	2004      	movs	r0, #4
 80005ae:	f000 fa31 	bl	8000a14 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 80005b2:	490a      	ldr	r1, [pc, #40]	@ (80005dc <main+0x48>)
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <main+0x44>)
 80005b6:	f000 faac 	bl	8000b12 <SerialSetReceiveCallback>

    init_timer_module(TIM2, blink_all_leds);
 80005ba:	4909      	ldr	r1, [pc, #36]	@ (80005e0 <main+0x4c>)
 80005bc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80005c0:	f000 f940 	bl	8000844 <init_timer_module>
    enable_timer2_interrupt();             // Enable TIM2 IRQs
 80005c4:	f000 f9aa 	bl	800091c <enable_timer2_interrupt>
    pattern_callback_init(display_pattern_callback); // Register LED pattern handler
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <main+0x50>)
 80005ca:	f7ff feb3 	bl	8000334 <pattern_callback_init>

    printf("USART1 is ready. Type a line and press Enter:\r\n> "); //Notify user that system is ready
 80005ce:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <main+0x54>)
 80005d0:	f000 fd76 	bl	80010c0 <iprintf>

    while (1) {
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <main+0x40>
 80005d8:	20000000 	.word	0x20000000
 80005dc:	08000479 	.word	0x08000479
 80005e0:	0800088d 	.word	0x0800088d
 80005e4:	080002d1 	.word	0x080002d1
 80005e8:	08002954 	.word	0x08002954

080005ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	e00a      	b.n	8000614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005fe:	f3af 8000 	nop.w
 8000602:	4601      	mov	r1, r0
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	b2ca      	uxtb	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf0      	blt.n	80005fe <_read+0x12>
	}

return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e009      	b.n	800064c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	60ba      	str	r2, [r7, #8]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff feef 	bl	8000424 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf1      	blt.n	8000638 <_write+0x12>
	}
	return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <_close>:

int _close(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return -1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000686:	605a      	str	r2, [r3, #4]
	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <_isatty>:

int _isatty(int file)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	return 1;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d0:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <_sbrk+0x5c>)
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <_sbrk+0x60>)
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <_sbrk+0x64>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <_sbrk+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d207      	bcs.n	8000708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f8:	f000 fd42 	bl	8001180 <__errno>
 80006fc:	4603      	mov	r3, r0
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000706:	e009      	b.n	800071c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	4a05      	ldr	r2, [pc, #20]	@ (800072c <_sbrk+0x64>)
 8000718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000a000 	.word	0x2000a000
 8000728:	00000400 	.word	0x00000400
 800072c:	20000180 	.word	0x20000180
 8000730:	20000368 	.word	0x20000368

08000734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	db0b      	blt.n	800075e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 021f 	and.w	r2, r3, #31
 800074c:	4907      	ldr	r1, [pc, #28]	@ (800076c <__NVIC_EnableIRQ+0x38>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	095b      	lsrs	r3, r3, #5
 8000754:	2001      	movs	r0, #1
 8000756:	fa00 f202 	lsl.w	r2, r0, r2
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e100 	.word	0xe000e100

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	@ (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	@ (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <timer_enable_clocks>:
#include <stdint.h>
#include "stm32f303xc.h"
#include "timer.h"

// Enable the clocks for desired peripherals (GPIOA, C and E)
void timer_enable_clocks() {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <timer_enable_clocks+0x28>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <timer_enable_clocks+0x28>)
 80007ce:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80007d2:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <timer_enable_clocks+0x28>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <timer_enable_clocks+0x28>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	61d3      	str	r3, [r2, #28]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <timer_initialise_board>:

// Initialise the discovery board I/O (just outputs: inputs are selected by default)
void timer_initialise_board() {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0

	// Get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <timer_initialise_board+0x20>)
 80007f8:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555; // All LEDs are on
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000800:	801a      	strh	r2, [r3, #0]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	48001002 	.word	0x48001002

08000814 <trigger_prescaler>:

// General function called to make new prescaler value take effect
// Input: desired timer number
void trigger_prescaler(TIM_TypeDef *TIM) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

	TIM->ARR = 0x01;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM->CNT = 0x00;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
	asm("NOP");
 8000828:	bf00      	nop
	asm("NOP");
 800082a:	bf00      	nop
	asm("NOP");
 800082c:	bf00      	nop
	TIM->ARR = 0xffffffff;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <init_timer_module>:
void (*on_timer_interrupt)() = 0x00;


// Initialise timer with 1ms ticks to trigger a callback function regularly
// Input: desired timer number to initialise; callback function
void init_timer_module(TIM_TypeDef *TIM, void (*timer_callback)()) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]

	TIM->CR1 |= TIM_CR1_CEN;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f043 0201 	orr.w	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
	TIM->PSC = 7999;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
	trigger_prescaler(TIM);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffd6 	bl	8000814 <trigger_prescaler>
	TIM->CR1 &= ~TIM_CR1_CEN;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f023 0201 	bic.w	r2, r3, #1
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24

	on_timer_interrupt = timer_callback;
 800087a:	4a03      	ldr	r2, [pc, #12]	@ (8000888 <init_timer_module+0x44>)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000184 	.word	0x20000184

0800088c <blink_all_leds>:

// Simple function to switch on/off every led when called
void blink_all_leds() {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <blink_all_leds+0x24>)
 8000894:	607b      	str	r3, [r7, #4]
	*led_output_register ^= 0b11111111;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	701a      	strb	r2, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	48001015 	.word	0x48001015

080008b4 <TIM2_IRQHandler>:
	uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
	*led_output_register ^= 0b10101010;
}

// Interrupt Service Routine
void TIM2_IRQHandler(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    // Check if the TIM2 interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF) {
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d025      	beq.n	8000912 <TIM2_IRQHandler+0x5e>
		// Run the callback function (make sure it is not null first)
        if (on_timer_interrupt != 0x00) {
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <TIM2_IRQHandler+0x64>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d019      	beq.n	8000902 <TIM2_IRQHandler+0x4e>
        	on_timer_interrupt();
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <TIM2_IRQHandler+0x64>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4798      	blx	r3
        	// If timer is in one-pulse mode reset timer to default mode
			if (TIM2->SR & TIM_SR_CC1IF) {
 80008d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00f      	beq.n	8000902 <TIM2_IRQHandler+0x4e>
				// Disable capture/compare flag
				TIM2->SR &= ~TIM_SR_CC1IF;
 80008e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ec:	f023 0302 	bic.w	r3, r3, #2
 80008f0:	6113      	str	r3, [r2, #16]
        		// Disable the Capture/Compare 1 interrupt
				TIM2->DIER &= ~TIM_DIER_CC1IE;
 80008f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fc:	f023 0302 	bic.w	r3, r3, #2
 8000900:	60d3      	str	r3, [r2, #12]
			}
        }
        // Clear the interrupt flag (write 1 to the UIF bit to reset it)
        TIM2->SR &= ~TIM_SR_UIF;
 8000902:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	6113      	str	r3, [r2, #16]
    }
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000184 	.word	0x20000184

0800091c <enable_timer2_interrupt>:

// Enable hardware interrupt for timer 2
void enable_timer2_interrupt() {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	// Otherwise can lead to strange behaviour
	__disable_irq();

	// Enable update interrupt (UIE)
	TIM2->DIER |= TIM_DIER_UIE;
 8000924:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	60d3      	str	r3, [r2, #12]

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(TIM2_IRQn, 1);  // Set Priority
 8000934:	2101      	movs	r1, #1
 8000936:	201c      	movs	r0, #28
 8000938:	f7ff ff1a 	bl	8000770 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800093c:	201c      	movs	r0, #28
 800093e:	f7ff fef9 	bl	8000734 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000942:	b662      	cpsie	i
}
 8000944:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <set_timer_period>:
	return TIM->ARR;
}

// Simple set function to set a specific timer's period in ms
// Assuming timers are configured to 1kHz so each count is 1ms
void set_timer_period(TIM_TypeDef *TIM, uint32_t new_period) {
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
	TIM->ARR = new_period;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <reset_timer>:

// Function to reset a specific timer's count with a new period in ms
// Assuming timers are configured to 1kHz so each count is ms
void reset_timer(TIM_TypeDef *TIM, uint32_t new_period) {
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]

	// Stop timer's count and reset count to 0
	TIM->CR1 &= ~TIM_CR1_CEN;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f023 0201 	bic.w	r2, r3, #1
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
	// Set new period
	set_timer_period(TIM, new_period);
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffe0 	bl	800094a <set_timer_period>
	// Restart timer
	TIM->CR1 |= TIM_CR1_CEN;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f043 0201 	orr.w	r2, r3, #1
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <one_shot>:

// Hardware interrupt enable for converting a specific timer's operation to one-pulse mode
// Input specific timer to be used and delay desired in ms
void one_shot(TIM_TypeDef *TIM, uint32_t delay) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]

	// Sets value for capture/compare event
	TIM->CCR1 = delay;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34

	// Enable one-pulse mode
	TIM->CR1 |= TIM_CR1_OPM;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f043 0208 	orr.w	r2, r3, #8
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]

	// Enable capture/compare interrupt
	TIM->DIER |= TIM_DIER_CC1IE;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f043 0202 	orr.w	r2, r3, #2
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60da      	str	r2, [r3, #12]

	reset_timer(TIM, delay);
 80009c6:	6839      	ldr	r1, [r7, #0]
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ffcc 	bl	8000966 <reset_timer>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <__NVIC_EnableIRQ>:
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	@ (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <SerialInitialise>:
static uint32_t rx_index = 0;

static const char *tx_buffer = NULL;
static uint32_t tx_index = 0;

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <SerialInitialise+0xc8>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000adc <SerialInitialise+0xc8>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <SerialInitialise+0xc8>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a29      	ldr	r2, [pc, #164]	@ (8000adc <SerialInitialise+0xc8>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	691a      	ldr	r2, [r3, #16]
 8000a42:	4b26      	ldr	r3, [pc, #152]	@ (8000adc <SerialInitialise+0xc8>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4925      	ldr	r1, [pc, #148]	@ (8000adc <SerialInitialise+0xc8>)
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	614b      	str	r3, [r1, #20]

    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	6952      	ldr	r2, [r2, #20]
 8000a54:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	6992      	ldr	r2, [r2, #24]
 8000a5e:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	69d9      	ldr	r1, [r3, #28]
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	6a1a      	ldr	r2, [r3, #32]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6a19      	ldr	r1, [r3, #32]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <SerialInitialise+0xc8>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	4913      	ldr	r1, [pc, #76]	@ (8000adc <SerialInitialise+0xc8>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <SerialInitialise+0xc8>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4910      	ldr	r1, [pc, #64]	@ (8000adc <SerialInitialise+0xc8>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	618b      	str	r3, [r1, #24]

    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	330c      	adds	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2246      	movs	r2, #70	@ 0x46
 8000aac:	801a      	strh	r2, [r3, #0]

    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f042 020d 	orr.w	r2, r2, #13
 8000abc:	601a      	str	r2, [r3, #0]
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f042 0220 	orr.w	r2, r2, #32
 8000acc:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART1_IRQn);
 8000ace:	2025      	movs	r0, #37	@ 0x25
 8000ad0:	f7ff ff82 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000

08000ae0 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0);
 8000aec:	bf00      	nop
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f8      	beq.n	8000aee <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	b292      	uxth	r2, r2
 8000b04:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SerialSetReceiveCallback>:
uint8_t SerialGetChar(SerialPort *serial_port) {
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);
    return serial_port->UART->RDR;
}

void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SerialStartTransmission>:

void SerialStartTransmission(const char *str) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    tx_buffer = str;
 8000b38:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <SerialStartTransmission+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
    tx_index = 0;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <SerialStartTransmission+0x30>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_TXEIE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <SerialStartTransmission+0x34>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <SerialStartTransmission+0x34>)
 8000b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20000210 	.word	0x20000210
 8000b60:	20000214 	.word	0x20000214
 8000b64:	40013800 	.word	0x40013800

08000b68 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 8000b6e:	4b40      	ldr	r3, [pc, #256]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d045      	beq.n	8000c06 <USART1_EXTI25_IRQHandler+0x9e>
        char c = USART1->RDR;
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000b7c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	71fb      	strb	r3, [r7, #7]
        SerialOutputChar(c, &USART1_PORT);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	493b      	ldr	r1, [pc, #236]	@ (8000c74 <USART1_EXTI25_IRQHandler+0x10c>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffaa 	bl	8000ae0 <SerialOutputChar>

        if (c == '\r') return;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b0d      	cmp	r3, #13
 8000b90:	d06a      	beq.n	8000c68 <USART1_EXTI25_IRQHandler+0x100>

        if (c == '\n') {
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b0a      	cmp	r3, #10
 8000b96:	d124      	bne.n	8000be2 <USART1_EXTI25_IRQHandler+0x7a>
            rx_buffers[active_rx_buf][rx_index] = '\0';
 8000b98:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <USART1_EXTI25_IRQHandler+0x110>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <USART1_EXTI25_IRQHandler+0x114>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4937      	ldr	r1, [pc, #220]	@ (8000c80 <USART1_EXTI25_IRQHandler+0x118>)
 8000ba4:	0192      	lsls	r2, r2, #6
 8000ba6:	440a      	add	r2, r1
 8000ba8:	4413      	add	r3, r2
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
            if (USART1_PORT.receive_callback)
 8000bae:	4b31      	ldr	r3, [pc, #196]	@ (8000c74 <USART1_EXTI25_IRQHandler+0x10c>)
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00a      	beq.n	8000bcc <USART1_EXTI25_IRQHandler+0x64>
                USART1_PORT.receive_callback(rx_buffers[active_rx_buf], rx_index);
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <USART1_EXTI25_IRQHandler+0x10c>)
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bba:	4a2f      	ldr	r2, [pc, #188]	@ (8000c78 <USART1_EXTI25_IRQHandler+0x110>)
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0192      	lsls	r2, r2, #6
 8000bc0:	492f      	ldr	r1, [pc, #188]	@ (8000c80 <USART1_EXTI25_IRQHandler+0x118>)
 8000bc2:	440a      	add	r2, r1
 8000bc4:	492d      	ldr	r1, [pc, #180]	@ (8000c7c <USART1_EXTI25_IRQHandler+0x114>)
 8000bc6:	6809      	ldr	r1, [r1, #0]
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4798      	blx	r3
            active_rx_buf ^= 1;
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c78 <USART1_EXTI25_IRQHandler+0x110>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <USART1_EXTI25_IRQHandler+0x110>)
 8000bd8:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <USART1_EXTI25_IRQHandler+0x114>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	e011      	b.n	8000c06 <USART1_EXTI25_IRQHandler+0x9e>
        } else if (rx_index < sizeof(rx_buffers[0]) - 1) {
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <USART1_EXTI25_IRQHandler+0x114>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b3e      	cmp	r3, #62	@ 0x3e
 8000be8:	d80d      	bhi.n	8000c06 <USART1_EXTI25_IRQHandler+0x9e>
            rx_buffers[active_rx_buf][rx_index++] = c;
 8000bea:	4b23      	ldr	r3, [pc, #140]	@ (8000c78 <USART1_EXTI25_IRQHandler+0x110>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <USART1_EXTI25_IRQHandler+0x114>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4921      	ldr	r1, [pc, #132]	@ (8000c7c <USART1_EXTI25_IRQHandler+0x114>)
 8000bf8:	600a      	str	r2, [r1, #0]
 8000bfa:	4921      	ldr	r1, [pc, #132]	@ (8000c80 <USART1_EXTI25_IRQHandler+0x118>)
 8000bfc:	0182      	lsls	r2, r0, #6
 8000bfe:	440a      	add	r2, r1
 8000c00:	4413      	add	r3, r2
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d02b      	beq.n	8000c6a <USART1_EXTI25_IRQHandler+0x102>
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d025      	beq.n	8000c6a <USART1_EXTI25_IRQHandler+0x102>
        if (tx_buffer && tx_buffer[tx_index]) {
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d013      	beq.n	8000c4e <USART1_EXTI25_IRQHandler+0xe6>
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <USART1_EXTI25_IRQHandler+0x120>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <USART1_EXTI25_IRQHandler+0xe6>
            USART1->TDR = tx_buffer[tx_index++];
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <USART1_EXTI25_IRQHandler+0x120>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1c59      	adds	r1, r3, #1
 8000c40:	4811      	ldr	r0, [pc, #68]	@ (8000c88 <USART1_EXTI25_IRQHandler+0x120>)
 8000c42:	6001      	str	r1, [r0, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000c4c:	e00d      	b.n	8000c6a <USART1_EXTI25_IRQHandler+0x102>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <USART1_EXTI25_IRQHandler+0x108>)
 8000c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c58:	6013      	str	r3, [r2, #0]
            tx_buffer = NULL;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
            tx_index = 0;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <USART1_EXTI25_IRQHandler+0x120>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e000      	b.n	8000c6a <USART1_EXTI25_IRQHandler+0x102>
        if (c == '\r') return;
 8000c68:	bf00      	nop
        }
    }
}
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000208 	.word	0x20000208
 8000c7c:	2000020c 	.word	0x2000020c
 8000c80:	20000188 	.word	0x20000188
 8000c84:	20000210 	.word	0x20000210
 8000c88:	20000214 	.word	0x20000214

08000c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cba:	f000 fa67 	bl	800118c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fc69 	bl	8000594 <main>

08000cc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cd0:	08002af4 	.word	0x08002af4
  ldr r2, =_sbss
 8000cd4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cd8:	20000364 	.word	0x20000364

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>

08000cde <atoi>:
 8000cde:	220a      	movs	r2, #10
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f000 b9c5 	b.w	8001070 <strtol>
	...

08000ce8 <sniprintf>:
 8000ce8:	b40c      	push	{r2, r3}
 8000cea:	b530      	push	{r4, r5, lr}
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <sniprintf+0x64>)
 8000cee:	1e0c      	subs	r4, r1, #0
 8000cf0:	681d      	ldr	r5, [r3, #0]
 8000cf2:	b09d      	sub	sp, #116	@ 0x74
 8000cf4:	da08      	bge.n	8000d08 <sniprintf+0x20>
 8000cf6:	238b      	movs	r3, #139	@ 0x8b
 8000cf8:	602b      	str	r3, [r5, #0]
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfe:	b01d      	add	sp, #116	@ 0x74
 8000d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d04:	b002      	add	sp, #8
 8000d06:	4770      	bx	lr
 8000d08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000d0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000d10:	bf14      	ite	ne
 8000d12:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8000d16:	4623      	moveq	r3, r4
 8000d18:	9304      	str	r3, [sp, #16]
 8000d1a:	9307      	str	r3, [sp, #28]
 8000d1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d20:	9002      	str	r0, [sp, #8]
 8000d22:	9006      	str	r0, [sp, #24]
 8000d24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000d28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8000d2a:	ab21      	add	r3, sp, #132	@ 0x84
 8000d2c:	a902      	add	r1, sp, #8
 8000d2e:	4628      	mov	r0, r5
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f000 faf9 	bl	8001328 <_svfiprintf_r>
 8000d36:	1c43      	adds	r3, r0, #1
 8000d38:	bfbc      	itt	lt
 8000d3a:	238b      	movlt	r3, #139	@ 0x8b
 8000d3c:	602b      	strlt	r3, [r5, #0]
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d0dd      	beq.n	8000cfe <sniprintf+0x16>
 8000d42:	9b02      	ldr	r3, [sp, #8]
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e7d9      	b.n	8000cfe <sniprintf+0x16>
 8000d4a:	bf00      	nop
 8000d4c:	20000038 	.word	0x20000038

08000d50 <siscanf>:
 8000d50:	b40e      	push	{r1, r2, r3}
 8000d52:	b530      	push	{r4, r5, lr}
 8000d54:	b09c      	sub	sp, #112	@ 0x70
 8000d56:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000d58:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000d5c:	f854 5b04 	ldr.w	r5, [r4], #4
 8000d60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000d64:	9002      	str	r0, [sp, #8]
 8000d66:	9006      	str	r0, [sp, #24]
 8000d68:	f7ff fa3a 	bl	80001e0 <strlen>
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <siscanf+0x4c>)
 8000d6e:	9003      	str	r0, [sp, #12]
 8000d70:	9007      	str	r0, [sp, #28]
 8000d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <siscanf+0x50>)
 8000d76:	9401      	str	r4, [sp, #4]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000d7c:	9314      	str	r3, [sp, #80]	@ 0x50
 8000d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000d86:	462a      	mov	r2, r5
 8000d88:	4623      	mov	r3, r4
 8000d8a:	a902      	add	r1, sp, #8
 8000d8c:	6800      	ldr	r0, [r0, #0]
 8000d8e:	f000 fc1f 	bl	80015d0 <__ssvfiscanf_r>
 8000d92:	b01c      	add	sp, #112	@ 0x70
 8000d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d98:	b003      	add	sp, #12
 8000d9a:	4770      	bx	lr
 8000d9c:	08000dc7 	.word	0x08000dc7
 8000da0:	20000038 	.word	0x20000038

08000da4 <__sread>:
 8000da4:	b510      	push	{r4, lr}
 8000da6:	460c      	mov	r4, r1
 8000da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dac:	f000 f9c4 	bl	8001138 <_read_r>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	bfab      	itete	ge
 8000db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000db6:	89a3      	ldrhlt	r3, [r4, #12]
 8000db8:	181b      	addge	r3, r3, r0
 8000dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dbe:	bfac      	ite	ge
 8000dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000dc2:	81a3      	strhlt	r3, [r4, #12]
 8000dc4:	bd10      	pop	{r4, pc}

08000dc6 <__seofread>:
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	4770      	bx	lr

08000dca <__swrite>:
 8000dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dce:	461f      	mov	r7, r3
 8000dd0:	898b      	ldrh	r3, [r1, #12]
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	4616      	mov	r6, r2
 8000dda:	d505      	bpl.n	8000de8 <__swrite+0x1e>
 8000ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000de0:	2302      	movs	r3, #2
 8000de2:	2200      	movs	r2, #0
 8000de4:	f000 f996 	bl	8001114 <_lseek_r>
 8000de8:	89a3      	ldrh	r3, [r4, #12]
 8000dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000df2:	81a3      	strh	r3, [r4, #12]
 8000df4:	4632      	mov	r2, r6
 8000df6:	463b      	mov	r3, r7
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfe:	f000 b9ad 	b.w	800115c <_write_r>

08000e02 <__sseek>:
 8000e02:	b510      	push	{r4, lr}
 8000e04:	460c      	mov	r4, r1
 8000e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e0a:	f000 f983 	bl	8001114 <_lseek_r>
 8000e0e:	1c43      	adds	r3, r0, #1
 8000e10:	89a3      	ldrh	r3, [r4, #12]
 8000e12:	bf15      	itete	ne
 8000e14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e1e:	81a3      	strheq	r3, [r4, #12]
 8000e20:	bf18      	it	ne
 8000e22:	81a3      	strhne	r3, [r4, #12]
 8000e24:	bd10      	pop	{r4, pc}

08000e26 <__sclose>:
 8000e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e2a:	f000 b963 	b.w	80010f4 <_close_r>
	...

08000e30 <std>:
 8000e30:	2300      	movs	r3, #0
 8000e32:	b510      	push	{r4, lr}
 8000e34:	4604      	mov	r4, r0
 8000e36:	e9c0 3300 	strd	r3, r3, [r0]
 8000e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e3e:	6083      	str	r3, [r0, #8]
 8000e40:	8181      	strh	r1, [r0, #12]
 8000e42:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e44:	81c2      	strh	r2, [r0, #14]
 8000e46:	6183      	str	r3, [r0, #24]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	305c      	adds	r0, #92	@ 0x5c
 8000e4e:	f000 f949 	bl	80010e4 <memset>
 8000e52:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <std+0x58>)
 8000e54:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <std+0x5c>)
 8000e58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <std+0x60>)
 8000e5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <std+0x64>)
 8000e60:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <std+0x68>)
 8000e64:	6224      	str	r4, [r4, #32]
 8000e66:	429c      	cmp	r4, r3
 8000e68:	d006      	beq.n	8000e78 <std+0x48>
 8000e6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e6e:	4294      	cmp	r4, r2
 8000e70:	d002      	beq.n	8000e78 <std+0x48>
 8000e72:	33d0      	adds	r3, #208	@ 0xd0
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d105      	bne.n	8000e84 <std+0x54>
 8000e78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e80:	f000 b9a8 	b.w	80011d4 <__retarget_lock_init_recursive>
 8000e84:	bd10      	pop	{r4, pc}
 8000e86:	bf00      	nop
 8000e88:	08000da5 	.word	0x08000da5
 8000e8c:	08000dcb 	.word	0x08000dcb
 8000e90:	08000e03 	.word	0x08000e03
 8000e94:	08000e27 	.word	0x08000e27
 8000e98:	20000218 	.word	0x20000218

08000e9c <stdio_exit_handler>:
 8000e9c:	4a02      	ldr	r2, [pc, #8]	@ (8000ea8 <stdio_exit_handler+0xc>)
 8000e9e:	4903      	ldr	r1, [pc, #12]	@ (8000eac <stdio_exit_handler+0x10>)
 8000ea0:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <stdio_exit_handler+0x14>)
 8000ea2:	f000 b8ef 	b.w	8001084 <_fwalk_sglue>
 8000ea6:	bf00      	nop
 8000ea8:	2000002c 	.word	0x2000002c
 8000eac:	080023b5 	.word	0x080023b5
 8000eb0:	2000003c 	.word	0x2000003c

08000eb4 <cleanup_stdio>:
 8000eb4:	6841      	ldr	r1, [r0, #4]
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <cleanup_stdio+0x34>)
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	b510      	push	{r4, lr}
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	d001      	beq.n	8000ec4 <cleanup_stdio+0x10>
 8000ec0:	f001 fa78 	bl	80023b4 <_fflush_r>
 8000ec4:	68a1      	ldr	r1, [r4, #8]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <cleanup_stdio+0x38>)
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d002      	beq.n	8000ed2 <cleanup_stdio+0x1e>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f001 fa71 	bl	80023b4 <_fflush_r>
 8000ed2:	68e1      	ldr	r1, [r4, #12]
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <cleanup_stdio+0x3c>)
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d004      	beq.n	8000ee4 <cleanup_stdio+0x30>
 8000eda:	4620      	mov	r0, r4
 8000edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ee0:	f001 ba68 	b.w	80023b4 <_fflush_r>
 8000ee4:	bd10      	pop	{r4, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000218 	.word	0x20000218
 8000eec:	20000280 	.word	0x20000280
 8000ef0:	200002e8 	.word	0x200002e8

08000ef4 <global_stdio_init.part.0>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <global_stdio_init.part.0+0x30>)
 8000ef8:	4c0b      	ldr	r4, [pc, #44]	@ (8000f28 <global_stdio_init.part.0+0x34>)
 8000efa:	4a0c      	ldr	r2, [pc, #48]	@ (8000f2c <global_stdio_init.part.0+0x38>)
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	4620      	mov	r0, r4
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	f7ff ff94 	bl	8000e30 <std>
 8000f08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2109      	movs	r1, #9
 8000f10:	f7ff ff8e 	bl	8000e30 <std>
 8000f14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f18:	2202      	movs	r2, #2
 8000f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f1e:	2112      	movs	r1, #18
 8000f20:	f7ff bf86 	b.w	8000e30 <std>
 8000f24:	20000350 	.word	0x20000350
 8000f28:	20000218 	.word	0x20000218
 8000f2c:	08000e9d 	.word	0x08000e9d

08000f30 <__sfp_lock_acquire>:
 8000f30:	4801      	ldr	r0, [pc, #4]	@ (8000f38 <__sfp_lock_acquire+0x8>)
 8000f32:	f000 b950 	b.w	80011d6 <__retarget_lock_acquire_recursive>
 8000f36:	bf00      	nop
 8000f38:	20000359 	.word	0x20000359

08000f3c <__sfp_lock_release>:
 8000f3c:	4801      	ldr	r0, [pc, #4]	@ (8000f44 <__sfp_lock_release+0x8>)
 8000f3e:	f000 b94b 	b.w	80011d8 <__retarget_lock_release_recursive>
 8000f42:	bf00      	nop
 8000f44:	20000359 	.word	0x20000359

08000f48 <__sinit>:
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	f7ff fff0 	bl	8000f30 <__sfp_lock_acquire>
 8000f50:	6a23      	ldr	r3, [r4, #32]
 8000f52:	b11b      	cbz	r3, 8000f5c <__sinit+0x14>
 8000f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f58:	f7ff bff0 	b.w	8000f3c <__sfp_lock_release>
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__sinit+0x28>)
 8000f5e:	6223      	str	r3, [r4, #32]
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <__sinit+0x2c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f5      	bne.n	8000f54 <__sinit+0xc>
 8000f68:	f7ff ffc4 	bl	8000ef4 <global_stdio_init.part.0>
 8000f6c:	e7f2      	b.n	8000f54 <__sinit+0xc>
 8000f6e:	bf00      	nop
 8000f70:	08000eb5 	.word	0x08000eb5
 8000f74:	20000350 	.word	0x20000350

08000f78 <_strtol_l.constprop.0>:
 8000f78:	2b24      	cmp	r3, #36	@ 0x24
 8000f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7e:	4686      	mov	lr, r0
 8000f80:	4690      	mov	r8, r2
 8000f82:	d801      	bhi.n	8000f88 <_strtol_l.constprop.0+0x10>
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d106      	bne.n	8000f96 <_strtol_l.constprop.0+0x1e>
 8000f88:	f000 f8fa 	bl	8001180 <__errno>
 8000f8c:	2316      	movs	r3, #22
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	2000      	movs	r0, #0
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	4834      	ldr	r0, [pc, #208]	@ (8001068 <_strtol_l.constprop.0+0xf0>)
 8000f98:	460d      	mov	r5, r1
 8000f9a:	462a      	mov	r2, r5
 8000f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000fa0:	5d06      	ldrb	r6, [r0, r4]
 8000fa2:	f016 0608 	ands.w	r6, r6, #8
 8000fa6:	d1f8      	bne.n	8000f9a <_strtol_l.constprop.0+0x22>
 8000fa8:	2c2d      	cmp	r4, #45	@ 0x2d
 8000faa:	d12d      	bne.n	8001008 <_strtol_l.constprop.0+0x90>
 8000fac:	782c      	ldrb	r4, [r5, #0]
 8000fae:	2601      	movs	r6, #1
 8000fb0:	1c95      	adds	r5, r2, #2
 8000fb2:	f033 0210 	bics.w	r2, r3, #16
 8000fb6:	d109      	bne.n	8000fcc <_strtol_l.constprop.0+0x54>
 8000fb8:	2c30      	cmp	r4, #48	@ 0x30
 8000fba:	d12a      	bne.n	8001012 <_strtol_l.constprop.0+0x9a>
 8000fbc:	782a      	ldrb	r2, [r5, #0]
 8000fbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000fc2:	2a58      	cmp	r2, #88	@ 0x58
 8000fc4:	d125      	bne.n	8001012 <_strtol_l.constprop.0+0x9a>
 8000fc6:	786c      	ldrb	r4, [r5, #1]
 8000fc8:	2310      	movs	r3, #16
 8000fca:	3502      	adds	r5, #2
 8000fcc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000fd0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	fbbc f9f3 	udiv	r9, ip, r3
 8000fda:	4610      	mov	r0, r2
 8000fdc:	fb03 ca19 	mls	sl, r3, r9, ip
 8000fe0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000fe4:	2f09      	cmp	r7, #9
 8000fe6:	d81b      	bhi.n	8001020 <_strtol_l.constprop.0+0xa8>
 8000fe8:	463c      	mov	r4, r7
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	dd27      	ble.n	800103e <_strtol_l.constprop.0+0xc6>
 8000fee:	1c57      	adds	r7, r2, #1
 8000ff0:	d007      	beq.n	8001002 <_strtol_l.constprop.0+0x8a>
 8000ff2:	4581      	cmp	r9, r0
 8000ff4:	d320      	bcc.n	8001038 <_strtol_l.constprop.0+0xc0>
 8000ff6:	d101      	bne.n	8000ffc <_strtol_l.constprop.0+0x84>
 8000ff8:	45a2      	cmp	sl, r4
 8000ffa:	db1d      	blt.n	8001038 <_strtol_l.constprop.0+0xc0>
 8000ffc:	fb00 4003 	mla	r0, r0, r3, r4
 8001000:	2201      	movs	r2, #1
 8001002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001006:	e7eb      	b.n	8000fe0 <_strtol_l.constprop.0+0x68>
 8001008:	2c2b      	cmp	r4, #43	@ 0x2b
 800100a:	bf04      	itt	eq
 800100c:	782c      	ldrbeq	r4, [r5, #0]
 800100e:	1c95      	addeq	r5, r2, #2
 8001010:	e7cf      	b.n	8000fb2 <_strtol_l.constprop.0+0x3a>
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1da      	bne.n	8000fcc <_strtol_l.constprop.0+0x54>
 8001016:	2c30      	cmp	r4, #48	@ 0x30
 8001018:	bf0c      	ite	eq
 800101a:	2308      	moveq	r3, #8
 800101c:	230a      	movne	r3, #10
 800101e:	e7d5      	b.n	8000fcc <_strtol_l.constprop.0+0x54>
 8001020:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001024:	2f19      	cmp	r7, #25
 8001026:	d801      	bhi.n	800102c <_strtol_l.constprop.0+0xb4>
 8001028:	3c37      	subs	r4, #55	@ 0x37
 800102a:	e7de      	b.n	8000fea <_strtol_l.constprop.0+0x72>
 800102c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001030:	2f19      	cmp	r7, #25
 8001032:	d804      	bhi.n	800103e <_strtol_l.constprop.0+0xc6>
 8001034:	3c57      	subs	r4, #87	@ 0x57
 8001036:	e7d8      	b.n	8000fea <_strtol_l.constprop.0+0x72>
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800103c:	e7e1      	b.n	8001002 <_strtol_l.constprop.0+0x8a>
 800103e:	1c53      	adds	r3, r2, #1
 8001040:	d108      	bne.n	8001054 <_strtol_l.constprop.0+0xdc>
 8001042:	2322      	movs	r3, #34	@ 0x22
 8001044:	f8ce 3000 	str.w	r3, [lr]
 8001048:	4660      	mov	r0, ip
 800104a:	f1b8 0f00 	cmp.w	r8, #0
 800104e:	d0a0      	beq.n	8000f92 <_strtol_l.constprop.0+0x1a>
 8001050:	1e69      	subs	r1, r5, #1
 8001052:	e006      	b.n	8001062 <_strtol_l.constprop.0+0xea>
 8001054:	b106      	cbz	r6, 8001058 <_strtol_l.constprop.0+0xe0>
 8001056:	4240      	negs	r0, r0
 8001058:	f1b8 0f00 	cmp.w	r8, #0
 800105c:	d099      	beq.n	8000f92 <_strtol_l.constprop.0+0x1a>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d1f6      	bne.n	8001050 <_strtol_l.constprop.0+0xd8>
 8001062:	f8c8 1000 	str.w	r1, [r8]
 8001066:	e794      	b.n	8000f92 <_strtol_l.constprop.0+0x1a>
 8001068:	08002995 	.word	0x08002995

0800106c <_strtol_r>:
 800106c:	f7ff bf84 	b.w	8000f78 <_strtol_l.constprop.0>

08001070 <strtol>:
 8001070:	4613      	mov	r3, r2
 8001072:	460a      	mov	r2, r1
 8001074:	4601      	mov	r1, r0
 8001076:	4802      	ldr	r0, [pc, #8]	@ (8001080 <strtol+0x10>)
 8001078:	6800      	ldr	r0, [r0, #0]
 800107a:	f7ff bf7d 	b.w	8000f78 <_strtol_l.constprop.0>
 800107e:	bf00      	nop
 8001080:	20000038 	.word	0x20000038

08001084 <_fwalk_sglue>:
 8001084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001088:	4607      	mov	r7, r0
 800108a:	4688      	mov	r8, r1
 800108c:	4614      	mov	r4, r2
 800108e:	2600      	movs	r6, #0
 8001090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001094:	f1b9 0901 	subs.w	r9, r9, #1
 8001098:	d505      	bpl.n	80010a6 <_fwalk_sglue+0x22>
 800109a:	6824      	ldr	r4, [r4, #0]
 800109c:	2c00      	cmp	r4, #0
 800109e:	d1f7      	bne.n	8001090 <_fwalk_sglue+0xc>
 80010a0:	4630      	mov	r0, r6
 80010a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010a6:	89ab      	ldrh	r3, [r5, #12]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d907      	bls.n	80010bc <_fwalk_sglue+0x38>
 80010ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010b0:	3301      	adds	r3, #1
 80010b2:	d003      	beq.n	80010bc <_fwalk_sglue+0x38>
 80010b4:	4629      	mov	r1, r5
 80010b6:	4638      	mov	r0, r7
 80010b8:	47c0      	blx	r8
 80010ba:	4306      	orrs	r6, r0
 80010bc:	3568      	adds	r5, #104	@ 0x68
 80010be:	e7e9      	b.n	8001094 <_fwalk_sglue+0x10>

080010c0 <iprintf>:
 80010c0:	b40f      	push	{r0, r1, r2, r3}
 80010c2:	b507      	push	{r0, r1, r2, lr}
 80010c4:	4906      	ldr	r1, [pc, #24]	@ (80010e0 <iprintf+0x20>)
 80010c6:	ab04      	add	r3, sp, #16
 80010c8:	6808      	ldr	r0, [r1, #0]
 80010ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80010ce:	6881      	ldr	r1, [r0, #8]
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f000 fc1b 	bl	800190c <_vfiprintf_r>
 80010d6:	b003      	add	sp, #12
 80010d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80010dc:	b004      	add	sp, #16
 80010de:	4770      	bx	lr
 80010e0:	20000038 	.word	0x20000038

080010e4 <memset>:
 80010e4:	4402      	add	r2, r0
 80010e6:	4603      	mov	r3, r0
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d100      	bne.n	80010ee <memset+0xa>
 80010ec:	4770      	bx	lr
 80010ee:	f803 1b01 	strb.w	r1, [r3], #1
 80010f2:	e7f9      	b.n	80010e8 <memset+0x4>

080010f4 <_close_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4d06      	ldr	r5, [pc, #24]	@ (8001110 <_close_r+0x1c>)
 80010f8:	2300      	movs	r3, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	602b      	str	r3, [r5, #0]
 8001100:	f7ff faad 	bl	800065e <_close>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d102      	bne.n	800110e <_close_r+0x1a>
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	b103      	cbz	r3, 800110e <_close_r+0x1a>
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	20000354 	.word	0x20000354

08001114 <_lseek_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4d07      	ldr	r5, [pc, #28]	@ (8001134 <_lseek_r+0x20>)
 8001118:	4604      	mov	r4, r0
 800111a:	4608      	mov	r0, r1
 800111c:	4611      	mov	r1, r2
 800111e:	2200      	movs	r2, #0
 8001120:	602a      	str	r2, [r5, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	f7ff fac2 	bl	80006ac <_lseek>
 8001128:	1c43      	adds	r3, r0, #1
 800112a:	d102      	bne.n	8001132 <_lseek_r+0x1e>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	b103      	cbz	r3, 8001132 <_lseek_r+0x1e>
 8001130:	6023      	str	r3, [r4, #0]
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	20000354 	.word	0x20000354

08001138 <_read_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	4d07      	ldr	r5, [pc, #28]	@ (8001158 <_read_r+0x20>)
 800113c:	4604      	mov	r4, r0
 800113e:	4608      	mov	r0, r1
 8001140:	4611      	mov	r1, r2
 8001142:	2200      	movs	r2, #0
 8001144:	602a      	str	r2, [r5, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	f7ff fa50 	bl	80005ec <_read>
 800114c:	1c43      	adds	r3, r0, #1
 800114e:	d102      	bne.n	8001156 <_read_r+0x1e>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	b103      	cbz	r3, 8001156 <_read_r+0x1e>
 8001154:	6023      	str	r3, [r4, #0]
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	20000354 	.word	0x20000354

0800115c <_write_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4d07      	ldr	r5, [pc, #28]	@ (800117c <_write_r+0x20>)
 8001160:	4604      	mov	r4, r0
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	2200      	movs	r2, #0
 8001168:	602a      	str	r2, [r5, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f7ff fa5b 	bl	8000626 <_write>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_write_r+0x1e>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_write_r+0x1e>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	20000354 	.word	0x20000354

08001180 <__errno>:
 8001180:	4b01      	ldr	r3, [pc, #4]	@ (8001188 <__errno+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000038 	.word	0x20000038

0800118c <__libc_init_array>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4d0d      	ldr	r5, [pc, #52]	@ (80011c4 <__libc_init_array+0x38>)
 8001190:	4c0d      	ldr	r4, [pc, #52]	@ (80011c8 <__libc_init_array+0x3c>)
 8001192:	1b64      	subs	r4, r4, r5
 8001194:	10a4      	asrs	r4, r4, #2
 8001196:	2600      	movs	r6, #0
 8001198:	42a6      	cmp	r6, r4
 800119a:	d109      	bne.n	80011b0 <__libc_init_array+0x24>
 800119c:	4d0b      	ldr	r5, [pc, #44]	@ (80011cc <__libc_init_array+0x40>)
 800119e:	4c0c      	ldr	r4, [pc, #48]	@ (80011d0 <__libc_init_array+0x44>)
 80011a0:	f001 fb6c 	bl	800287c <_init>
 80011a4:	1b64      	subs	r4, r4, r5
 80011a6:	10a4      	asrs	r4, r4, #2
 80011a8:	2600      	movs	r6, #0
 80011aa:	42a6      	cmp	r6, r4
 80011ac:	d105      	bne.n	80011ba <__libc_init_array+0x2e>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b4:	4798      	blx	r3
 80011b6:	3601      	adds	r6, #1
 80011b8:	e7ee      	b.n	8001198 <__libc_init_array+0xc>
 80011ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80011be:	4798      	blx	r3
 80011c0:	3601      	adds	r6, #1
 80011c2:	e7f2      	b.n	80011aa <__libc_init_array+0x1e>
 80011c4:	08002aec 	.word	0x08002aec
 80011c8:	08002aec 	.word	0x08002aec
 80011cc:	08002aec 	.word	0x08002aec
 80011d0:	08002af0 	.word	0x08002af0

080011d4 <__retarget_lock_init_recursive>:
 80011d4:	4770      	bx	lr

080011d6 <__retarget_lock_acquire_recursive>:
 80011d6:	4770      	bx	lr

080011d8 <__retarget_lock_release_recursive>:
 80011d8:	4770      	bx	lr
	...

080011dc <_free_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4605      	mov	r5, r0
 80011e0:	2900      	cmp	r1, #0
 80011e2:	d041      	beq.n	8001268 <_free_r+0x8c>
 80011e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011e8:	1f0c      	subs	r4, r1, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfb8      	it	lt
 80011ee:	18e4      	addlt	r4, r4, r3
 80011f0:	f001 f908 	bl	8002404 <__malloc_lock>
 80011f4:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <_free_r+0x90>)
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	b933      	cbnz	r3, 8001208 <_free_r+0x2c>
 80011fa:	6063      	str	r3, [r4, #4]
 80011fc:	6014      	str	r4, [r2, #0]
 80011fe:	4628      	mov	r0, r5
 8001200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001204:	f001 b904 	b.w	8002410 <__malloc_unlock>
 8001208:	42a3      	cmp	r3, r4
 800120a:	d908      	bls.n	800121e <_free_r+0x42>
 800120c:	6820      	ldr	r0, [r4, #0]
 800120e:	1821      	adds	r1, r4, r0
 8001210:	428b      	cmp	r3, r1
 8001212:	bf01      	itttt	eq
 8001214:	6819      	ldreq	r1, [r3, #0]
 8001216:	685b      	ldreq	r3, [r3, #4]
 8001218:	1809      	addeq	r1, r1, r0
 800121a:	6021      	streq	r1, [r4, #0]
 800121c:	e7ed      	b.n	80011fa <_free_r+0x1e>
 800121e:	461a      	mov	r2, r3
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	b10b      	cbz	r3, 8001228 <_free_r+0x4c>
 8001224:	42a3      	cmp	r3, r4
 8001226:	d9fa      	bls.n	800121e <_free_r+0x42>
 8001228:	6811      	ldr	r1, [r2, #0]
 800122a:	1850      	adds	r0, r2, r1
 800122c:	42a0      	cmp	r0, r4
 800122e:	d10b      	bne.n	8001248 <_free_r+0x6c>
 8001230:	6820      	ldr	r0, [r4, #0]
 8001232:	4401      	add	r1, r0
 8001234:	1850      	adds	r0, r2, r1
 8001236:	4283      	cmp	r3, r0
 8001238:	6011      	str	r1, [r2, #0]
 800123a:	d1e0      	bne.n	80011fe <_free_r+0x22>
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	6053      	str	r3, [r2, #4]
 8001242:	4408      	add	r0, r1
 8001244:	6010      	str	r0, [r2, #0]
 8001246:	e7da      	b.n	80011fe <_free_r+0x22>
 8001248:	d902      	bls.n	8001250 <_free_r+0x74>
 800124a:	230c      	movs	r3, #12
 800124c:	602b      	str	r3, [r5, #0]
 800124e:	e7d6      	b.n	80011fe <_free_r+0x22>
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	1821      	adds	r1, r4, r0
 8001254:	428b      	cmp	r3, r1
 8001256:	bf04      	itt	eq
 8001258:	6819      	ldreq	r1, [r3, #0]
 800125a:	685b      	ldreq	r3, [r3, #4]
 800125c:	6063      	str	r3, [r4, #4]
 800125e:	bf04      	itt	eq
 8001260:	1809      	addeq	r1, r1, r0
 8001262:	6021      	streq	r1, [r4, #0]
 8001264:	6054      	str	r4, [r2, #4]
 8001266:	e7ca      	b.n	80011fe <_free_r+0x22>
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	bf00      	nop
 800126c:	20000360 	.word	0x20000360

08001270 <__ssputs_r>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	688e      	ldr	r6, [r1, #8]
 8001276:	461f      	mov	r7, r3
 8001278:	42be      	cmp	r6, r7
 800127a:	680b      	ldr	r3, [r1, #0]
 800127c:	4682      	mov	sl, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4690      	mov	r8, r2
 8001282:	d82d      	bhi.n	80012e0 <__ssputs_r+0x70>
 8001284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800128c:	d026      	beq.n	80012dc <__ssputs_r+0x6c>
 800128e:	6965      	ldr	r5, [r4, #20]
 8001290:	6909      	ldr	r1, [r1, #16]
 8001292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001296:	eba3 0901 	sub.w	r9, r3, r1
 800129a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800129e:	1c7b      	adds	r3, r7, #1
 80012a0:	444b      	add	r3, r9
 80012a2:	106d      	asrs	r5, r5, #1
 80012a4:	429d      	cmp	r5, r3
 80012a6:	bf38      	it	cc
 80012a8:	461d      	movcc	r5, r3
 80012aa:	0553      	lsls	r3, r2, #21
 80012ac:	d527      	bpl.n	80012fe <__ssputs_r+0x8e>
 80012ae:	4629      	mov	r1, r5
 80012b0:	f000 fc66 	bl	8001b80 <_malloc_r>
 80012b4:	4606      	mov	r6, r0
 80012b6:	b360      	cbz	r0, 8001312 <__ssputs_r+0xa2>
 80012b8:	6921      	ldr	r1, [r4, #16]
 80012ba:	464a      	mov	r2, r9
 80012bc:	f001 fac8 	bl	8002850 <memcpy>
 80012c0:	89a3      	ldrh	r3, [r4, #12]
 80012c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80012c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ca:	81a3      	strh	r3, [r4, #12]
 80012cc:	6126      	str	r6, [r4, #16]
 80012ce:	6165      	str	r5, [r4, #20]
 80012d0:	444e      	add	r6, r9
 80012d2:	eba5 0509 	sub.w	r5, r5, r9
 80012d6:	6026      	str	r6, [r4, #0]
 80012d8:	60a5      	str	r5, [r4, #8]
 80012da:	463e      	mov	r6, r7
 80012dc:	42be      	cmp	r6, r7
 80012de:	d900      	bls.n	80012e2 <__ssputs_r+0x72>
 80012e0:	463e      	mov	r6, r7
 80012e2:	6820      	ldr	r0, [r4, #0]
 80012e4:	4632      	mov	r2, r6
 80012e6:	4641      	mov	r1, r8
 80012e8:	f001 fa66 	bl	80027b8 <memmove>
 80012ec:	68a3      	ldr	r3, [r4, #8]
 80012ee:	1b9b      	subs	r3, r3, r6
 80012f0:	60a3      	str	r3, [r4, #8]
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	4433      	add	r3, r6
 80012f6:	6023      	str	r3, [r4, #0]
 80012f8:	2000      	movs	r0, #0
 80012fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fe:	462a      	mov	r2, r5
 8001300:	f001 f8c6 	bl	8002490 <_realloc_r>
 8001304:	4606      	mov	r6, r0
 8001306:	2800      	cmp	r0, #0
 8001308:	d1e0      	bne.n	80012cc <__ssputs_r+0x5c>
 800130a:	6921      	ldr	r1, [r4, #16]
 800130c:	4650      	mov	r0, sl
 800130e:	f7ff ff65 	bl	80011dc <_free_r>
 8001312:	230c      	movs	r3, #12
 8001314:	f8ca 3000 	str.w	r3, [sl]
 8001318:	89a3      	ldrh	r3, [r4, #12]
 800131a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800131e:	81a3      	strh	r3, [r4, #12]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001324:	e7e9      	b.n	80012fa <__ssputs_r+0x8a>
	...

08001328 <_svfiprintf_r>:
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	4698      	mov	r8, r3
 800132e:	898b      	ldrh	r3, [r1, #12]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	b09d      	sub	sp, #116	@ 0x74
 8001334:	4607      	mov	r7, r0
 8001336:	460d      	mov	r5, r1
 8001338:	4614      	mov	r4, r2
 800133a:	d510      	bpl.n	800135e <_svfiprintf_r+0x36>
 800133c:	690b      	ldr	r3, [r1, #16]
 800133e:	b973      	cbnz	r3, 800135e <_svfiprintf_r+0x36>
 8001340:	2140      	movs	r1, #64	@ 0x40
 8001342:	f000 fc1d 	bl	8001b80 <_malloc_r>
 8001346:	6028      	str	r0, [r5, #0]
 8001348:	6128      	str	r0, [r5, #16]
 800134a:	b930      	cbnz	r0, 800135a <_svfiprintf_r+0x32>
 800134c:	230c      	movs	r3, #12
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001354:	b01d      	add	sp, #116	@ 0x74
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800135a:	2340      	movs	r3, #64	@ 0x40
 800135c:	616b      	str	r3, [r5, #20]
 800135e:	2300      	movs	r3, #0
 8001360:	9309      	str	r3, [sp, #36]	@ 0x24
 8001362:	2320      	movs	r3, #32
 8001364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001368:	f8cd 800c 	str.w	r8, [sp, #12]
 800136c:	2330      	movs	r3, #48	@ 0x30
 800136e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800150c <_svfiprintf_r+0x1e4>
 8001372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001376:	f04f 0901 	mov.w	r9, #1
 800137a:	4623      	mov	r3, r4
 800137c:	469a      	mov	sl, r3
 800137e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001382:	b10a      	cbz	r2, 8001388 <_svfiprintf_r+0x60>
 8001384:	2a25      	cmp	r2, #37	@ 0x25
 8001386:	d1f9      	bne.n	800137c <_svfiprintf_r+0x54>
 8001388:	ebba 0b04 	subs.w	fp, sl, r4
 800138c:	d00b      	beq.n	80013a6 <_svfiprintf_r+0x7e>
 800138e:	465b      	mov	r3, fp
 8001390:	4622      	mov	r2, r4
 8001392:	4629      	mov	r1, r5
 8001394:	4638      	mov	r0, r7
 8001396:	f7ff ff6b 	bl	8001270 <__ssputs_r>
 800139a:	3001      	adds	r0, #1
 800139c:	f000 80a7 	beq.w	80014ee <_svfiprintf_r+0x1c6>
 80013a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013a2:	445a      	add	r2, fp
 80013a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80013a6:	f89a 3000 	ldrb.w	r3, [sl]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 809f 	beq.w	80014ee <_svfiprintf_r+0x1c6>
 80013b0:	2300      	movs	r3, #0
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013ba:	f10a 0a01 	add.w	sl, sl, #1
 80013be:	9304      	str	r3, [sp, #16]
 80013c0:	9307      	str	r3, [sp, #28]
 80013c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80013c8:	4654      	mov	r4, sl
 80013ca:	2205      	movs	r2, #5
 80013cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d0:	484e      	ldr	r0, [pc, #312]	@ (800150c <_svfiprintf_r+0x1e4>)
 80013d2:	f7fe ff1d 	bl	8000210 <memchr>
 80013d6:	9a04      	ldr	r2, [sp, #16]
 80013d8:	b9d8      	cbnz	r0, 8001412 <_svfiprintf_r+0xea>
 80013da:	06d0      	lsls	r0, r2, #27
 80013dc:	bf44      	itt	mi
 80013de:	2320      	movmi	r3, #32
 80013e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013e4:	0711      	lsls	r1, r2, #28
 80013e6:	bf44      	itt	mi
 80013e8:	232b      	movmi	r3, #43	@ 0x2b
 80013ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013ee:	f89a 3000 	ldrb.w	r3, [sl]
 80013f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80013f4:	d015      	beq.n	8001422 <_svfiprintf_r+0xfa>
 80013f6:	9a07      	ldr	r2, [sp, #28]
 80013f8:	4654      	mov	r4, sl
 80013fa:	2000      	movs	r0, #0
 80013fc:	f04f 0c0a 	mov.w	ip, #10
 8001400:	4621      	mov	r1, r4
 8001402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001406:	3b30      	subs	r3, #48	@ 0x30
 8001408:	2b09      	cmp	r3, #9
 800140a:	d94b      	bls.n	80014a4 <_svfiprintf_r+0x17c>
 800140c:	b1b0      	cbz	r0, 800143c <_svfiprintf_r+0x114>
 800140e:	9207      	str	r2, [sp, #28]
 8001410:	e014      	b.n	800143c <_svfiprintf_r+0x114>
 8001412:	eba0 0308 	sub.w	r3, r0, r8
 8001416:	fa09 f303 	lsl.w	r3, r9, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	9304      	str	r3, [sp, #16]
 800141e:	46a2      	mov	sl, r4
 8001420:	e7d2      	b.n	80013c8 <_svfiprintf_r+0xa0>
 8001422:	9b03      	ldr	r3, [sp, #12]
 8001424:	1d19      	adds	r1, r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	9103      	str	r1, [sp, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	bfbb      	ittet	lt
 800142e:	425b      	neglt	r3, r3
 8001430:	f042 0202 	orrlt.w	r2, r2, #2
 8001434:	9307      	strge	r3, [sp, #28]
 8001436:	9307      	strlt	r3, [sp, #28]
 8001438:	bfb8      	it	lt
 800143a:	9204      	strlt	r2, [sp, #16]
 800143c:	7823      	ldrb	r3, [r4, #0]
 800143e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001440:	d10a      	bne.n	8001458 <_svfiprintf_r+0x130>
 8001442:	7863      	ldrb	r3, [r4, #1]
 8001444:	2b2a      	cmp	r3, #42	@ 0x2a
 8001446:	d132      	bne.n	80014ae <_svfiprintf_r+0x186>
 8001448:	9b03      	ldr	r3, [sp, #12]
 800144a:	1d1a      	adds	r2, r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	9203      	str	r2, [sp, #12]
 8001450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001454:	3402      	adds	r4, #2
 8001456:	9305      	str	r3, [sp, #20]
 8001458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800151c <_svfiprintf_r+0x1f4>
 800145c:	7821      	ldrb	r1, [r4, #0]
 800145e:	2203      	movs	r2, #3
 8001460:	4650      	mov	r0, sl
 8001462:	f7fe fed5 	bl	8000210 <memchr>
 8001466:	b138      	cbz	r0, 8001478 <_svfiprintf_r+0x150>
 8001468:	9b04      	ldr	r3, [sp, #16]
 800146a:	eba0 000a 	sub.w	r0, r0, sl
 800146e:	2240      	movs	r2, #64	@ 0x40
 8001470:	4082      	lsls	r2, r0
 8001472:	4313      	orrs	r3, r2
 8001474:	3401      	adds	r4, #1
 8001476:	9304      	str	r3, [sp, #16]
 8001478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147c:	4824      	ldr	r0, [pc, #144]	@ (8001510 <_svfiprintf_r+0x1e8>)
 800147e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001482:	2206      	movs	r2, #6
 8001484:	f7fe fec4 	bl	8000210 <memchr>
 8001488:	2800      	cmp	r0, #0
 800148a:	d036      	beq.n	80014fa <_svfiprintf_r+0x1d2>
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <_svfiprintf_r+0x1ec>)
 800148e:	bb1b      	cbnz	r3, 80014d8 <_svfiprintf_r+0x1b0>
 8001490:	9b03      	ldr	r3, [sp, #12]
 8001492:	3307      	adds	r3, #7
 8001494:	f023 0307 	bic.w	r3, r3, #7
 8001498:	3308      	adds	r3, #8
 800149a:	9303      	str	r3, [sp, #12]
 800149c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800149e:	4433      	add	r3, r6
 80014a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80014a2:	e76a      	b.n	800137a <_svfiprintf_r+0x52>
 80014a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80014a8:	460c      	mov	r4, r1
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7a8      	b.n	8001400 <_svfiprintf_r+0xd8>
 80014ae:	2300      	movs	r3, #0
 80014b0:	3401      	adds	r4, #1
 80014b2:	9305      	str	r3, [sp, #20]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 0c0a 	mov.w	ip, #10
 80014ba:	4620      	mov	r0, r4
 80014bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014c0:	3a30      	subs	r2, #48	@ 0x30
 80014c2:	2a09      	cmp	r2, #9
 80014c4:	d903      	bls.n	80014ce <_svfiprintf_r+0x1a6>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0c6      	beq.n	8001458 <_svfiprintf_r+0x130>
 80014ca:	9105      	str	r1, [sp, #20]
 80014cc:	e7c4      	b.n	8001458 <_svfiprintf_r+0x130>
 80014ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80014d2:	4604      	mov	r4, r0
 80014d4:	2301      	movs	r3, #1
 80014d6:	e7f0      	b.n	80014ba <_svfiprintf_r+0x192>
 80014d8:	ab03      	add	r3, sp, #12
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	462a      	mov	r2, r5
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <_svfiprintf_r+0x1f0>)
 80014e0:	a904      	add	r1, sp, #16
 80014e2:	4638      	mov	r0, r7
 80014e4:	f3af 8000 	nop.w
 80014e8:	1c42      	adds	r2, r0, #1
 80014ea:	4606      	mov	r6, r0
 80014ec:	d1d6      	bne.n	800149c <_svfiprintf_r+0x174>
 80014ee:	89ab      	ldrh	r3, [r5, #12]
 80014f0:	065b      	lsls	r3, r3, #25
 80014f2:	f53f af2d 	bmi.w	8001350 <_svfiprintf_r+0x28>
 80014f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014f8:	e72c      	b.n	8001354 <_svfiprintf_r+0x2c>
 80014fa:	ab03      	add	r3, sp, #12
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	462a      	mov	r2, r5
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <_svfiprintf_r+0x1f0>)
 8001502:	a904      	add	r1, sp, #16
 8001504:	4638      	mov	r0, r7
 8001506:	f000 fc29 	bl	8001d5c <_printf_i>
 800150a:	e7ed      	b.n	80014e8 <_svfiprintf_r+0x1c0>
 800150c:	08002a95 	.word	0x08002a95
 8001510:	08002a9f 	.word	0x08002a9f
 8001514:	00000000 	.word	0x00000000
 8001518:	08001271 	.word	0x08001271
 800151c:	08002a9b 	.word	0x08002a9b

08001520 <_sungetc_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	1c4b      	adds	r3, r1, #1
 8001524:	4614      	mov	r4, r2
 8001526:	d103      	bne.n	8001530 <_sungetc_r+0x10>
 8001528:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800152c:	4628      	mov	r0, r5
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	8993      	ldrh	r3, [r2, #12]
 8001532:	f023 0320 	bic.w	r3, r3, #32
 8001536:	8193      	strh	r3, [r2, #12]
 8001538:	6853      	ldr	r3, [r2, #4]
 800153a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800153c:	b2cd      	uxtb	r5, r1
 800153e:	b18a      	cbz	r2, 8001564 <_sungetc_r+0x44>
 8001540:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001542:	429a      	cmp	r2, r3
 8001544:	dd08      	ble.n	8001558 <_sungetc_r+0x38>
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	6022      	str	r2, [r4, #0]
 800154c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	3301      	adds	r3, #1
 8001554:	6063      	str	r3, [r4, #4]
 8001556:	e7e9      	b.n	800152c <_sungetc_r+0xc>
 8001558:	4621      	mov	r1, r4
 800155a:	f000 ff5f 	bl	800241c <__submore>
 800155e:	2800      	cmp	r0, #0
 8001560:	d0f1      	beq.n	8001546 <_sungetc_r+0x26>
 8001562:	e7e1      	b.n	8001528 <_sungetc_r+0x8>
 8001564:	6921      	ldr	r1, [r4, #16]
 8001566:	6822      	ldr	r2, [r4, #0]
 8001568:	b141      	cbz	r1, 800157c <_sungetc_r+0x5c>
 800156a:	4291      	cmp	r1, r2
 800156c:	d206      	bcs.n	800157c <_sungetc_r+0x5c>
 800156e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001572:	42a9      	cmp	r1, r5
 8001574:	d102      	bne.n	800157c <_sungetc_r+0x5c>
 8001576:	3a01      	subs	r2, #1
 8001578:	6022      	str	r2, [r4, #0]
 800157a:	e7ea      	b.n	8001552 <_sungetc_r+0x32>
 800157c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8001580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001584:	6363      	str	r3, [r4, #52]	@ 0x34
 8001586:	2303      	movs	r3, #3
 8001588:	63a3      	str	r3, [r4, #56]	@ 0x38
 800158a:	4623      	mov	r3, r4
 800158c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	e7de      	b.n	8001554 <_sungetc_r+0x34>

08001596 <__ssrefill_r>:
 8001596:	b510      	push	{r4, lr}
 8001598:	460c      	mov	r4, r1
 800159a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800159c:	b169      	cbz	r1, 80015ba <__ssrefill_r+0x24>
 800159e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015a2:	4299      	cmp	r1, r3
 80015a4:	d001      	beq.n	80015aa <__ssrefill_r+0x14>
 80015a6:	f7ff fe19 	bl	80011dc <_free_r>
 80015aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015ac:	6063      	str	r3, [r4, #4]
 80015ae:	2000      	movs	r0, #0
 80015b0:	6360      	str	r0, [r4, #52]	@ 0x34
 80015b2:	b113      	cbz	r3, 80015ba <__ssrefill_r+0x24>
 80015b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80015b6:	6023      	str	r3, [r4, #0]
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	6923      	ldr	r3, [r4, #16]
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	6063      	str	r3, [r4, #4]
 80015c2:	89a3      	ldrh	r3, [r4, #12]
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	81a3      	strh	r3, [r4, #12]
 80015ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015ce:	e7f3      	b.n	80015b8 <__ssrefill_r+0x22>

080015d0 <__ssvfiscanf_r>:
 80015d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015d4:	460c      	mov	r4, r1
 80015d6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80015da:	2100      	movs	r1, #0
 80015dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80015e0:	49a5      	ldr	r1, [pc, #660]	@ (8001878 <__ssvfiscanf_r+0x2a8>)
 80015e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80015e4:	f10d 0804 	add.w	r8, sp, #4
 80015e8:	49a4      	ldr	r1, [pc, #656]	@ (800187c <__ssvfiscanf_r+0x2ac>)
 80015ea:	4fa5      	ldr	r7, [pc, #660]	@ (8001880 <__ssvfiscanf_r+0x2b0>)
 80015ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80015f0:	4606      	mov	r6, r0
 80015f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	7813      	ldrb	r3, [r2, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8158 	beq.w	80018ae <__ssvfiscanf_r+0x2de>
 80015fe:	5cf9      	ldrb	r1, [r7, r3]
 8001600:	f011 0108 	ands.w	r1, r1, #8
 8001604:	f102 0501 	add.w	r5, r2, #1
 8001608:	d019      	beq.n	800163e <__ssvfiscanf_r+0x6e>
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dd0f      	ble.n	8001630 <__ssvfiscanf_r+0x60>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	5cba      	ldrb	r2, [r7, r2]
 8001616:	0712      	lsls	r2, r2, #28
 8001618:	d401      	bmi.n	800161e <__ssvfiscanf_r+0x4e>
 800161a:	462a      	mov	r2, r5
 800161c:	e7eb      	b.n	80015f6 <__ssvfiscanf_r+0x26>
 800161e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001620:	3201      	adds	r2, #1
 8001622:	9245      	str	r2, [sp, #276]	@ 0x114
 8001624:	6862      	ldr	r2, [r4, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	3a01      	subs	r2, #1
 800162a:	6062      	str	r2, [r4, #4]
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	e7ec      	b.n	800160a <__ssvfiscanf_r+0x3a>
 8001630:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001632:	4621      	mov	r1, r4
 8001634:	4630      	mov	r0, r6
 8001636:	4798      	blx	r3
 8001638:	2800      	cmp	r0, #0
 800163a:	d0e9      	beq.n	8001610 <__ssvfiscanf_r+0x40>
 800163c:	e7ed      	b.n	800161a <__ssvfiscanf_r+0x4a>
 800163e:	2b25      	cmp	r3, #37	@ 0x25
 8001640:	d012      	beq.n	8001668 <__ssvfiscanf_r+0x98>
 8001642:	4699      	mov	r9, r3
 8001644:	6863      	ldr	r3, [r4, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f340 8093 	ble.w	8001772 <__ssvfiscanf_r+0x1a2>
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	7813      	ldrb	r3, [r2, #0]
 8001650:	454b      	cmp	r3, r9
 8001652:	f040 812c 	bne.w	80018ae <__ssvfiscanf_r+0x2de>
 8001656:	6863      	ldr	r3, [r4, #4]
 8001658:	3b01      	subs	r3, #1
 800165a:	6063      	str	r3, [r4, #4]
 800165c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800165e:	3201      	adds	r2, #1
 8001660:	3301      	adds	r3, #1
 8001662:	6022      	str	r2, [r4, #0]
 8001664:	9345      	str	r3, [sp, #276]	@ 0x114
 8001666:	e7d8      	b.n	800161a <__ssvfiscanf_r+0x4a>
 8001668:	9141      	str	r1, [sp, #260]	@ 0x104
 800166a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800166c:	7853      	ldrb	r3, [r2, #1]
 800166e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001670:	bf02      	ittt	eq
 8001672:	2310      	moveq	r3, #16
 8001674:	1c95      	addeq	r5, r2, #2
 8001676:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001678:	220a      	movs	r2, #10
 800167a:	46a9      	mov	r9, r5
 800167c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001680:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8001684:	2b09      	cmp	r3, #9
 8001686:	d91e      	bls.n	80016c6 <__ssvfiscanf_r+0xf6>
 8001688:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8001884 <__ssvfiscanf_r+0x2b4>
 800168c:	2203      	movs	r2, #3
 800168e:	4650      	mov	r0, sl
 8001690:	f7fe fdbe 	bl	8000210 <memchr>
 8001694:	b138      	cbz	r0, 80016a6 <__ssvfiscanf_r+0xd6>
 8001696:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001698:	eba0 000a 	sub.w	r0, r0, sl
 800169c:	2301      	movs	r3, #1
 800169e:	4083      	lsls	r3, r0
 80016a0:	4313      	orrs	r3, r2
 80016a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80016a4:	464d      	mov	r5, r9
 80016a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80016aa:	2b78      	cmp	r3, #120	@ 0x78
 80016ac:	d806      	bhi.n	80016bc <__ssvfiscanf_r+0xec>
 80016ae:	2b57      	cmp	r3, #87	@ 0x57
 80016b0:	d810      	bhi.n	80016d4 <__ssvfiscanf_r+0x104>
 80016b2:	2b25      	cmp	r3, #37	@ 0x25
 80016b4:	d0c5      	beq.n	8001642 <__ssvfiscanf_r+0x72>
 80016b6:	d857      	bhi.n	8001768 <__ssvfiscanf_r+0x198>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d065      	beq.n	8001788 <__ssvfiscanf_r+0x1b8>
 80016bc:	2303      	movs	r3, #3
 80016be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80016c0:	230a      	movs	r3, #10
 80016c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80016c4:	e078      	b.n	80017b8 <__ssvfiscanf_r+0x1e8>
 80016c6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80016c8:	fb02 1103 	mla	r1, r2, r3, r1
 80016cc:	3930      	subs	r1, #48	@ 0x30
 80016ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 80016d0:	464d      	mov	r5, r9
 80016d2:	e7d2      	b.n	800167a <__ssvfiscanf_r+0xaa>
 80016d4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80016d8:	2a20      	cmp	r2, #32
 80016da:	d8ef      	bhi.n	80016bc <__ssvfiscanf_r+0xec>
 80016dc:	a101      	add	r1, pc, #4	@ (adr r1, 80016e4 <__ssvfiscanf_r+0x114>)
 80016de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	08001797 	.word	0x08001797
 80016e8:	080016bd 	.word	0x080016bd
 80016ec:	080016bd 	.word	0x080016bd
 80016f0:	080017f1 	.word	0x080017f1
 80016f4:	080016bd 	.word	0x080016bd
 80016f8:	080016bd 	.word	0x080016bd
 80016fc:	080016bd 	.word	0x080016bd
 8001700:	080016bd 	.word	0x080016bd
 8001704:	080016bd 	.word	0x080016bd
 8001708:	080016bd 	.word	0x080016bd
 800170c:	080016bd 	.word	0x080016bd
 8001710:	08001807 	.word	0x08001807
 8001714:	080017ed 	.word	0x080017ed
 8001718:	0800176f 	.word	0x0800176f
 800171c:	0800176f 	.word	0x0800176f
 8001720:	0800176f 	.word	0x0800176f
 8001724:	080016bd 	.word	0x080016bd
 8001728:	080017a9 	.word	0x080017a9
 800172c:	080016bd 	.word	0x080016bd
 8001730:	080016bd 	.word	0x080016bd
 8001734:	080016bd 	.word	0x080016bd
 8001738:	080016bd 	.word	0x080016bd
 800173c:	08001817 	.word	0x08001817
 8001740:	080017b1 	.word	0x080017b1
 8001744:	0800178f 	.word	0x0800178f
 8001748:	080016bd 	.word	0x080016bd
 800174c:	080016bd 	.word	0x080016bd
 8001750:	08001813 	.word	0x08001813
 8001754:	080016bd 	.word	0x080016bd
 8001758:	080017ed 	.word	0x080017ed
 800175c:	080016bd 	.word	0x080016bd
 8001760:	080016bd 	.word	0x080016bd
 8001764:	08001797 	.word	0x08001797
 8001768:	3b45      	subs	r3, #69	@ 0x45
 800176a:	2b02      	cmp	r3, #2
 800176c:	d8a6      	bhi.n	80016bc <__ssvfiscanf_r+0xec>
 800176e:	2305      	movs	r3, #5
 8001770:	e021      	b.n	80017b6 <__ssvfiscanf_r+0x1e6>
 8001772:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001774:	4621      	mov	r1, r4
 8001776:	4630      	mov	r0, r6
 8001778:	4798      	blx	r3
 800177a:	2800      	cmp	r0, #0
 800177c:	f43f af66 	beq.w	800164c <__ssvfiscanf_r+0x7c>
 8001780:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001782:	2800      	cmp	r0, #0
 8001784:	f040 808b 	bne.w	800189e <__ssvfiscanf_r+0x2ce>
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800178c:	e08b      	b.n	80018a6 <__ssvfiscanf_r+0x2d6>
 800178e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	9241      	str	r2, [sp, #260]	@ 0x104
 8001796:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179c:	9241      	str	r2, [sp, #260]	@ 0x104
 800179e:	2210      	movs	r2, #16
 80017a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80017a2:	9242      	str	r2, [sp, #264]	@ 0x108
 80017a4:	d902      	bls.n	80017ac <__ssvfiscanf_r+0x1dc>
 80017a6:	e005      	b.n	80017b4 <__ssvfiscanf_r+0x1e4>
 80017a8:	2300      	movs	r3, #0
 80017aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80017ac:	2303      	movs	r3, #3
 80017ae:	e002      	b.n	80017b6 <__ssvfiscanf_r+0x1e6>
 80017b0:	2308      	movs	r3, #8
 80017b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80017b4:	2304      	movs	r3, #4
 80017b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80017b8:	6863      	ldr	r3, [r4, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dd39      	ble.n	8001832 <__ssvfiscanf_r+0x262>
 80017be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80017c0:	0659      	lsls	r1, r3, #25
 80017c2:	d404      	bmi.n	80017ce <__ssvfiscanf_r+0x1fe>
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	5cba      	ldrb	r2, [r7, r2]
 80017ca:	0712      	lsls	r2, r2, #28
 80017cc:	d438      	bmi.n	8001840 <__ssvfiscanf_r+0x270>
 80017ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	dc47      	bgt.n	8001864 <__ssvfiscanf_r+0x294>
 80017d4:	466b      	mov	r3, sp
 80017d6:	4622      	mov	r2, r4
 80017d8:	a941      	add	r1, sp, #260	@ 0x104
 80017da:	4630      	mov	r0, r6
 80017dc:	f000 fbde 	bl	8001f9c <_scanf_chars>
 80017e0:	2801      	cmp	r0, #1
 80017e2:	d064      	beq.n	80018ae <__ssvfiscanf_r+0x2de>
 80017e4:	2802      	cmp	r0, #2
 80017e6:	f47f af18 	bne.w	800161a <__ssvfiscanf_r+0x4a>
 80017ea:	e7c9      	b.n	8001780 <__ssvfiscanf_r+0x1b0>
 80017ec:	220a      	movs	r2, #10
 80017ee:	e7d7      	b.n	80017a0 <__ssvfiscanf_r+0x1d0>
 80017f0:	4629      	mov	r1, r5
 80017f2:	4640      	mov	r0, r8
 80017f4:	f000 fd20 	bl	8002238 <__sccl>
 80017f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80017fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8001800:	4605      	mov	r5, r0
 8001802:	2301      	movs	r3, #1
 8001804:	e7d7      	b.n	80017b6 <__ssvfiscanf_r+0x1e6>
 8001806:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180c:	9341      	str	r3, [sp, #260]	@ 0x104
 800180e:	2300      	movs	r3, #0
 8001810:	e7d1      	b.n	80017b6 <__ssvfiscanf_r+0x1e6>
 8001812:	2302      	movs	r3, #2
 8001814:	e7cf      	b.n	80017b6 <__ssvfiscanf_r+0x1e6>
 8001816:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8001818:	06c3      	lsls	r3, r0, #27
 800181a:	f53f aefe 	bmi.w	800161a <__ssvfiscanf_r+0x4a>
 800181e:	9b00      	ldr	r3, [sp, #0]
 8001820:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001822:	1d19      	adds	r1, r3, #4
 8001824:	9100      	str	r1, [sp, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	07c0      	lsls	r0, r0, #31
 800182a:	bf4c      	ite	mi
 800182c:	801a      	strhmi	r2, [r3, #0]
 800182e:	601a      	strpl	r2, [r3, #0]
 8001830:	e6f3      	b.n	800161a <__ssvfiscanf_r+0x4a>
 8001832:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001834:	4621      	mov	r1, r4
 8001836:	4630      	mov	r0, r6
 8001838:	4798      	blx	r3
 800183a:	2800      	cmp	r0, #0
 800183c:	d0bf      	beq.n	80017be <__ssvfiscanf_r+0x1ee>
 800183e:	e79f      	b.n	8001780 <__ssvfiscanf_r+0x1b0>
 8001840:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001842:	3201      	adds	r2, #1
 8001844:	9245      	str	r2, [sp, #276]	@ 0x114
 8001846:	6862      	ldr	r2, [r4, #4]
 8001848:	3a01      	subs	r2, #1
 800184a:	2a00      	cmp	r2, #0
 800184c:	6062      	str	r2, [r4, #4]
 800184e:	dd02      	ble.n	8001856 <__ssvfiscanf_r+0x286>
 8001850:	3301      	adds	r3, #1
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	e7b6      	b.n	80017c4 <__ssvfiscanf_r+0x1f4>
 8001856:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001858:	4621      	mov	r1, r4
 800185a:	4630      	mov	r0, r6
 800185c:	4798      	blx	r3
 800185e:	2800      	cmp	r0, #0
 8001860:	d0b0      	beq.n	80017c4 <__ssvfiscanf_r+0x1f4>
 8001862:	e78d      	b.n	8001780 <__ssvfiscanf_r+0x1b0>
 8001864:	2b04      	cmp	r3, #4
 8001866:	dc0f      	bgt.n	8001888 <__ssvfiscanf_r+0x2b8>
 8001868:	466b      	mov	r3, sp
 800186a:	4622      	mov	r2, r4
 800186c:	a941      	add	r1, sp, #260	@ 0x104
 800186e:	4630      	mov	r0, r6
 8001870:	f000 fbee 	bl	8002050 <_scanf_i>
 8001874:	e7b4      	b.n	80017e0 <__ssvfiscanf_r+0x210>
 8001876:	bf00      	nop
 8001878:	08001521 	.word	0x08001521
 800187c:	08001597 	.word	0x08001597
 8001880:	08002995 	.word	0x08002995
 8001884:	08002a9b 	.word	0x08002a9b
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <__ssvfiscanf_r+0x2e4>)
 800188a:	2b00      	cmp	r3, #0
 800188c:	f43f aec5 	beq.w	800161a <__ssvfiscanf_r+0x4a>
 8001890:	466b      	mov	r3, sp
 8001892:	4622      	mov	r2, r4
 8001894:	a941      	add	r1, sp, #260	@ 0x104
 8001896:	4630      	mov	r0, r6
 8001898:	f3af 8000 	nop.w
 800189c:	e7a0      	b.n	80017e0 <__ssvfiscanf_r+0x210>
 800189e:	89a3      	ldrh	r3, [r4, #12]
 80018a0:	065b      	lsls	r3, r3, #25
 80018a2:	f53f af71 	bmi.w	8001788 <__ssvfiscanf_r+0x1b8>
 80018a6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80018aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80018b0:	e7f9      	b.n	80018a6 <__ssvfiscanf_r+0x2d6>
 80018b2:	bf00      	nop
 80018b4:	00000000 	.word	0x00000000

080018b8 <__sfputc_r>:
 80018b8:	6893      	ldr	r3, [r2, #8]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	b410      	push	{r4}
 80018c0:	6093      	str	r3, [r2, #8]
 80018c2:	da08      	bge.n	80018d6 <__sfputc_r+0x1e>
 80018c4:	6994      	ldr	r4, [r2, #24]
 80018c6:	42a3      	cmp	r3, r4
 80018c8:	db01      	blt.n	80018ce <__sfputc_r+0x16>
 80018ca:	290a      	cmp	r1, #10
 80018cc:	d103      	bne.n	80018d6 <__sfputc_r+0x1e>
 80018ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018d2:	f000 be7b 	b.w	80025cc <__swbuf_r>
 80018d6:	6813      	ldr	r3, [r2, #0]
 80018d8:	1c58      	adds	r0, r3, #1
 80018da:	6010      	str	r0, [r2, #0]
 80018dc:	7019      	strb	r1, [r3, #0]
 80018de:	4608      	mov	r0, r1
 80018e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <__sfputs_r>:
 80018e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e8:	4606      	mov	r6, r0
 80018ea:	460f      	mov	r7, r1
 80018ec:	4614      	mov	r4, r2
 80018ee:	18d5      	adds	r5, r2, r3
 80018f0:	42ac      	cmp	r4, r5
 80018f2:	d101      	bne.n	80018f8 <__sfputs_r+0x12>
 80018f4:	2000      	movs	r0, #0
 80018f6:	e007      	b.n	8001908 <__sfputs_r+0x22>
 80018f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018fc:	463a      	mov	r2, r7
 80018fe:	4630      	mov	r0, r6
 8001900:	f7ff ffda 	bl	80018b8 <__sfputc_r>
 8001904:	1c43      	adds	r3, r0, #1
 8001906:	d1f3      	bne.n	80018f0 <__sfputs_r+0xa>
 8001908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800190c <_vfiprintf_r>:
 800190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001910:	460d      	mov	r5, r1
 8001912:	b09d      	sub	sp, #116	@ 0x74
 8001914:	4614      	mov	r4, r2
 8001916:	4698      	mov	r8, r3
 8001918:	4606      	mov	r6, r0
 800191a:	b118      	cbz	r0, 8001924 <_vfiprintf_r+0x18>
 800191c:	6a03      	ldr	r3, [r0, #32]
 800191e:	b90b      	cbnz	r3, 8001924 <_vfiprintf_r+0x18>
 8001920:	f7ff fb12 	bl	8000f48 <__sinit>
 8001924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001926:	07d9      	lsls	r1, r3, #31
 8001928:	d405      	bmi.n	8001936 <_vfiprintf_r+0x2a>
 800192a:	89ab      	ldrh	r3, [r5, #12]
 800192c:	059a      	lsls	r2, r3, #22
 800192e:	d402      	bmi.n	8001936 <_vfiprintf_r+0x2a>
 8001930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001932:	f7ff fc50 	bl	80011d6 <__retarget_lock_acquire_recursive>
 8001936:	89ab      	ldrh	r3, [r5, #12]
 8001938:	071b      	lsls	r3, r3, #28
 800193a:	d501      	bpl.n	8001940 <_vfiprintf_r+0x34>
 800193c:	692b      	ldr	r3, [r5, #16]
 800193e:	b99b      	cbnz	r3, 8001968 <_vfiprintf_r+0x5c>
 8001940:	4629      	mov	r1, r5
 8001942:	4630      	mov	r0, r6
 8001944:	f000 fe80 	bl	8002648 <__swsetup_r>
 8001948:	b170      	cbz	r0, 8001968 <_vfiprintf_r+0x5c>
 800194a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800194c:	07dc      	lsls	r4, r3, #31
 800194e:	d504      	bpl.n	800195a <_vfiprintf_r+0x4e>
 8001950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001954:	b01d      	add	sp, #116	@ 0x74
 8001956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800195a:	89ab      	ldrh	r3, [r5, #12]
 800195c:	0598      	lsls	r0, r3, #22
 800195e:	d4f7      	bmi.n	8001950 <_vfiprintf_r+0x44>
 8001960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001962:	f7ff fc39 	bl	80011d8 <__retarget_lock_release_recursive>
 8001966:	e7f3      	b.n	8001950 <_vfiprintf_r+0x44>
 8001968:	2300      	movs	r3, #0
 800196a:	9309      	str	r3, [sp, #36]	@ 0x24
 800196c:	2320      	movs	r3, #32
 800196e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001972:	f8cd 800c 	str.w	r8, [sp, #12]
 8001976:	2330      	movs	r3, #48	@ 0x30
 8001978:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b28 <_vfiprintf_r+0x21c>
 800197c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001980:	f04f 0901 	mov.w	r9, #1
 8001984:	4623      	mov	r3, r4
 8001986:	469a      	mov	sl, r3
 8001988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800198c:	b10a      	cbz	r2, 8001992 <_vfiprintf_r+0x86>
 800198e:	2a25      	cmp	r2, #37	@ 0x25
 8001990:	d1f9      	bne.n	8001986 <_vfiprintf_r+0x7a>
 8001992:	ebba 0b04 	subs.w	fp, sl, r4
 8001996:	d00b      	beq.n	80019b0 <_vfiprintf_r+0xa4>
 8001998:	465b      	mov	r3, fp
 800199a:	4622      	mov	r2, r4
 800199c:	4629      	mov	r1, r5
 800199e:	4630      	mov	r0, r6
 80019a0:	f7ff ffa1 	bl	80018e6 <__sfputs_r>
 80019a4:	3001      	adds	r0, #1
 80019a6:	f000 80a7 	beq.w	8001af8 <_vfiprintf_r+0x1ec>
 80019aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019ac:	445a      	add	r2, fp
 80019ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80019b0:	f89a 3000 	ldrb.w	r3, [sl]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 809f 	beq.w	8001af8 <_vfiprintf_r+0x1ec>
 80019ba:	2300      	movs	r3, #0
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019c4:	f10a 0a01 	add.w	sl, sl, #1
 80019c8:	9304      	str	r3, [sp, #16]
 80019ca:	9307      	str	r3, [sp, #28]
 80019cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80019d2:	4654      	mov	r4, sl
 80019d4:	2205      	movs	r2, #5
 80019d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019da:	4853      	ldr	r0, [pc, #332]	@ (8001b28 <_vfiprintf_r+0x21c>)
 80019dc:	f7fe fc18 	bl	8000210 <memchr>
 80019e0:	9a04      	ldr	r2, [sp, #16]
 80019e2:	b9d8      	cbnz	r0, 8001a1c <_vfiprintf_r+0x110>
 80019e4:	06d1      	lsls	r1, r2, #27
 80019e6:	bf44      	itt	mi
 80019e8:	2320      	movmi	r3, #32
 80019ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019ee:	0713      	lsls	r3, r2, #28
 80019f0:	bf44      	itt	mi
 80019f2:	232b      	movmi	r3, #43	@ 0x2b
 80019f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019f8:	f89a 3000 	ldrb.w	r3, [sl]
 80019fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80019fe:	d015      	beq.n	8001a2c <_vfiprintf_r+0x120>
 8001a00:	9a07      	ldr	r2, [sp, #28]
 8001a02:	4654      	mov	r4, sl
 8001a04:	2000      	movs	r0, #0
 8001a06:	f04f 0c0a 	mov.w	ip, #10
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a10:	3b30      	subs	r3, #48	@ 0x30
 8001a12:	2b09      	cmp	r3, #9
 8001a14:	d94b      	bls.n	8001aae <_vfiprintf_r+0x1a2>
 8001a16:	b1b0      	cbz	r0, 8001a46 <_vfiprintf_r+0x13a>
 8001a18:	9207      	str	r2, [sp, #28]
 8001a1a:	e014      	b.n	8001a46 <_vfiprintf_r+0x13a>
 8001a1c:	eba0 0308 	sub.w	r3, r0, r8
 8001a20:	fa09 f303 	lsl.w	r3, r9, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	46a2      	mov	sl, r4
 8001a2a:	e7d2      	b.n	80019d2 <_vfiprintf_r+0xc6>
 8001a2c:	9b03      	ldr	r3, [sp, #12]
 8001a2e:	1d19      	adds	r1, r3, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	9103      	str	r1, [sp, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bfbb      	ittet	lt
 8001a38:	425b      	neglt	r3, r3
 8001a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a3e:	9307      	strge	r3, [sp, #28]
 8001a40:	9307      	strlt	r3, [sp, #28]
 8001a42:	bfb8      	it	lt
 8001a44:	9204      	strlt	r2, [sp, #16]
 8001a46:	7823      	ldrb	r3, [r4, #0]
 8001a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a4a:	d10a      	bne.n	8001a62 <_vfiprintf_r+0x156>
 8001a4c:	7863      	ldrb	r3, [r4, #1]
 8001a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a50:	d132      	bne.n	8001ab8 <_vfiprintf_r+0x1ac>
 8001a52:	9b03      	ldr	r3, [sp, #12]
 8001a54:	1d1a      	adds	r2, r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	9203      	str	r2, [sp, #12]
 8001a5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a5e:	3402      	adds	r4, #2
 8001a60:	9305      	str	r3, [sp, #20]
 8001a62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b38 <_vfiprintf_r+0x22c>
 8001a66:	7821      	ldrb	r1, [r4, #0]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4650      	mov	r0, sl
 8001a6c:	f7fe fbd0 	bl	8000210 <memchr>
 8001a70:	b138      	cbz	r0, 8001a82 <_vfiprintf_r+0x176>
 8001a72:	9b04      	ldr	r3, [sp, #16]
 8001a74:	eba0 000a 	sub.w	r0, r0, sl
 8001a78:	2240      	movs	r2, #64	@ 0x40
 8001a7a:	4082      	lsls	r2, r0
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	3401      	adds	r4, #1
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a86:	4829      	ldr	r0, [pc, #164]	@ (8001b2c <_vfiprintf_r+0x220>)
 8001a88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a8c:	2206      	movs	r2, #6
 8001a8e:	f7fe fbbf 	bl	8000210 <memchr>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d03f      	beq.n	8001b16 <_vfiprintf_r+0x20a>
 8001a96:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <_vfiprintf_r+0x224>)
 8001a98:	bb1b      	cbnz	r3, 8001ae2 <_vfiprintf_r+0x1d6>
 8001a9a:	9b03      	ldr	r3, [sp, #12]
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	f023 0307 	bic.w	r3, r3, #7
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	9303      	str	r3, [sp, #12]
 8001aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001aa8:	443b      	add	r3, r7
 8001aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8001aac:	e76a      	b.n	8001984 <_vfiprintf_r+0x78>
 8001aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e7a8      	b.n	8001a0a <_vfiprintf_r+0xfe>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	3401      	adds	r4, #1
 8001abc:	9305      	str	r3, [sp, #20]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 0c0a 	mov.w	ip, #10
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aca:	3a30      	subs	r2, #48	@ 0x30
 8001acc:	2a09      	cmp	r2, #9
 8001ace:	d903      	bls.n	8001ad8 <_vfiprintf_r+0x1cc>
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0c6      	beq.n	8001a62 <_vfiprintf_r+0x156>
 8001ad4:	9105      	str	r1, [sp, #20]
 8001ad6:	e7c4      	b.n	8001a62 <_vfiprintf_r+0x156>
 8001ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001adc:	4604      	mov	r4, r0
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e7f0      	b.n	8001ac4 <_vfiprintf_r+0x1b8>
 8001ae2:	ab03      	add	r3, sp, #12
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	462a      	mov	r2, r5
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <_vfiprintf_r+0x228>)
 8001aea:	a904      	add	r1, sp, #16
 8001aec:	4630      	mov	r0, r6
 8001aee:	f3af 8000 	nop.w
 8001af2:	4607      	mov	r7, r0
 8001af4:	1c78      	adds	r0, r7, #1
 8001af6:	d1d6      	bne.n	8001aa6 <_vfiprintf_r+0x19a>
 8001af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001afa:	07d9      	lsls	r1, r3, #31
 8001afc:	d405      	bmi.n	8001b0a <_vfiprintf_r+0x1fe>
 8001afe:	89ab      	ldrh	r3, [r5, #12]
 8001b00:	059a      	lsls	r2, r3, #22
 8001b02:	d402      	bmi.n	8001b0a <_vfiprintf_r+0x1fe>
 8001b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b06:	f7ff fb67 	bl	80011d8 <__retarget_lock_release_recursive>
 8001b0a:	89ab      	ldrh	r3, [r5, #12]
 8001b0c:	065b      	lsls	r3, r3, #25
 8001b0e:	f53f af1f 	bmi.w	8001950 <_vfiprintf_r+0x44>
 8001b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b14:	e71e      	b.n	8001954 <_vfiprintf_r+0x48>
 8001b16:	ab03      	add	r3, sp, #12
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	462a      	mov	r2, r5
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <_vfiprintf_r+0x228>)
 8001b1e:	a904      	add	r1, sp, #16
 8001b20:	4630      	mov	r0, r6
 8001b22:	f000 f91b 	bl	8001d5c <_printf_i>
 8001b26:	e7e4      	b.n	8001af2 <_vfiprintf_r+0x1e6>
 8001b28:	08002a95 	.word	0x08002a95
 8001b2c:	08002a9f 	.word	0x08002a9f
 8001b30:	00000000 	.word	0x00000000
 8001b34:	080018e7 	.word	0x080018e7
 8001b38:	08002a9b 	.word	0x08002a9b

08001b3c <sbrk_aligned>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8001b7c <sbrk_aligned+0x40>)
 8001b40:	460c      	mov	r4, r1
 8001b42:	6831      	ldr	r1, [r6, #0]
 8001b44:	4605      	mov	r5, r0
 8001b46:	b911      	cbnz	r1, 8001b4e <sbrk_aligned+0x12>
 8001b48:	f000 fe72 	bl	8002830 <_sbrk_r>
 8001b4c:	6030      	str	r0, [r6, #0]
 8001b4e:	4621      	mov	r1, r4
 8001b50:	4628      	mov	r0, r5
 8001b52:	f000 fe6d 	bl	8002830 <_sbrk_r>
 8001b56:	1c43      	adds	r3, r0, #1
 8001b58:	d103      	bne.n	8001b62 <sbrk_aligned+0x26>
 8001b5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b5e:	4620      	mov	r0, r4
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
 8001b62:	1cc4      	adds	r4, r0, #3
 8001b64:	f024 0403 	bic.w	r4, r4, #3
 8001b68:	42a0      	cmp	r0, r4
 8001b6a:	d0f8      	beq.n	8001b5e <sbrk_aligned+0x22>
 8001b6c:	1a21      	subs	r1, r4, r0
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f000 fe5e 	bl	8002830 <_sbrk_r>
 8001b74:	3001      	adds	r0, #1
 8001b76:	d1f2      	bne.n	8001b5e <sbrk_aligned+0x22>
 8001b78:	e7ef      	b.n	8001b5a <sbrk_aligned+0x1e>
 8001b7a:	bf00      	nop
 8001b7c:	2000035c 	.word	0x2000035c

08001b80 <_malloc_r>:
 8001b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b84:	1ccd      	adds	r5, r1, #3
 8001b86:	f025 0503 	bic.w	r5, r5, #3
 8001b8a:	3508      	adds	r5, #8
 8001b8c:	2d0c      	cmp	r5, #12
 8001b8e:	bf38      	it	cc
 8001b90:	250c      	movcc	r5, #12
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	4606      	mov	r6, r0
 8001b96:	db01      	blt.n	8001b9c <_malloc_r+0x1c>
 8001b98:	42a9      	cmp	r1, r5
 8001b9a:	d904      	bls.n	8001ba6 <_malloc_r+0x26>
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	6033      	str	r3, [r6, #0]
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c7c <_malloc_r+0xfc>
 8001baa:	f000 fc2b 	bl	8002404 <__malloc_lock>
 8001bae:	f8d8 3000 	ldr.w	r3, [r8]
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	bb44      	cbnz	r4, 8001c08 <_malloc_r+0x88>
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f7ff ffbf 	bl	8001b3c <sbrk_aligned>
 8001bbe:	1c43      	adds	r3, r0, #1
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	d158      	bne.n	8001c76 <_malloc_r+0xf6>
 8001bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8001bc8:	4627      	mov	r7, r4
 8001bca:	2f00      	cmp	r7, #0
 8001bcc:	d143      	bne.n	8001c56 <_malloc_r+0xd6>
 8001bce:	2c00      	cmp	r4, #0
 8001bd0:	d04b      	beq.n	8001c6a <_malloc_r+0xea>
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	4639      	mov	r1, r7
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	eb04 0903 	add.w	r9, r4, r3
 8001bdc:	f000 fe28 	bl	8002830 <_sbrk_r>
 8001be0:	4581      	cmp	r9, r0
 8001be2:	d142      	bne.n	8001c6a <_malloc_r+0xea>
 8001be4:	6821      	ldr	r1, [r4, #0]
 8001be6:	1a6d      	subs	r5, r5, r1
 8001be8:	4629      	mov	r1, r5
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7ff ffa6 	bl	8001b3c <sbrk_aligned>
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	d03a      	beq.n	8001c6a <_malloc_r+0xea>
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	442b      	add	r3, r5
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	bb62      	cbnz	r2, 8001c5c <_malloc_r+0xdc>
 8001c02:	f8c8 7000 	str.w	r7, [r8]
 8001c06:	e00f      	b.n	8001c28 <_malloc_r+0xa8>
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	1b52      	subs	r2, r2, r5
 8001c0c:	d420      	bmi.n	8001c50 <_malloc_r+0xd0>
 8001c0e:	2a0b      	cmp	r2, #11
 8001c10:	d917      	bls.n	8001c42 <_malloc_r+0xc2>
 8001c12:	1961      	adds	r1, r4, r5
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	6025      	str	r5, [r4, #0]
 8001c18:	bf18      	it	ne
 8001c1a:	6059      	strne	r1, [r3, #4]
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	bf08      	it	eq
 8001c20:	f8c8 1000 	streq.w	r1, [r8]
 8001c24:	5162      	str	r2, [r4, r5]
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f000 fbf1 	bl	8002410 <__malloc_unlock>
 8001c2e:	f104 000b 	add.w	r0, r4, #11
 8001c32:	1d23      	adds	r3, r4, #4
 8001c34:	f020 0007 	bic.w	r0, r0, #7
 8001c38:	1ac2      	subs	r2, r0, r3
 8001c3a:	bf1c      	itt	ne
 8001c3c:	1a1b      	subne	r3, r3, r0
 8001c3e:	50a3      	strne	r3, [r4, r2]
 8001c40:	e7af      	b.n	8001ba2 <_malloc_r+0x22>
 8001c42:	6862      	ldr	r2, [r4, #4]
 8001c44:	42a3      	cmp	r3, r4
 8001c46:	bf0c      	ite	eq
 8001c48:	f8c8 2000 	streq.w	r2, [r8]
 8001c4c:	605a      	strne	r2, [r3, #4]
 8001c4e:	e7eb      	b.n	8001c28 <_malloc_r+0xa8>
 8001c50:	4623      	mov	r3, r4
 8001c52:	6864      	ldr	r4, [r4, #4]
 8001c54:	e7ae      	b.n	8001bb4 <_malloc_r+0x34>
 8001c56:	463c      	mov	r4, r7
 8001c58:	687f      	ldr	r7, [r7, #4]
 8001c5a:	e7b6      	b.n	8001bca <_malloc_r+0x4a>
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	42a3      	cmp	r3, r4
 8001c62:	d1fb      	bne.n	8001c5c <_malloc_r+0xdc>
 8001c64:	2300      	movs	r3, #0
 8001c66:	6053      	str	r3, [r2, #4]
 8001c68:	e7de      	b.n	8001c28 <_malloc_r+0xa8>
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	6033      	str	r3, [r6, #0]
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f000 fbce 	bl	8002410 <__malloc_unlock>
 8001c74:	e794      	b.n	8001ba0 <_malloc_r+0x20>
 8001c76:	6005      	str	r5, [r0, #0]
 8001c78:	e7d6      	b.n	8001c28 <_malloc_r+0xa8>
 8001c7a:	bf00      	nop
 8001c7c:	20000360 	.word	0x20000360

08001c80 <_printf_common>:
 8001c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c84:	4616      	mov	r6, r2
 8001c86:	4698      	mov	r8, r3
 8001c88:	688a      	ldr	r2, [r1, #8]
 8001c8a:	690b      	ldr	r3, [r1, #16]
 8001c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bfb8      	it	lt
 8001c94:	4613      	movlt	r3, r2
 8001c96:	6033      	str	r3, [r6, #0]
 8001c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c9c:	4607      	mov	r7, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	b10a      	cbz	r2, 8001ca6 <_printf_common+0x26>
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	6033      	str	r3, [r6, #0]
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	0699      	lsls	r1, r3, #26
 8001caa:	bf42      	ittt	mi
 8001cac:	6833      	ldrmi	r3, [r6, #0]
 8001cae:	3302      	addmi	r3, #2
 8001cb0:	6033      	strmi	r3, [r6, #0]
 8001cb2:	6825      	ldr	r5, [r4, #0]
 8001cb4:	f015 0506 	ands.w	r5, r5, #6
 8001cb8:	d106      	bne.n	8001cc8 <_printf_common+0x48>
 8001cba:	f104 0a19 	add.w	sl, r4, #25
 8001cbe:	68e3      	ldr	r3, [r4, #12]
 8001cc0:	6832      	ldr	r2, [r6, #0]
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	42ab      	cmp	r3, r5
 8001cc6:	dc26      	bgt.n	8001d16 <_printf_common+0x96>
 8001cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ccc:	6822      	ldr	r2, [r4, #0]
 8001cce:	3b00      	subs	r3, #0
 8001cd0:	bf18      	it	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	0692      	lsls	r2, r2, #26
 8001cd6:	d42b      	bmi.n	8001d30 <_printf_common+0xb0>
 8001cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001cdc:	4641      	mov	r1, r8
 8001cde:	4638      	mov	r0, r7
 8001ce0:	47c8      	blx	r9
 8001ce2:	3001      	adds	r0, #1
 8001ce4:	d01e      	beq.n	8001d24 <_printf_common+0xa4>
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	6922      	ldr	r2, [r4, #16]
 8001cea:	f003 0306 	and.w	r3, r3, #6
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf02      	ittt	eq
 8001cf2:	68e5      	ldreq	r5, [r4, #12]
 8001cf4:	6833      	ldreq	r3, [r6, #0]
 8001cf6:	1aed      	subeq	r5, r5, r3
 8001cf8:	68a3      	ldr	r3, [r4, #8]
 8001cfa:	bf0c      	ite	eq
 8001cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d00:	2500      	movne	r5, #0
 8001d02:	4293      	cmp	r3, r2
 8001d04:	bfc4      	itt	gt
 8001d06:	1a9b      	subgt	r3, r3, r2
 8001d08:	18ed      	addgt	r5, r5, r3
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	341a      	adds	r4, #26
 8001d0e:	42b5      	cmp	r5, r6
 8001d10:	d11a      	bne.n	8001d48 <_printf_common+0xc8>
 8001d12:	2000      	movs	r0, #0
 8001d14:	e008      	b.n	8001d28 <_printf_common+0xa8>
 8001d16:	2301      	movs	r3, #1
 8001d18:	4652      	mov	r2, sl
 8001d1a:	4641      	mov	r1, r8
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	47c8      	blx	r9
 8001d20:	3001      	adds	r0, #1
 8001d22:	d103      	bne.n	8001d2c <_printf_common+0xac>
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	3501      	adds	r5, #1
 8001d2e:	e7c6      	b.n	8001cbe <_printf_common+0x3e>
 8001d30:	18e1      	adds	r1, r4, r3
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	2030      	movs	r0, #48	@ 0x30
 8001d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d3a:	4422      	add	r2, r4
 8001d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d44:	3302      	adds	r3, #2
 8001d46:	e7c7      	b.n	8001cd8 <_printf_common+0x58>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	4638      	mov	r0, r7
 8001d50:	47c8      	blx	r9
 8001d52:	3001      	adds	r0, #1
 8001d54:	d0e6      	beq.n	8001d24 <_printf_common+0xa4>
 8001d56:	3601      	adds	r6, #1
 8001d58:	e7d9      	b.n	8001d0e <_printf_common+0x8e>
	...

08001d5c <_printf_i>:
 8001d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d60:	7e0f      	ldrb	r7, [r1, #24]
 8001d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d64:	2f78      	cmp	r7, #120	@ 0x78
 8001d66:	4691      	mov	r9, r2
 8001d68:	4680      	mov	r8, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	469a      	mov	sl, r3
 8001d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d72:	d807      	bhi.n	8001d84 <_printf_i+0x28>
 8001d74:	2f62      	cmp	r7, #98	@ 0x62
 8001d76:	d80a      	bhi.n	8001d8e <_printf_i+0x32>
 8001d78:	2f00      	cmp	r7, #0
 8001d7a:	f000 80d2 	beq.w	8001f22 <_printf_i+0x1c6>
 8001d7e:	2f58      	cmp	r7, #88	@ 0x58
 8001d80:	f000 80b9 	beq.w	8001ef6 <_printf_i+0x19a>
 8001d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d8c:	e03a      	b.n	8001e04 <_printf_i+0xa8>
 8001d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d92:	2b15      	cmp	r3, #21
 8001d94:	d8f6      	bhi.n	8001d84 <_printf_i+0x28>
 8001d96:	a101      	add	r1, pc, #4	@ (adr r1, 8001d9c <_printf_i+0x40>)
 8001d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d9c:	08001df5 	.word	0x08001df5
 8001da0:	08001e09 	.word	0x08001e09
 8001da4:	08001d85 	.word	0x08001d85
 8001da8:	08001d85 	.word	0x08001d85
 8001dac:	08001d85 	.word	0x08001d85
 8001db0:	08001d85 	.word	0x08001d85
 8001db4:	08001e09 	.word	0x08001e09
 8001db8:	08001d85 	.word	0x08001d85
 8001dbc:	08001d85 	.word	0x08001d85
 8001dc0:	08001d85 	.word	0x08001d85
 8001dc4:	08001d85 	.word	0x08001d85
 8001dc8:	08001f09 	.word	0x08001f09
 8001dcc:	08001e33 	.word	0x08001e33
 8001dd0:	08001ec3 	.word	0x08001ec3
 8001dd4:	08001d85 	.word	0x08001d85
 8001dd8:	08001d85 	.word	0x08001d85
 8001ddc:	08001f2b 	.word	0x08001f2b
 8001de0:	08001d85 	.word	0x08001d85
 8001de4:	08001e33 	.word	0x08001e33
 8001de8:	08001d85 	.word	0x08001d85
 8001dec:	08001d85 	.word	0x08001d85
 8001df0:	08001ecb 	.word	0x08001ecb
 8001df4:	6833      	ldr	r3, [r6, #0]
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6032      	str	r2, [r6, #0]
 8001dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e04:	2301      	movs	r3, #1
 8001e06:	e09d      	b.n	8001f44 <_printf_i+0x1e8>
 8001e08:	6833      	ldr	r3, [r6, #0]
 8001e0a:	6820      	ldr	r0, [r4, #0]
 8001e0c:	1d19      	adds	r1, r3, #4
 8001e0e:	6031      	str	r1, [r6, #0]
 8001e10:	0606      	lsls	r6, r0, #24
 8001e12:	d501      	bpl.n	8001e18 <_printf_i+0xbc>
 8001e14:	681d      	ldr	r5, [r3, #0]
 8001e16:	e003      	b.n	8001e20 <_printf_i+0xc4>
 8001e18:	0645      	lsls	r5, r0, #25
 8001e1a:	d5fb      	bpl.n	8001e14 <_printf_i+0xb8>
 8001e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e20:	2d00      	cmp	r5, #0
 8001e22:	da03      	bge.n	8001e2c <_printf_i+0xd0>
 8001e24:	232d      	movs	r3, #45	@ 0x2d
 8001e26:	426d      	negs	r5, r5
 8001e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e2c:	4859      	ldr	r0, [pc, #356]	@ (8001f94 <_printf_i+0x238>)
 8001e2e:	230a      	movs	r3, #10
 8001e30:	e011      	b.n	8001e56 <_printf_i+0xfa>
 8001e32:	6821      	ldr	r1, [r4, #0]
 8001e34:	6833      	ldr	r3, [r6, #0]
 8001e36:	0608      	lsls	r0, r1, #24
 8001e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e3c:	d402      	bmi.n	8001e44 <_printf_i+0xe8>
 8001e3e:	0649      	lsls	r1, r1, #25
 8001e40:	bf48      	it	mi
 8001e42:	b2ad      	uxthmi	r5, r5
 8001e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e46:	4853      	ldr	r0, [pc, #332]	@ (8001f94 <_printf_i+0x238>)
 8001e48:	6033      	str	r3, [r6, #0]
 8001e4a:	bf14      	ite	ne
 8001e4c:	230a      	movne	r3, #10
 8001e4e:	2308      	moveq	r3, #8
 8001e50:	2100      	movs	r1, #0
 8001e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e56:	6866      	ldr	r6, [r4, #4]
 8001e58:	60a6      	str	r6, [r4, #8]
 8001e5a:	2e00      	cmp	r6, #0
 8001e5c:	bfa2      	ittt	ge
 8001e5e:	6821      	ldrge	r1, [r4, #0]
 8001e60:	f021 0104 	bicge.w	r1, r1, #4
 8001e64:	6021      	strge	r1, [r4, #0]
 8001e66:	b90d      	cbnz	r5, 8001e6c <_printf_i+0x110>
 8001e68:	2e00      	cmp	r6, #0
 8001e6a:	d04b      	beq.n	8001f04 <_printf_i+0x1a8>
 8001e6c:	4616      	mov	r6, r2
 8001e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e72:	fb03 5711 	mls	r7, r3, r1, r5
 8001e76:	5dc7      	ldrb	r7, [r0, r7]
 8001e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e7c:	462f      	mov	r7, r5
 8001e7e:	42bb      	cmp	r3, r7
 8001e80:	460d      	mov	r5, r1
 8001e82:	d9f4      	bls.n	8001e6e <_printf_i+0x112>
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d10b      	bne.n	8001ea0 <_printf_i+0x144>
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	07df      	lsls	r7, r3, #31
 8001e8c:	d508      	bpl.n	8001ea0 <_printf_i+0x144>
 8001e8e:	6923      	ldr	r3, [r4, #16]
 8001e90:	6861      	ldr	r1, [r4, #4]
 8001e92:	4299      	cmp	r1, r3
 8001e94:	bfde      	ittt	le
 8001e96:	2330      	movle	r3, #48	@ 0x30
 8001e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e9c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001ea0:	1b92      	subs	r2, r2, r6
 8001ea2:	6122      	str	r2, [r4, #16]
 8001ea4:	f8cd a000 	str.w	sl, [sp]
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	aa03      	add	r2, sp, #12
 8001eac:	4621      	mov	r1, r4
 8001eae:	4640      	mov	r0, r8
 8001eb0:	f7ff fee6 	bl	8001c80 <_printf_common>
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d14a      	bne.n	8001f4e <_printf_i+0x1f2>
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ebc:	b004      	add	sp, #16
 8001ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	f043 0320 	orr.w	r3, r3, #32
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	4833      	ldr	r0, [pc, #204]	@ (8001f98 <_printf_i+0x23c>)
 8001ecc:	2778      	movs	r7, #120	@ 0x78
 8001ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	6831      	ldr	r1, [r6, #0]
 8001ed6:	061f      	lsls	r7, r3, #24
 8001ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8001edc:	d402      	bmi.n	8001ee4 <_printf_i+0x188>
 8001ede:	065f      	lsls	r7, r3, #25
 8001ee0:	bf48      	it	mi
 8001ee2:	b2ad      	uxthmi	r5, r5
 8001ee4:	6031      	str	r1, [r6, #0]
 8001ee6:	07d9      	lsls	r1, r3, #31
 8001ee8:	bf44      	itt	mi
 8001eea:	f043 0320 	orrmi.w	r3, r3, #32
 8001eee:	6023      	strmi	r3, [r4, #0]
 8001ef0:	b11d      	cbz	r5, 8001efa <_printf_i+0x19e>
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	e7ac      	b.n	8001e50 <_printf_i+0xf4>
 8001ef6:	4827      	ldr	r0, [pc, #156]	@ (8001f94 <_printf_i+0x238>)
 8001ef8:	e7e9      	b.n	8001ece <_printf_i+0x172>
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	f023 0320 	bic.w	r3, r3, #32
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	e7f6      	b.n	8001ef2 <_printf_i+0x196>
 8001f04:	4616      	mov	r6, r2
 8001f06:	e7bd      	b.n	8001e84 <_printf_i+0x128>
 8001f08:	6833      	ldr	r3, [r6, #0]
 8001f0a:	6825      	ldr	r5, [r4, #0]
 8001f0c:	6961      	ldr	r1, [r4, #20]
 8001f0e:	1d18      	adds	r0, r3, #4
 8001f10:	6030      	str	r0, [r6, #0]
 8001f12:	062e      	lsls	r6, r5, #24
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	d501      	bpl.n	8001f1c <_printf_i+0x1c0>
 8001f18:	6019      	str	r1, [r3, #0]
 8001f1a:	e002      	b.n	8001f22 <_printf_i+0x1c6>
 8001f1c:	0668      	lsls	r0, r5, #25
 8001f1e:	d5fb      	bpl.n	8001f18 <_printf_i+0x1bc>
 8001f20:	8019      	strh	r1, [r3, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	6123      	str	r3, [r4, #16]
 8001f26:	4616      	mov	r6, r2
 8001f28:	e7bc      	b.n	8001ea4 <_printf_i+0x148>
 8001f2a:	6833      	ldr	r3, [r6, #0]
 8001f2c:	1d1a      	adds	r2, r3, #4
 8001f2e:	6032      	str	r2, [r6, #0]
 8001f30:	681e      	ldr	r6, [r3, #0]
 8001f32:	6862      	ldr	r2, [r4, #4]
 8001f34:	2100      	movs	r1, #0
 8001f36:	4630      	mov	r0, r6
 8001f38:	f7fe f96a 	bl	8000210 <memchr>
 8001f3c:	b108      	cbz	r0, 8001f42 <_printf_i+0x1e6>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	6060      	str	r0, [r4, #4]
 8001f42:	6863      	ldr	r3, [r4, #4]
 8001f44:	6123      	str	r3, [r4, #16]
 8001f46:	2300      	movs	r3, #0
 8001f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f4c:	e7aa      	b.n	8001ea4 <_printf_i+0x148>
 8001f4e:	6923      	ldr	r3, [r4, #16]
 8001f50:	4632      	mov	r2, r6
 8001f52:	4649      	mov	r1, r9
 8001f54:	4640      	mov	r0, r8
 8001f56:	47d0      	blx	sl
 8001f58:	3001      	adds	r0, #1
 8001f5a:	d0ad      	beq.n	8001eb8 <_printf_i+0x15c>
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	079b      	lsls	r3, r3, #30
 8001f60:	d413      	bmi.n	8001f8a <_printf_i+0x22e>
 8001f62:	68e0      	ldr	r0, [r4, #12]
 8001f64:	9b03      	ldr	r3, [sp, #12]
 8001f66:	4298      	cmp	r0, r3
 8001f68:	bfb8      	it	lt
 8001f6a:	4618      	movlt	r0, r3
 8001f6c:	e7a6      	b.n	8001ebc <_printf_i+0x160>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	4632      	mov	r2, r6
 8001f72:	4649      	mov	r1, r9
 8001f74:	4640      	mov	r0, r8
 8001f76:	47d0      	blx	sl
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d09d      	beq.n	8001eb8 <_printf_i+0x15c>
 8001f7c:	3501      	adds	r5, #1
 8001f7e:	68e3      	ldr	r3, [r4, #12]
 8001f80:	9903      	ldr	r1, [sp, #12]
 8001f82:	1a5b      	subs	r3, r3, r1
 8001f84:	42ab      	cmp	r3, r5
 8001f86:	dcf2      	bgt.n	8001f6e <_printf_i+0x212>
 8001f88:	e7eb      	b.n	8001f62 <_printf_i+0x206>
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	f104 0619 	add.w	r6, r4, #25
 8001f90:	e7f5      	b.n	8001f7e <_printf_i+0x222>
 8001f92:	bf00      	nop
 8001f94:	08002aa6 	.word	0x08002aa6
 8001f98:	08002ab7 	.word	0x08002ab7

08001f9c <_scanf_chars>:
 8001f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa0:	4615      	mov	r5, r2
 8001fa2:	688a      	ldr	r2, [r1, #8]
 8001fa4:	4680      	mov	r8, r0
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	b932      	cbnz	r2, 8001fb8 <_scanf_chars+0x1c>
 8001faa:	698a      	ldr	r2, [r1, #24]
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001fb4:	2201      	moveq	r2, #1
 8001fb6:	608a      	str	r2, [r1, #8]
 8001fb8:	6822      	ldr	r2, [r4, #0]
 8001fba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800204c <_scanf_chars+0xb0>
 8001fbe:	06d1      	lsls	r1, r2, #27
 8001fc0:	bf5f      	itttt	pl
 8001fc2:	681a      	ldrpl	r2, [r3, #0]
 8001fc4:	1d11      	addpl	r1, r2, #4
 8001fc6:	6019      	strpl	r1, [r3, #0]
 8001fc8:	6816      	ldrpl	r6, [r2, #0]
 8001fca:	2700      	movs	r7, #0
 8001fcc:	69a0      	ldr	r0, [r4, #24]
 8001fce:	b188      	cbz	r0, 8001ff4 <_scanf_chars+0x58>
 8001fd0:	2801      	cmp	r0, #1
 8001fd2:	d107      	bne.n	8001fe4 <_scanf_chars+0x48>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	6963      	ldr	r3, [r4, #20]
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	b953      	cbnz	r3, 8001ff4 <_scanf_chars+0x58>
 8001fde:	2f00      	cmp	r7, #0
 8001fe0:	d031      	beq.n	8002046 <_scanf_chars+0xaa>
 8001fe2:	e022      	b.n	800202a <_scanf_chars+0x8e>
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	d120      	bne.n	800202a <_scanf_chars+0x8e>
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001ff0:	071b      	lsls	r3, r3, #28
 8001ff2:	d41a      	bmi.n	800202a <_scanf_chars+0x8e>
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	06da      	lsls	r2, r3, #27
 8001ff8:	bf5e      	ittt	pl
 8001ffa:	682b      	ldrpl	r3, [r5, #0]
 8001ffc:	781b      	ldrbpl	r3, [r3, #0]
 8001ffe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002002:	682a      	ldr	r2, [r5, #0]
 8002004:	686b      	ldr	r3, [r5, #4]
 8002006:	3201      	adds	r2, #1
 8002008:	602a      	str	r2, [r5, #0]
 800200a:	68a2      	ldr	r2, [r4, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	3a01      	subs	r2, #1
 8002010:	606b      	str	r3, [r5, #4]
 8002012:	3701      	adds	r7, #1
 8002014:	60a2      	str	r2, [r4, #8]
 8002016:	b142      	cbz	r2, 800202a <_scanf_chars+0x8e>
 8002018:	2b00      	cmp	r3, #0
 800201a:	dcd7      	bgt.n	8001fcc <_scanf_chars+0x30>
 800201c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002020:	4629      	mov	r1, r5
 8002022:	4640      	mov	r0, r8
 8002024:	4798      	blx	r3
 8002026:	2800      	cmp	r0, #0
 8002028:	d0d0      	beq.n	8001fcc <_scanf_chars+0x30>
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	f013 0310 	ands.w	r3, r3, #16
 8002030:	d105      	bne.n	800203e <_scanf_chars+0xa2>
 8002032:	68e2      	ldr	r2, [r4, #12]
 8002034:	3201      	adds	r2, #1
 8002036:	60e2      	str	r2, [r4, #12]
 8002038:	69a2      	ldr	r2, [r4, #24]
 800203a:	b102      	cbz	r2, 800203e <_scanf_chars+0xa2>
 800203c:	7033      	strb	r3, [r6, #0]
 800203e:	6923      	ldr	r3, [r4, #16]
 8002040:	443b      	add	r3, r7
 8002042:	6123      	str	r3, [r4, #16]
 8002044:	2000      	movs	r0, #0
 8002046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800204a:	bf00      	nop
 800204c:	08002995 	.word	0x08002995

08002050 <_scanf_i>:
 8002050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002054:	4698      	mov	r8, r3
 8002056:	4b74      	ldr	r3, [pc, #464]	@ (8002228 <_scanf_i+0x1d8>)
 8002058:	460c      	mov	r4, r1
 800205a:	4682      	mov	sl, r0
 800205c:	4616      	mov	r6, r2
 800205e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002062:	b087      	sub	sp, #28
 8002064:	ab03      	add	r3, sp, #12
 8002066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800206a:	4b70      	ldr	r3, [pc, #448]	@ (800222c <_scanf_i+0x1dc>)
 800206c:	69a1      	ldr	r1, [r4, #24]
 800206e:	4a70      	ldr	r2, [pc, #448]	@ (8002230 <_scanf_i+0x1e0>)
 8002070:	2903      	cmp	r1, #3
 8002072:	bf08      	it	eq
 8002074:	461a      	moveq	r2, r3
 8002076:	68a3      	ldr	r3, [r4, #8]
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002080:	bf88      	it	hi
 8002082:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002086:	4627      	mov	r7, r4
 8002088:	bf82      	ittt	hi
 800208a:	eb03 0905 	addhi.w	r9, r3, r5
 800208e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002092:	60a3      	strhi	r3, [r4, #8]
 8002094:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002098:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800209c:	bf98      	it	ls
 800209e:	f04f 0900 	movls.w	r9, #0
 80020a2:	6023      	str	r3, [r4, #0]
 80020a4:	463d      	mov	r5, r7
 80020a6:	f04f 0b00 	mov.w	fp, #0
 80020aa:	6831      	ldr	r1, [r6, #0]
 80020ac:	ab03      	add	r3, sp, #12
 80020ae:	7809      	ldrb	r1, [r1, #0]
 80020b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f7fe f8ab 	bl	8000210 <memchr>
 80020ba:	b328      	cbz	r0, 8002108 <_scanf_i+0xb8>
 80020bc:	f1bb 0f01 	cmp.w	fp, #1
 80020c0:	d159      	bne.n	8002176 <_scanf_i+0x126>
 80020c2:	6862      	ldr	r2, [r4, #4]
 80020c4:	b92a      	cbnz	r2, 80020d2 <_scanf_i+0x82>
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	2108      	movs	r1, #8
 80020ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ce:	6061      	str	r1, [r4, #4]
 80020d0:	6022      	str	r2, [r4, #0]
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	68a2      	ldr	r2, [r4, #8]
 80020dc:	1e51      	subs	r1, r2, #1
 80020de:	60a1      	str	r1, [r4, #8]
 80020e0:	b192      	cbz	r2, 8002108 <_scanf_i+0xb8>
 80020e2:	6832      	ldr	r2, [r6, #0]
 80020e4:	1c51      	adds	r1, r2, #1
 80020e6:	6031      	str	r1, [r6, #0]
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	f805 2b01 	strb.w	r2, [r5], #1
 80020ee:	6872      	ldr	r2, [r6, #4]
 80020f0:	3a01      	subs	r2, #1
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	6072      	str	r2, [r6, #4]
 80020f6:	dc07      	bgt.n	8002108 <_scanf_i+0xb8>
 80020f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80020fc:	4631      	mov	r1, r6
 80020fe:	4650      	mov	r0, sl
 8002100:	4790      	blx	r2
 8002102:	2800      	cmp	r0, #0
 8002104:	f040 8085 	bne.w	8002212 <_scanf_i+0x1c2>
 8002108:	f10b 0b01 	add.w	fp, fp, #1
 800210c:	f1bb 0f03 	cmp.w	fp, #3
 8002110:	d1cb      	bne.n	80020aa <_scanf_i+0x5a>
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	b90b      	cbnz	r3, 800211a <_scanf_i+0xca>
 8002116:	230a      	movs	r3, #10
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	4945      	ldr	r1, [pc, #276]	@ (8002234 <_scanf_i+0x1e4>)
 800211e:	6960      	ldr	r0, [r4, #20]
 8002120:	1ac9      	subs	r1, r1, r3
 8002122:	f000 f889 	bl	8002238 <__sccl>
 8002126:	f04f 0b00 	mov.w	fp, #0
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d03d      	beq.n	80021ae <_scanf_i+0x15e>
 8002132:	6831      	ldr	r1, [r6, #0]
 8002134:	6960      	ldr	r0, [r4, #20]
 8002136:	f891 c000 	ldrb.w	ip, [r1]
 800213a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800213e:	2800      	cmp	r0, #0
 8002140:	d035      	beq.n	80021ae <_scanf_i+0x15e>
 8002142:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8002146:	d124      	bne.n	8002192 <_scanf_i+0x142>
 8002148:	0510      	lsls	r0, r2, #20
 800214a:	d522      	bpl.n	8002192 <_scanf_i+0x142>
 800214c:	f10b 0b01 	add.w	fp, fp, #1
 8002150:	f1b9 0f00 	cmp.w	r9, #0
 8002154:	d003      	beq.n	800215e <_scanf_i+0x10e>
 8002156:	3301      	adds	r3, #1
 8002158:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800215c:	60a3      	str	r3, [r4, #8]
 800215e:	6873      	ldr	r3, [r6, #4]
 8002160:	3b01      	subs	r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	6073      	str	r3, [r6, #4]
 8002166:	dd1b      	ble.n	80021a0 <_scanf_i+0x150>
 8002168:	6833      	ldr	r3, [r6, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	6033      	str	r3, [r6, #0]
 800216e:	68a3      	ldr	r3, [r4, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60a3      	str	r3, [r4, #8]
 8002174:	e7d9      	b.n	800212a <_scanf_i+0xda>
 8002176:	f1bb 0f02 	cmp.w	fp, #2
 800217a:	d1ae      	bne.n	80020da <_scanf_i+0x8a>
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8002182:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002186:	d1bf      	bne.n	8002108 <_scanf_i+0xb8>
 8002188:	2110      	movs	r1, #16
 800218a:	6061      	str	r1, [r4, #4]
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	e7a2      	b.n	80020d8 <_scanf_i+0x88>
 8002192:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8002196:	6022      	str	r2, [r4, #0]
 8002198:	780b      	ldrb	r3, [r1, #0]
 800219a:	f805 3b01 	strb.w	r3, [r5], #1
 800219e:	e7de      	b.n	800215e <_scanf_i+0x10e>
 80021a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80021a4:	4631      	mov	r1, r6
 80021a6:	4650      	mov	r0, sl
 80021a8:	4798      	blx	r3
 80021aa:	2800      	cmp	r0, #0
 80021ac:	d0df      	beq.n	800216e <_scanf_i+0x11e>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	05d9      	lsls	r1, r3, #23
 80021b2:	d50d      	bpl.n	80021d0 <_scanf_i+0x180>
 80021b4:	42bd      	cmp	r5, r7
 80021b6:	d909      	bls.n	80021cc <_scanf_i+0x17c>
 80021b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80021bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80021c0:	4632      	mov	r2, r6
 80021c2:	4650      	mov	r0, sl
 80021c4:	4798      	blx	r3
 80021c6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80021ca:	464d      	mov	r5, r9
 80021cc:	42bd      	cmp	r5, r7
 80021ce:	d028      	beq.n	8002222 <_scanf_i+0x1d2>
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	f012 0210 	ands.w	r2, r2, #16
 80021d6:	d113      	bne.n	8002200 <_scanf_i+0x1b0>
 80021d8:	702a      	strb	r2, [r5, #0]
 80021da:	6863      	ldr	r3, [r4, #4]
 80021dc:	9e01      	ldr	r6, [sp, #4]
 80021de:	4639      	mov	r1, r7
 80021e0:	4650      	mov	r0, sl
 80021e2:	47b0      	blx	r6
 80021e4:	f8d8 3000 	ldr.w	r3, [r8]
 80021e8:	6821      	ldr	r1, [r4, #0]
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	f8c8 2000 	str.w	r2, [r8]
 80021f0:	f011 0f20 	tst.w	r1, #32
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	d00f      	beq.n	8002218 <_scanf_i+0x1c8>
 80021f8:	6018      	str	r0, [r3, #0]
 80021fa:	68e3      	ldr	r3, [r4, #12]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60e3      	str	r3, [r4, #12]
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	1bed      	subs	r5, r5, r7
 8002204:	445d      	add	r5, fp
 8002206:	442b      	add	r3, r5
 8002208:	6123      	str	r3, [r4, #16]
 800220a:	2000      	movs	r0, #0
 800220c:	b007      	add	sp, #28
 800220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002212:	f04f 0b00 	mov.w	fp, #0
 8002216:	e7ca      	b.n	80021ae <_scanf_i+0x15e>
 8002218:	07ca      	lsls	r2, r1, #31
 800221a:	bf4c      	ite	mi
 800221c:	8018      	strhmi	r0, [r3, #0]
 800221e:	6018      	strpl	r0, [r3, #0]
 8002220:	e7eb      	b.n	80021fa <_scanf_i+0x1aa>
 8002222:	2001      	movs	r0, #1
 8002224:	e7f2      	b.n	800220c <_scanf_i+0x1bc>
 8002226:	bf00      	nop
 8002228:	08002988 	.word	0x08002988
 800222c:	0800106d 	.word	0x0800106d
 8002230:	080025c9 	.word	0x080025c9
 8002234:	08002ad8 	.word	0x08002ad8

08002238 <__sccl>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	780b      	ldrb	r3, [r1, #0]
 800223c:	4604      	mov	r4, r0
 800223e:	2b5e      	cmp	r3, #94	@ 0x5e
 8002240:	bf0b      	itete	eq
 8002242:	784b      	ldrbeq	r3, [r1, #1]
 8002244:	1c4a      	addne	r2, r1, #1
 8002246:	1c8a      	addeq	r2, r1, #2
 8002248:	2100      	movne	r1, #0
 800224a:	bf08      	it	eq
 800224c:	2101      	moveq	r1, #1
 800224e:	3801      	subs	r0, #1
 8002250:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8002254:	f800 1f01 	strb.w	r1, [r0, #1]!
 8002258:	42a8      	cmp	r0, r5
 800225a:	d1fb      	bne.n	8002254 <__sccl+0x1c>
 800225c:	b90b      	cbnz	r3, 8002262 <__sccl+0x2a>
 800225e:	1e50      	subs	r0, r2, #1
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	f081 0101 	eor.w	r1, r1, #1
 8002266:	54e1      	strb	r1, [r4, r3]
 8002268:	4610      	mov	r0, r2
 800226a:	4602      	mov	r2, r0
 800226c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002270:	2d2d      	cmp	r5, #45	@ 0x2d
 8002272:	d005      	beq.n	8002280 <__sccl+0x48>
 8002274:	2d5d      	cmp	r5, #93	@ 0x5d
 8002276:	d016      	beq.n	80022a6 <__sccl+0x6e>
 8002278:	2d00      	cmp	r5, #0
 800227a:	d0f1      	beq.n	8002260 <__sccl+0x28>
 800227c:	462b      	mov	r3, r5
 800227e:	e7f2      	b.n	8002266 <__sccl+0x2e>
 8002280:	7846      	ldrb	r6, [r0, #1]
 8002282:	2e5d      	cmp	r6, #93	@ 0x5d
 8002284:	d0fa      	beq.n	800227c <__sccl+0x44>
 8002286:	42b3      	cmp	r3, r6
 8002288:	dcf8      	bgt.n	800227c <__sccl+0x44>
 800228a:	3002      	adds	r0, #2
 800228c:	461a      	mov	r2, r3
 800228e:	3201      	adds	r2, #1
 8002290:	4296      	cmp	r6, r2
 8002292:	54a1      	strb	r1, [r4, r2]
 8002294:	dcfb      	bgt.n	800228e <__sccl+0x56>
 8002296:	1af2      	subs	r2, r6, r3
 8002298:	3a01      	subs	r2, #1
 800229a:	1c5d      	adds	r5, r3, #1
 800229c:	42b3      	cmp	r3, r6
 800229e:	bfa8      	it	ge
 80022a0:	2200      	movge	r2, #0
 80022a2:	18ab      	adds	r3, r5, r2
 80022a4:	e7e1      	b.n	800226a <__sccl+0x32>
 80022a6:	4610      	mov	r0, r2
 80022a8:	e7da      	b.n	8002260 <__sccl+0x28>
	...

080022ac <__sflush_r>:
 80022ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b4:	0716      	lsls	r6, r2, #28
 80022b6:	4605      	mov	r5, r0
 80022b8:	460c      	mov	r4, r1
 80022ba:	d454      	bmi.n	8002366 <__sflush_r+0xba>
 80022bc:	684b      	ldr	r3, [r1, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dc02      	bgt.n	80022c8 <__sflush_r+0x1c>
 80022c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	dd48      	ble.n	800235a <__sflush_r+0xae>
 80022c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022ca:	2e00      	cmp	r6, #0
 80022cc:	d045      	beq.n	800235a <__sflush_r+0xae>
 80022ce:	2300      	movs	r3, #0
 80022d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80022d4:	682f      	ldr	r7, [r5, #0]
 80022d6:	6a21      	ldr	r1, [r4, #32]
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	d030      	beq.n	800233e <__sflush_r+0x92>
 80022dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	0759      	lsls	r1, r3, #29
 80022e2:	d505      	bpl.n	80022f0 <__sflush_r+0x44>
 80022e4:	6863      	ldr	r3, [r4, #4]
 80022e6:	1ad2      	subs	r2, r2, r3
 80022e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80022ea:	b10b      	cbz	r3, 80022f0 <__sflush_r+0x44>
 80022ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022ee:	1ad2      	subs	r2, r2, r3
 80022f0:	2300      	movs	r3, #0
 80022f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022f4:	6a21      	ldr	r1, [r4, #32]
 80022f6:	4628      	mov	r0, r5
 80022f8:	47b0      	blx	r6
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	d106      	bne.n	800230e <__sflush_r+0x62>
 8002300:	6829      	ldr	r1, [r5, #0]
 8002302:	291d      	cmp	r1, #29
 8002304:	d82b      	bhi.n	800235e <__sflush_r+0xb2>
 8002306:	4a2a      	ldr	r2, [pc, #168]	@ (80023b0 <__sflush_r+0x104>)
 8002308:	410a      	asrs	r2, r1
 800230a:	07d6      	lsls	r6, r2, #31
 800230c:	d427      	bmi.n	800235e <__sflush_r+0xb2>
 800230e:	2200      	movs	r2, #0
 8002310:	6062      	str	r2, [r4, #4]
 8002312:	04d9      	lsls	r1, r3, #19
 8002314:	6922      	ldr	r2, [r4, #16]
 8002316:	6022      	str	r2, [r4, #0]
 8002318:	d504      	bpl.n	8002324 <__sflush_r+0x78>
 800231a:	1c42      	adds	r2, r0, #1
 800231c:	d101      	bne.n	8002322 <__sflush_r+0x76>
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	b903      	cbnz	r3, 8002324 <__sflush_r+0x78>
 8002322:	6560      	str	r0, [r4, #84]	@ 0x54
 8002324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002326:	602f      	str	r7, [r5, #0]
 8002328:	b1b9      	cbz	r1, 800235a <__sflush_r+0xae>
 800232a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800232e:	4299      	cmp	r1, r3
 8002330:	d002      	beq.n	8002338 <__sflush_r+0x8c>
 8002332:	4628      	mov	r0, r5
 8002334:	f7fe ff52 	bl	80011dc <_free_r>
 8002338:	2300      	movs	r3, #0
 800233a:	6363      	str	r3, [r4, #52]	@ 0x34
 800233c:	e00d      	b.n	800235a <__sflush_r+0xae>
 800233e:	2301      	movs	r3, #1
 8002340:	4628      	mov	r0, r5
 8002342:	47b0      	blx	r6
 8002344:	4602      	mov	r2, r0
 8002346:	1c50      	adds	r0, r2, #1
 8002348:	d1c9      	bne.n	80022de <__sflush_r+0x32>
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0c6      	beq.n	80022de <__sflush_r+0x32>
 8002350:	2b1d      	cmp	r3, #29
 8002352:	d001      	beq.n	8002358 <__sflush_r+0xac>
 8002354:	2b16      	cmp	r3, #22
 8002356:	d11e      	bne.n	8002396 <__sflush_r+0xea>
 8002358:	602f      	str	r7, [r5, #0]
 800235a:	2000      	movs	r0, #0
 800235c:	e022      	b.n	80023a4 <__sflush_r+0xf8>
 800235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002362:	b21b      	sxth	r3, r3
 8002364:	e01b      	b.n	800239e <__sflush_r+0xf2>
 8002366:	690f      	ldr	r7, [r1, #16]
 8002368:	2f00      	cmp	r7, #0
 800236a:	d0f6      	beq.n	800235a <__sflush_r+0xae>
 800236c:	0793      	lsls	r3, r2, #30
 800236e:	680e      	ldr	r6, [r1, #0]
 8002370:	bf08      	it	eq
 8002372:	694b      	ldreq	r3, [r1, #20]
 8002374:	600f      	str	r7, [r1, #0]
 8002376:	bf18      	it	ne
 8002378:	2300      	movne	r3, #0
 800237a:	eba6 0807 	sub.w	r8, r6, r7
 800237e:	608b      	str	r3, [r1, #8]
 8002380:	f1b8 0f00 	cmp.w	r8, #0
 8002384:	dde9      	ble.n	800235a <__sflush_r+0xae>
 8002386:	6a21      	ldr	r1, [r4, #32]
 8002388:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800238a:	4643      	mov	r3, r8
 800238c:	463a      	mov	r2, r7
 800238e:	4628      	mov	r0, r5
 8002390:	47b0      	blx	r6
 8002392:	2800      	cmp	r0, #0
 8002394:	dc08      	bgt.n	80023a8 <__sflush_r+0xfc>
 8002396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800239a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800239e:	81a3      	strh	r3, [r4, #12]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023a8:	4407      	add	r7, r0
 80023aa:	eba8 0800 	sub.w	r8, r8, r0
 80023ae:	e7e7      	b.n	8002380 <__sflush_r+0xd4>
 80023b0:	dfbffffe 	.word	0xdfbffffe

080023b4 <_fflush_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	690b      	ldr	r3, [r1, #16]
 80023b8:	4605      	mov	r5, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	b913      	cbnz	r3, 80023c4 <_fflush_r+0x10>
 80023be:	2500      	movs	r5, #0
 80023c0:	4628      	mov	r0, r5
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
 80023c4:	b118      	cbz	r0, 80023ce <_fflush_r+0x1a>
 80023c6:	6a03      	ldr	r3, [r0, #32]
 80023c8:	b90b      	cbnz	r3, 80023ce <_fflush_r+0x1a>
 80023ca:	f7fe fdbd 	bl	8000f48 <__sinit>
 80023ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f3      	beq.n	80023be <_fflush_r+0xa>
 80023d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023d8:	07d0      	lsls	r0, r2, #31
 80023da:	d404      	bmi.n	80023e6 <_fflush_r+0x32>
 80023dc:	0599      	lsls	r1, r3, #22
 80023de:	d402      	bmi.n	80023e6 <_fflush_r+0x32>
 80023e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023e2:	f7fe fef8 	bl	80011d6 <__retarget_lock_acquire_recursive>
 80023e6:	4628      	mov	r0, r5
 80023e8:	4621      	mov	r1, r4
 80023ea:	f7ff ff5f 	bl	80022ac <__sflush_r>
 80023ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023f0:	07da      	lsls	r2, r3, #31
 80023f2:	4605      	mov	r5, r0
 80023f4:	d4e4      	bmi.n	80023c0 <_fflush_r+0xc>
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	059b      	lsls	r3, r3, #22
 80023fa:	d4e1      	bmi.n	80023c0 <_fflush_r+0xc>
 80023fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023fe:	f7fe feeb 	bl	80011d8 <__retarget_lock_release_recursive>
 8002402:	e7dd      	b.n	80023c0 <_fflush_r+0xc>

08002404 <__malloc_lock>:
 8002404:	4801      	ldr	r0, [pc, #4]	@ (800240c <__malloc_lock+0x8>)
 8002406:	f7fe bee6 	b.w	80011d6 <__retarget_lock_acquire_recursive>
 800240a:	bf00      	nop
 800240c:	20000358 	.word	0x20000358

08002410 <__malloc_unlock>:
 8002410:	4801      	ldr	r0, [pc, #4]	@ (8002418 <__malloc_unlock+0x8>)
 8002412:	f7fe bee1 	b.w	80011d8 <__retarget_lock_release_recursive>
 8002416:	bf00      	nop
 8002418:	20000358 	.word	0x20000358

0800241c <__submore>:
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002420:	460c      	mov	r4, r1
 8002422:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002428:	4299      	cmp	r1, r3
 800242a:	d11d      	bne.n	8002468 <__submore+0x4c>
 800242c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002430:	f7ff fba6 	bl	8001b80 <_malloc_r>
 8002434:	b918      	cbnz	r0, 800243e <__submore+0x22>
 8002436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800243a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800243e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002442:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002444:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8002448:	6360      	str	r0, [r4, #52]	@ 0x34
 800244a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800244e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002452:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8002456:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800245a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800245e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8002462:	6020      	str	r0, [r4, #0]
 8002464:	2000      	movs	r0, #0
 8002466:	e7e8      	b.n	800243a <__submore+0x1e>
 8002468:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800246a:	0077      	lsls	r7, r6, #1
 800246c:	463a      	mov	r2, r7
 800246e:	f000 f80f 	bl	8002490 <_realloc_r>
 8002472:	4605      	mov	r5, r0
 8002474:	2800      	cmp	r0, #0
 8002476:	d0de      	beq.n	8002436 <__submore+0x1a>
 8002478:	eb00 0806 	add.w	r8, r0, r6
 800247c:	4601      	mov	r1, r0
 800247e:	4632      	mov	r2, r6
 8002480:	4640      	mov	r0, r8
 8002482:	f000 f9e5 	bl	8002850 <memcpy>
 8002486:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800248a:	f8c4 8000 	str.w	r8, [r4]
 800248e:	e7e9      	b.n	8002464 <__submore+0x48>

08002490 <_realloc_r>:
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002494:	4680      	mov	r8, r0
 8002496:	4615      	mov	r5, r2
 8002498:	460c      	mov	r4, r1
 800249a:	b921      	cbnz	r1, 80024a6 <_realloc_r+0x16>
 800249c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024a0:	4611      	mov	r1, r2
 80024a2:	f7ff bb6d 	b.w	8001b80 <_malloc_r>
 80024a6:	b92a      	cbnz	r2, 80024b4 <_realloc_r+0x24>
 80024a8:	f7fe fe98 	bl	80011dc <_free_r>
 80024ac:	2400      	movs	r4, #0
 80024ae:	4620      	mov	r0, r4
 80024b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024b4:	f000 f9da 	bl	800286c <_malloc_usable_size_r>
 80024b8:	4285      	cmp	r5, r0
 80024ba:	4606      	mov	r6, r0
 80024bc:	d802      	bhi.n	80024c4 <_realloc_r+0x34>
 80024be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80024c2:	d8f4      	bhi.n	80024ae <_realloc_r+0x1e>
 80024c4:	4629      	mov	r1, r5
 80024c6:	4640      	mov	r0, r8
 80024c8:	f7ff fb5a 	bl	8001b80 <_malloc_r>
 80024cc:	4607      	mov	r7, r0
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d0ec      	beq.n	80024ac <_realloc_r+0x1c>
 80024d2:	42b5      	cmp	r5, r6
 80024d4:	462a      	mov	r2, r5
 80024d6:	4621      	mov	r1, r4
 80024d8:	bf28      	it	cs
 80024da:	4632      	movcs	r2, r6
 80024dc:	f000 f9b8 	bl	8002850 <memcpy>
 80024e0:	4621      	mov	r1, r4
 80024e2:	4640      	mov	r0, r8
 80024e4:	f7fe fe7a 	bl	80011dc <_free_r>
 80024e8:	463c      	mov	r4, r7
 80024ea:	e7e0      	b.n	80024ae <_realloc_r+0x1e>

080024ec <_strtoul_l.constprop.0>:
 80024ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024f0:	4e34      	ldr	r6, [pc, #208]	@ (80025c4 <_strtoul_l.constprop.0+0xd8>)
 80024f2:	4686      	mov	lr, r0
 80024f4:	460d      	mov	r5, r1
 80024f6:	4628      	mov	r0, r5
 80024f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80024fc:	5d37      	ldrb	r7, [r6, r4]
 80024fe:	f017 0708 	ands.w	r7, r7, #8
 8002502:	d1f8      	bne.n	80024f6 <_strtoul_l.constprop.0+0xa>
 8002504:	2c2d      	cmp	r4, #45	@ 0x2d
 8002506:	d12f      	bne.n	8002568 <_strtoul_l.constprop.0+0x7c>
 8002508:	782c      	ldrb	r4, [r5, #0]
 800250a:	2701      	movs	r7, #1
 800250c:	1c85      	adds	r5, r0, #2
 800250e:	f033 0010 	bics.w	r0, r3, #16
 8002512:	d109      	bne.n	8002528 <_strtoul_l.constprop.0+0x3c>
 8002514:	2c30      	cmp	r4, #48	@ 0x30
 8002516:	d12c      	bne.n	8002572 <_strtoul_l.constprop.0+0x86>
 8002518:	7828      	ldrb	r0, [r5, #0]
 800251a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800251e:	2858      	cmp	r0, #88	@ 0x58
 8002520:	d127      	bne.n	8002572 <_strtoul_l.constprop.0+0x86>
 8002522:	786c      	ldrb	r4, [r5, #1]
 8002524:	2310      	movs	r3, #16
 8002526:	3502      	adds	r5, #2
 8002528:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800252c:	2600      	movs	r6, #0
 800252e:	fbb8 f8f3 	udiv	r8, r8, r3
 8002532:	fb03 f908 	mul.w	r9, r3, r8
 8002536:	ea6f 0909 	mvn.w	r9, r9
 800253a:	4630      	mov	r0, r6
 800253c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8002540:	f1bc 0f09 	cmp.w	ip, #9
 8002544:	d81c      	bhi.n	8002580 <_strtoul_l.constprop.0+0x94>
 8002546:	4664      	mov	r4, ip
 8002548:	42a3      	cmp	r3, r4
 800254a:	dd2a      	ble.n	80025a2 <_strtoul_l.constprop.0+0xb6>
 800254c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8002550:	d007      	beq.n	8002562 <_strtoul_l.constprop.0+0x76>
 8002552:	4580      	cmp	r8, r0
 8002554:	d322      	bcc.n	800259c <_strtoul_l.constprop.0+0xb0>
 8002556:	d101      	bne.n	800255c <_strtoul_l.constprop.0+0x70>
 8002558:	45a1      	cmp	r9, r4
 800255a:	db1f      	blt.n	800259c <_strtoul_l.constprop.0+0xb0>
 800255c:	fb00 4003 	mla	r0, r0, r3, r4
 8002560:	2601      	movs	r6, #1
 8002562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002566:	e7e9      	b.n	800253c <_strtoul_l.constprop.0+0x50>
 8002568:	2c2b      	cmp	r4, #43	@ 0x2b
 800256a:	bf04      	itt	eq
 800256c:	782c      	ldrbeq	r4, [r5, #0]
 800256e:	1c85      	addeq	r5, r0, #2
 8002570:	e7cd      	b.n	800250e <_strtoul_l.constprop.0+0x22>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1d8      	bne.n	8002528 <_strtoul_l.constprop.0+0x3c>
 8002576:	2c30      	cmp	r4, #48	@ 0x30
 8002578:	bf0c      	ite	eq
 800257a:	2308      	moveq	r3, #8
 800257c:	230a      	movne	r3, #10
 800257e:	e7d3      	b.n	8002528 <_strtoul_l.constprop.0+0x3c>
 8002580:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8002584:	f1bc 0f19 	cmp.w	ip, #25
 8002588:	d801      	bhi.n	800258e <_strtoul_l.constprop.0+0xa2>
 800258a:	3c37      	subs	r4, #55	@ 0x37
 800258c:	e7dc      	b.n	8002548 <_strtoul_l.constprop.0+0x5c>
 800258e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8002592:	f1bc 0f19 	cmp.w	ip, #25
 8002596:	d804      	bhi.n	80025a2 <_strtoul_l.constprop.0+0xb6>
 8002598:	3c57      	subs	r4, #87	@ 0x57
 800259a:	e7d5      	b.n	8002548 <_strtoul_l.constprop.0+0x5c>
 800259c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80025a0:	e7df      	b.n	8002562 <_strtoul_l.constprop.0+0x76>
 80025a2:	1c73      	adds	r3, r6, #1
 80025a4:	d106      	bne.n	80025b4 <_strtoul_l.constprop.0+0xc8>
 80025a6:	2322      	movs	r3, #34	@ 0x22
 80025a8:	f8ce 3000 	str.w	r3, [lr]
 80025ac:	4630      	mov	r0, r6
 80025ae:	b932      	cbnz	r2, 80025be <_strtoul_l.constprop.0+0xd2>
 80025b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025b4:	b107      	cbz	r7, 80025b8 <_strtoul_l.constprop.0+0xcc>
 80025b6:	4240      	negs	r0, r0
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d0f9      	beq.n	80025b0 <_strtoul_l.constprop.0+0xc4>
 80025bc:	b106      	cbz	r6, 80025c0 <_strtoul_l.constprop.0+0xd4>
 80025be:	1e69      	subs	r1, r5, #1
 80025c0:	6011      	str	r1, [r2, #0]
 80025c2:	e7f5      	b.n	80025b0 <_strtoul_l.constprop.0+0xc4>
 80025c4:	08002995 	.word	0x08002995

080025c8 <_strtoul_r>:
 80025c8:	f7ff bf90 	b.w	80024ec <_strtoul_l.constprop.0>

080025cc <__swbuf_r>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	460e      	mov	r6, r1
 80025d0:	4614      	mov	r4, r2
 80025d2:	4605      	mov	r5, r0
 80025d4:	b118      	cbz	r0, 80025de <__swbuf_r+0x12>
 80025d6:	6a03      	ldr	r3, [r0, #32]
 80025d8:	b90b      	cbnz	r3, 80025de <__swbuf_r+0x12>
 80025da:	f7fe fcb5 	bl	8000f48 <__sinit>
 80025de:	69a3      	ldr	r3, [r4, #24]
 80025e0:	60a3      	str	r3, [r4, #8]
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	071a      	lsls	r2, r3, #28
 80025e6:	d501      	bpl.n	80025ec <__swbuf_r+0x20>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	b943      	cbnz	r3, 80025fe <__swbuf_r+0x32>
 80025ec:	4621      	mov	r1, r4
 80025ee:	4628      	mov	r0, r5
 80025f0:	f000 f82a 	bl	8002648 <__swsetup_r>
 80025f4:	b118      	cbz	r0, 80025fe <__swbuf_r+0x32>
 80025f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80025fa:	4638      	mov	r0, r7
 80025fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	1a98      	subs	r0, r3, r2
 8002604:	6963      	ldr	r3, [r4, #20]
 8002606:	b2f6      	uxtb	r6, r6
 8002608:	4283      	cmp	r3, r0
 800260a:	4637      	mov	r7, r6
 800260c:	dc05      	bgt.n	800261a <__swbuf_r+0x4e>
 800260e:	4621      	mov	r1, r4
 8002610:	4628      	mov	r0, r5
 8002612:	f7ff fecf 	bl	80023b4 <_fflush_r>
 8002616:	2800      	cmp	r0, #0
 8002618:	d1ed      	bne.n	80025f6 <__swbuf_r+0x2a>
 800261a:	68a3      	ldr	r3, [r4, #8]
 800261c:	3b01      	subs	r3, #1
 800261e:	60a3      	str	r3, [r4, #8]
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	6022      	str	r2, [r4, #0]
 8002626:	701e      	strb	r6, [r3, #0]
 8002628:	6962      	ldr	r2, [r4, #20]
 800262a:	1c43      	adds	r3, r0, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d004      	beq.n	800263a <__swbuf_r+0x6e>
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	07db      	lsls	r3, r3, #31
 8002634:	d5e1      	bpl.n	80025fa <__swbuf_r+0x2e>
 8002636:	2e0a      	cmp	r6, #10
 8002638:	d1df      	bne.n	80025fa <__swbuf_r+0x2e>
 800263a:	4621      	mov	r1, r4
 800263c:	4628      	mov	r0, r5
 800263e:	f7ff feb9 	bl	80023b4 <_fflush_r>
 8002642:	2800      	cmp	r0, #0
 8002644:	d0d9      	beq.n	80025fa <__swbuf_r+0x2e>
 8002646:	e7d6      	b.n	80025f6 <__swbuf_r+0x2a>

08002648 <__swsetup_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <__swsetup_r+0xa8>)
 800264c:	4605      	mov	r5, r0
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	460c      	mov	r4, r1
 8002652:	b118      	cbz	r0, 800265c <__swsetup_r+0x14>
 8002654:	6a03      	ldr	r3, [r0, #32]
 8002656:	b90b      	cbnz	r3, 800265c <__swsetup_r+0x14>
 8002658:	f7fe fc76 	bl	8000f48 <__sinit>
 800265c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002660:	0719      	lsls	r1, r3, #28
 8002662:	d422      	bmi.n	80026aa <__swsetup_r+0x62>
 8002664:	06da      	lsls	r2, r3, #27
 8002666:	d407      	bmi.n	8002678 <__swsetup_r+0x30>
 8002668:	2209      	movs	r2, #9
 800266a:	602a      	str	r2, [r5, #0]
 800266c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002670:	81a3      	strh	r3, [r4, #12]
 8002672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002676:	e033      	b.n	80026e0 <__swsetup_r+0x98>
 8002678:	0758      	lsls	r0, r3, #29
 800267a:	d512      	bpl.n	80026a2 <__swsetup_r+0x5a>
 800267c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800267e:	b141      	cbz	r1, 8002692 <__swsetup_r+0x4a>
 8002680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002684:	4299      	cmp	r1, r3
 8002686:	d002      	beq.n	800268e <__swsetup_r+0x46>
 8002688:	4628      	mov	r0, r5
 800268a:	f7fe fda7 	bl	80011dc <_free_r>
 800268e:	2300      	movs	r3, #0
 8002690:	6363      	str	r3, [r4, #52]	@ 0x34
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	6063      	str	r3, [r4, #4]
 800269e:	6923      	ldr	r3, [r4, #16]
 80026a0:	6023      	str	r3, [r4, #0]
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	81a3      	strh	r3, [r4, #12]
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	b94b      	cbnz	r3, 80026c2 <__swsetup_r+0x7a>
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b8:	d003      	beq.n	80026c2 <__swsetup_r+0x7a>
 80026ba:	4621      	mov	r1, r4
 80026bc:	4628      	mov	r0, r5
 80026be:	f000 f83f 	bl	8002740 <__smakebuf_r>
 80026c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026c6:	f013 0201 	ands.w	r2, r3, #1
 80026ca:	d00a      	beq.n	80026e2 <__swsetup_r+0x9a>
 80026cc:	2200      	movs	r2, #0
 80026ce:	60a2      	str	r2, [r4, #8]
 80026d0:	6962      	ldr	r2, [r4, #20]
 80026d2:	4252      	negs	r2, r2
 80026d4:	61a2      	str	r2, [r4, #24]
 80026d6:	6922      	ldr	r2, [r4, #16]
 80026d8:	b942      	cbnz	r2, 80026ec <__swsetup_r+0xa4>
 80026da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026de:	d1c5      	bne.n	800266c <__swsetup_r+0x24>
 80026e0:	bd38      	pop	{r3, r4, r5, pc}
 80026e2:	0799      	lsls	r1, r3, #30
 80026e4:	bf58      	it	pl
 80026e6:	6962      	ldrpl	r2, [r4, #20]
 80026e8:	60a2      	str	r2, [r4, #8]
 80026ea:	e7f4      	b.n	80026d6 <__swsetup_r+0x8e>
 80026ec:	2000      	movs	r0, #0
 80026ee:	e7f7      	b.n	80026e0 <__swsetup_r+0x98>
 80026f0:	20000038 	.word	0x20000038

080026f4 <__swhatbuf_r>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	460c      	mov	r4, r1
 80026f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026fc:	2900      	cmp	r1, #0
 80026fe:	b096      	sub	sp, #88	@ 0x58
 8002700:	4615      	mov	r5, r2
 8002702:	461e      	mov	r6, r3
 8002704:	da0d      	bge.n	8002722 <__swhatbuf_r+0x2e>
 8002706:	89a3      	ldrh	r3, [r4, #12]
 8002708:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	bf14      	ite	ne
 8002712:	2340      	movne	r3, #64	@ 0x40
 8002714:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002718:	2000      	movs	r0, #0
 800271a:	6031      	str	r1, [r6, #0]
 800271c:	602b      	str	r3, [r5, #0]
 800271e:	b016      	add	sp, #88	@ 0x58
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	466a      	mov	r2, sp
 8002724:	f000 f862 	bl	80027ec <_fstat_r>
 8002728:	2800      	cmp	r0, #0
 800272a:	dbec      	blt.n	8002706 <__swhatbuf_r+0x12>
 800272c:	9901      	ldr	r1, [sp, #4]
 800272e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002732:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002736:	4259      	negs	r1, r3
 8002738:	4159      	adcs	r1, r3
 800273a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800273e:	e7eb      	b.n	8002718 <__swhatbuf_r+0x24>

08002740 <__smakebuf_r>:
 8002740:	898b      	ldrh	r3, [r1, #12]
 8002742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002744:	079d      	lsls	r5, r3, #30
 8002746:	4606      	mov	r6, r0
 8002748:	460c      	mov	r4, r1
 800274a:	d507      	bpl.n	800275c <__smakebuf_r+0x1c>
 800274c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	6123      	str	r3, [r4, #16]
 8002754:	2301      	movs	r3, #1
 8002756:	6163      	str	r3, [r4, #20]
 8002758:	b003      	add	sp, #12
 800275a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275c:	ab01      	add	r3, sp, #4
 800275e:	466a      	mov	r2, sp
 8002760:	f7ff ffc8 	bl	80026f4 <__swhatbuf_r>
 8002764:	9f00      	ldr	r7, [sp, #0]
 8002766:	4605      	mov	r5, r0
 8002768:	4639      	mov	r1, r7
 800276a:	4630      	mov	r0, r6
 800276c:	f7ff fa08 	bl	8001b80 <_malloc_r>
 8002770:	b948      	cbnz	r0, 8002786 <__smakebuf_r+0x46>
 8002772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002776:	059a      	lsls	r2, r3, #22
 8002778:	d4ee      	bmi.n	8002758 <__smakebuf_r+0x18>
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	81a3      	strh	r3, [r4, #12]
 8002784:	e7e2      	b.n	800274c <__smakebuf_r+0xc>
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	6020      	str	r0, [r4, #0]
 800278a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278e:	81a3      	strh	r3, [r4, #12]
 8002790:	9b01      	ldr	r3, [sp, #4]
 8002792:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002796:	b15b      	cbz	r3, 80027b0 <__smakebuf_r+0x70>
 8002798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800279c:	4630      	mov	r0, r6
 800279e:	f000 f837 	bl	8002810 <_isatty_r>
 80027a2:	b128      	cbz	r0, 80027b0 <__smakebuf_r+0x70>
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	81a3      	strh	r3, [r4, #12]
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	431d      	orrs	r5, r3
 80027b4:	81a5      	strh	r5, [r4, #12]
 80027b6:	e7cf      	b.n	8002758 <__smakebuf_r+0x18>

080027b8 <memmove>:
 80027b8:	4288      	cmp	r0, r1
 80027ba:	b510      	push	{r4, lr}
 80027bc:	eb01 0402 	add.w	r4, r1, r2
 80027c0:	d902      	bls.n	80027c8 <memmove+0x10>
 80027c2:	4284      	cmp	r4, r0
 80027c4:	4623      	mov	r3, r4
 80027c6:	d807      	bhi.n	80027d8 <memmove+0x20>
 80027c8:	1e43      	subs	r3, r0, #1
 80027ca:	42a1      	cmp	r1, r4
 80027cc:	d008      	beq.n	80027e0 <memmove+0x28>
 80027ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027d6:	e7f8      	b.n	80027ca <memmove+0x12>
 80027d8:	4402      	add	r2, r0
 80027da:	4601      	mov	r1, r0
 80027dc:	428a      	cmp	r2, r1
 80027de:	d100      	bne.n	80027e2 <memmove+0x2a>
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80027ea:	e7f7      	b.n	80027dc <memmove+0x24>

080027ec <_fstat_r>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4d07      	ldr	r5, [pc, #28]	@ (800280c <_fstat_r+0x20>)
 80027f0:	2300      	movs	r3, #0
 80027f2:	4604      	mov	r4, r0
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	602b      	str	r3, [r5, #0]
 80027fa:	f7fd ff3c 	bl	8000676 <_fstat>
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	d102      	bne.n	8002808 <_fstat_r+0x1c>
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	b103      	cbz	r3, 8002808 <_fstat_r+0x1c>
 8002806:	6023      	str	r3, [r4, #0]
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	bf00      	nop
 800280c:	20000354 	.word	0x20000354

08002810 <_isatty_r>:
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4d06      	ldr	r5, [pc, #24]	@ (800282c <_isatty_r+0x1c>)
 8002814:	2300      	movs	r3, #0
 8002816:	4604      	mov	r4, r0
 8002818:	4608      	mov	r0, r1
 800281a:	602b      	str	r3, [r5, #0]
 800281c:	f7fd ff3b 	bl	8000696 <_isatty>
 8002820:	1c43      	adds	r3, r0, #1
 8002822:	d102      	bne.n	800282a <_isatty_r+0x1a>
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	b103      	cbz	r3, 800282a <_isatty_r+0x1a>
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	bd38      	pop	{r3, r4, r5, pc}
 800282c:	20000354 	.word	0x20000354

08002830 <_sbrk_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4d06      	ldr	r5, [pc, #24]	@ (800284c <_sbrk_r+0x1c>)
 8002834:	2300      	movs	r3, #0
 8002836:	4604      	mov	r4, r0
 8002838:	4608      	mov	r0, r1
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	f7fd ff44 	bl	80006c8 <_sbrk>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d102      	bne.n	800284a <_sbrk_r+0x1a>
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	b103      	cbz	r3, 800284a <_sbrk_r+0x1a>
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	20000354 	.word	0x20000354

08002850 <memcpy>:
 8002850:	440a      	add	r2, r1
 8002852:	4291      	cmp	r1, r2
 8002854:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002858:	d100      	bne.n	800285c <memcpy+0xc>
 800285a:	4770      	bx	lr
 800285c:	b510      	push	{r4, lr}
 800285e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002866:	4291      	cmp	r1, r2
 8002868:	d1f9      	bne.n	800285e <memcpy+0xe>
 800286a:	bd10      	pop	{r4, pc}

0800286c <_malloc_usable_size_r>:
 800286c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002870:	1f18      	subs	r0, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfbc      	itt	lt
 8002876:	580b      	ldrlt	r3, [r1, r0]
 8002878:	18c0      	addlt	r0, r0, r3
 800287a:	4770      	bx	lr

0800287c <_init>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	bf00      	nop
 8002880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002882:	bc08      	pop	{r3}
 8002884:	469e      	mov	lr, r3
 8002886:	4770      	bx	lr

08002888 <_fini>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr
