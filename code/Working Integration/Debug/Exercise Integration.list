
Exercise Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002724  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  00004088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b14  08002b14  00003b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b1c  08002b1c  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00003b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08002b24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004088  2**0
                  CONTENTS
 10 .bss          000002e0  20000088  20000088  00004088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000368  20000368  00004088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d53  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bd4  00000000  00000000  00006e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  000079e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ed  00000000  00000000  00007c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e4b  00000000  00000000  00007e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029c0  00000000  00000000  0001ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000788cb  00000000  00000000  00021670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00099f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000156c  00000000  00000000  00099f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0009b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080028ac 	.word	0x080028ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080028ac 	.word	0x080028ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <enable_clocks>:
#include <stm32f303xc.h>


//-------------------------MAIN CONTROL -----------------------

void enable_clocks() {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <enable_clocks+0x1c>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <enable_clocks+0x1c>)
 80002ba:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80002be:	6153      	str	r3, [r2, #20]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <display_pattern_callback>:
    // Then call the chase_led function
    //chase_led();
    //display_pattern_callback();
}

void display_pattern_callback(uint8_t *buffer) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// Convert ASCII binary string (e.g., "11011110") to uint8_t pattern
	uint8_t pattern = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 8; i++) {
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	e01b      	b.n	800031a <display_pattern_callback+0x4a>
		if (buffer[i] == '1') {
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b31      	cmp	r3, #49	@ 0x31
 80002ec:	d10c      	bne.n	8000308 <display_pattern_callback+0x38>
			pattern |= (1 << (7 - i));  // MSB first
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f1c3 0307 	rsb	r3, r3, #7
 80002f4:	2201      	movs	r2, #1
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	b25a      	sxtb	r2, r3
 80002fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000300:	4313      	orrs	r3, r2
 8000302:	b25b      	sxtb	r3, r3
 8000304:	73fb      	strb	r3, [r7, #15]
 8000306:	e005      	b.n	8000314 <display_pattern_callback+0x44>
		} else if (buffer[i] != '0') {
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b30      	cmp	r3, #48	@ 0x30
 8000312:	d10a      	bne.n	800032a <display_pattern_callback+0x5a>
	for (int i = 0; i < 8; i++) {
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	3301      	adds	r3, #1
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b07      	cmp	r3, #7
 800031e:	dde0      	ble.n	80002e2 <display_pattern_callback+0x12>
			// Invalid character found â€” stop and do not update LEDs
			return;
		}
	}

	leds_set_state(pattern);
 8000320:	7bfb      	ldrb	r3, [r7, #15]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f868 	bl	80003f8 <leds_set_state>
 8000328:	e000      	b.n	800032c <display_pattern_callback+0x5c>
			return;
 800032a:	bf00      	nop
}
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <pattern_callback_init>:

//-----------------------PATTERN CONTROL------------------------
static pattern_callback_t pattern_display_callback = 0x00;

void pattern_callback_init(pattern_callback_t callback) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    pattern_display_callback = callback;
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <pattern_callback_init+0x1c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	200000a4 	.word	0x200000a4

08000354 <trigger_pattern_display>:

void trigger_pattern_display(uint8_t *pattern_buffer) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    if (pattern_display_callback != 0x00) {
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <trigger_pattern_display+0x20>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <trigger_pattern_display+0x18>
        pattern_display_callback(pattern_buffer);
 8000364:	4b03      	ldr	r3, [pc, #12]	@ (8000374 <trigger_pattern_display+0x20>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	4798      	blx	r3
    }
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200000a4 	.word	0x200000a4

08000378 <DigitalIO_SetPattern>:

void DigitalIO_SetPattern(char *pattern) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    trigger_pattern_display((uint8_t*)pattern);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ffe7 	bl	8000354 <trigger_pattern_display>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <EXTI0_IRQHandler>:

// Static variable only accessible in this file
static button_callback_t on_button_press = 0x00;

void EXTI0_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (on_button_press != 0x00) {
 8000394:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <EXTI0_IRQHandler+0x24>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI0_IRQHandler+0x12>
		on_button_press();
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <EXTI0_IRQHandler+0x24>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4798      	blx	r3
	}

	EXTI->PR |= EXTI_PR_PR0; // clear interrupt flag
 80003a2:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <EXTI0_IRQHandler+0x28>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <EXTI0_IRQHandler+0x28>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6153      	str	r3, [r2, #20]
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000a8 	.word	0x200000a8
 80003b8:	40010400 	.word	0x40010400

080003bc <initialise_board>:


//-------------------------LED CONTROL -----------------------

// LED GPIO Initialization (GPIOE, assuming LEDs are connected here)
void initialise_board(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    // Enable clock for GPIOE
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <initialise_board+0x34>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <initialise_board+0x34>)
 80003c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ca:	6153      	str	r3, [r2, #20]

    // Set pins PE8-PE15 as output
    GPIOE->MODER &= ~(0xFFFF0000);  // Clear mode bits for PE8-PE15
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <initialise_board+0x38>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <initialise_board+0x38>)
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= 0x55550000;     // Set PE8-PE15 to output mode (01)
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <initialise_board+0x38>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a06      	ldr	r2, [pc, #24]	@ (80003f4 <initialise_board+0x38>)
 80003dc:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80003e0:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48001000 	.word	0x48001000

080003f8 <leds_set_state>:
    state = (GPIOE->ODR >> 8) & 0xFF;  // Read ODR for PE8-PE15 and mask lower 8 bits
    return state;
}

// Set the state of the LEDs (PE8 to PE15 using a bitmask)
void leds_set_state(uint8_t state) {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
    GPIOE->ODR = (GPIOE->ODR & 0x00FF) | (state << 8); // Set only PE8-PE15
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <leds_set_state+0x28>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	4904      	ldr	r1, [pc, #16]	@ (8000420 <leds_set_state+0x28>)
 800040e:	4313      	orrs	r3, r2
 8000410:	614b      	str	r3, [r1, #20]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	48001000 	.word	0x48001000

08000424 <__io_putchar>:
#include "digitalio.h"
#include "stm32f303xc.h"

#define MAX_CMD_LEN 64

int __io_putchar(int ch) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4904      	ldr	r1, [pc, #16]	@ (8000444 <__io_putchar+0x20>)
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fb66 	bl	8000b04 <SerialOutputChar>
    return ch;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000

08000448 <reset_all_modes>:
    MODE_SERIAL
} SystemMode;

SystemMode current_mode = MODE_NONE;

void reset_all_modes() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    // Stop timer
    TIM2->CR1 = 0;
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]

    // Reset LED output
    leds_set_state(0);  // Turn off all LEDs
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ffcf 	bl	80003f8 <leds_set_state>

    // Disable UART TX interrupt (optional)
    USART1->CR1 &= ~USART_CR1_TXEIE;
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <reset_all_modes+0x28>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <reset_all_modes+0x28>)
 8000460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000464:	6013      	str	r3, [r2, #0]

    current_mode = MODE_NONE;
 8000466:	4b03      	ldr	r3, [pc, #12]	@ (8000474 <reset_all_modes+0x2c>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40013800 	.word	0x40013800
 8000474:	200000ac 	.word	0x200000ac

08000478 <OnLineReceived>:

void OnLineReceived(char *input, uint32_t len) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
    static char command[MAX_CMD_LEN], argument[MAX_CMD_LEN];
    if (sscanf(input, "%s %[^\n]", command, argument) != 2) {
 8000482:	4b33      	ldr	r3, [pc, #204]	@ (8000550 <OnLineReceived+0xd8>)
 8000484:	4a33      	ldr	r2, [pc, #204]	@ (8000554 <OnLineReceived+0xdc>)
 8000486:	4934      	ldr	r1, [pc, #208]	@ (8000558 <OnLineReceived+0xe0>)
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 fc75 	bl	8000d78 <siscanf>
 800048e:	4603      	mov	r3, r0
 8000490:	2b02      	cmp	r3, #2
 8000492:	d003      	beq.n	800049c <OnLineReceived+0x24>
        SerialStartTransmission("Invalid input format.\r\n> ");
 8000494:	4831      	ldr	r0, [pc, #196]	@ (800055c <OnLineReceived+0xe4>)
 8000496:	f000 fb5d 	bl	8000b54 <SerialStartTransmission>
        return;
 800049a:	e055      	b.n	8000548 <OnLineReceived+0xd0>
    }
    reset_all_modes();
 800049c:	f7ff ffd4 	bl	8000448 <reset_all_modes>

    if (strcmp(command, "led") == 0) {
 80004a0:	492f      	ldr	r1, [pc, #188]	@ (8000560 <OnLineReceived+0xe8>)
 80004a2:	482c      	ldr	r0, [pc, #176]	@ (8000554 <OnLineReceived+0xdc>)
 80004a4:	f7ff fe9c 	bl	80001e0 <strcmp>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d109      	bne.n	80004c2 <OnLineReceived+0x4a>
        DigitalIO_SetPattern(argument);
 80004ae:	4828      	ldr	r0, [pc, #160]	@ (8000550 <OnLineReceived+0xd8>)
 80004b0:	f7ff ff62 	bl	8000378 <DigitalIO_SetPattern>
        current_mode = MODE_LED;
 80004b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000564 <OnLineReceived+0xec>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("LED pattern set.\r\n> ");
 80004ba:	482b      	ldr	r0, [pc, #172]	@ (8000568 <OnLineReceived+0xf0>)
 80004bc:	f000 fb4a 	bl	8000b54 <SerialStartTransmission>
 80004c0:	e042      	b.n	8000548 <OnLineReceived+0xd0>
    }

    else if (strcmp(command, "serial") == 0) {
 80004c2:	492a      	ldr	r1, [pc, #168]	@ (800056c <OnLineReceived+0xf4>)
 80004c4:	4823      	ldr	r0, [pc, #140]	@ (8000554 <OnLineReceived+0xdc>)
 80004c6:	f7ff fe8b 	bl	80001e0 <strcmp>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d10c      	bne.n	80004ea <OnLineReceived+0x72>
        current_mode = MODE_SERIAL;
 80004d0:	4b24      	ldr	r3, [pc, #144]	@ (8000564 <OnLineReceived+0xec>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	701a      	strb	r2, [r3, #0]

        static char formatted[80];  // Static buffer to hold formatted string
        snprintf(formatted, sizeof(formatted), "String: %s \n>", argument);
 80004d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <OnLineReceived+0xd8>)
 80004d8:	4a25      	ldr	r2, [pc, #148]	@ (8000570 <OnLineReceived+0xf8>)
 80004da:	2150      	movs	r1, #80	@ 0x50
 80004dc:	4825      	ldr	r0, [pc, #148]	@ (8000574 <OnLineReceived+0xfc>)
 80004de:	f000 fc15 	bl	8000d0c <sniprintf>

        SerialStartTransmission(formatted);
 80004e2:	4824      	ldr	r0, [pc, #144]	@ (8000574 <OnLineReceived+0xfc>)
 80004e4:	f000 fb36 	bl	8000b54 <SerialStartTransmission>
 80004e8:	e02e      	b.n	8000548 <OnLineReceived+0xd0>
    }

    else if (strcmp(command, "timer") == 0) {
 80004ea:	4923      	ldr	r1, [pc, #140]	@ (8000578 <OnLineReceived+0x100>)
 80004ec:	4819      	ldr	r0, [pc, #100]	@ (8000554 <OnLineReceived+0xdc>)
 80004ee:	f7ff fe77 	bl	80001e0 <strcmp>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d10e      	bne.n	8000516 <OnLineReceived+0x9e>
        uint32_t ms = atoi(argument);
 80004f8:	4815      	ldr	r0, [pc, #84]	@ (8000550 <OnLineReceived+0xd8>)
 80004fa:	f000 fc02 	bl	8000d02 <atoi>
 80004fe:	4603      	mov	r3, r0
 8000500:	60bb      	str	r3, [r7, #8]
        current_mode = MODE_TIMER;
 8000502:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <OnLineReceived+0xec>)
 8000504:	2202      	movs	r2, #2
 8000506:	701a      	strb	r2, [r3, #0]
        Timer_SetPeriodic(ms);
 8000508:	68b8      	ldr	r0, [r7, #8]
 800050a:	f000 fa45 	bl	8000998 <Timer_SetPeriodic>
        SerialStartTransmission("Periodic timer started.\r\n> ");
 800050e:	481b      	ldr	r0, [pc, #108]	@ (800057c <OnLineReceived+0x104>)
 8000510:	f000 fb20 	bl	8000b54 <SerialStartTransmission>
 8000514:	e018      	b.n	8000548 <OnLineReceived+0xd0>
    }
    else if (strcmp(command, "oneshot") == 0) {
 8000516:	491a      	ldr	r1, [pc, #104]	@ (8000580 <OnLineReceived+0x108>)
 8000518:	480e      	ldr	r0, [pc, #56]	@ (8000554 <OnLineReceived+0xdc>)
 800051a:	f7ff fe61 	bl	80001e0 <strcmp>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10e      	bne.n	8000542 <OnLineReceived+0xca>
        uint32_t ms = atoi(argument);
 8000524:	480a      	ldr	r0, [pc, #40]	@ (8000550 <OnLineReceived+0xd8>)
 8000526:	f000 fbec 	bl	8000d02 <atoi>
 800052a:	4603      	mov	r3, r0
 800052c:	60fb      	str	r3, [r7, #12]
        Timer_TriggerOneShot(ms);
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f000 fa42 	bl	80009b8 <Timer_TriggerOneShot>
        current_mode = MODE_ONESHOT;
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <OnLineReceived+0xec>)
 8000536:	2203      	movs	r2, #3
 8000538:	701a      	strb	r2, [r3, #0]
        SerialStartTransmission("One-shot timer triggered.\r\n> ");
 800053a:	4812      	ldr	r0, [pc, #72]	@ (8000584 <OnLineReceived+0x10c>)
 800053c:	f000 fb0a 	bl	8000b54 <SerialStartTransmission>
 8000540:	e002      	b.n	8000548 <OnLineReceived+0xd0>
    }
    else {
        SerialStartTransmission("Unknown command.\r\n> ");
 8000542:	4811      	ldr	r0, [pc, #68]	@ (8000588 <OnLineReceived+0x110>)
 8000544:	f000 fb06 	bl	8000b54 <SerialStartTransmission>
    }
}
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000f0 	.word	0x200000f0
 8000554:	200000b0 	.word	0x200000b0
 8000558:	080028c4 	.word	0x080028c4
 800055c:	080028d0 	.word	0x080028d0
 8000560:	080028ec 	.word	0x080028ec
 8000564:	200000ac 	.word	0x200000ac
 8000568:	080028f0 	.word	0x080028f0
 800056c:	08002908 	.word	0x08002908
 8000570:	08002910 	.word	0x08002910
 8000574:	20000130 	.word	0x20000130
 8000578:	08002920 	.word	0x08002920
 800057c:	08002928 	.word	0x08002928
 8000580:	08002944 	.word	0x08002944
 8000584:	0800294c 	.word	0x0800294c
 8000588:	0800296c 	.word	0x0800296c

0800058c <main>:

int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    enable_clocks();                       // Enable GPIO/TIM clocks
 8000590:	f7ff fe8e 	bl	80002b0 <enable_clocks>
    initialise_board();                    // Configure LEDs
 8000594:	f7ff ff12 	bl	80003bc <initialise_board>
    timer_enable_clocks();
 8000598:	f000 f90a 	bl	80007b0 <timer_enable_clocks>
    timer_initialise_board();
 800059c:	f000 f91e 	bl	80007dc <timer_initialise_board>

    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80005a0:	2200      	movs	r2, #0
 80005a2:	4909      	ldr	r1, [pc, #36]	@ (80005c8 <main+0x3c>)
 80005a4:	2004      	movs	r0, #4
 80005a6:	f000 fa47 	bl	8000a38 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 80005aa:	4908      	ldr	r1, [pc, #32]	@ (80005cc <main+0x40>)
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <main+0x3c>)
 80005ae:	f000 fac2 	bl	8000b36 <SerialSetReceiveCallback>
    enable_timer2_interrupt();             // Enable TIM2 IRQs
 80005b2:	f000 f9b3 	bl	800091c <enable_timer2_interrupt>
    pattern_callback_init(display_pattern_callback); // Register LED pattern handler
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <main+0x44>)
 80005b8:	f7ff febc 	bl	8000334 <pattern_callback_init>

    printf("USART1 is ready. Type a line and press Enter:\r\n> ");
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <main+0x48>)
 80005be:	f000 fd95 	bl	80010ec <iprintf>

    while (1) {
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x36>
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000
 80005cc:	08000479 	.word	0x08000479
 80005d0:	080002d1 	.word	0x080002d1
 80005d4:	08002984 	.word	0x08002984

080005d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	e00a      	b.n	8000600 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ea:	f3af 8000 	nop.w
 80005ee:	4601      	mov	r1, r0
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	b2ca      	uxtb	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbf0      	blt.n	80005ea <_read+0x12>
	}

return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e009      	b.n	8000638 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	60ba      	str	r2, [r7, #8]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fef9 	bl	8000424 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	429a      	cmp	r2, r3
 800063e:	dbf1      	blt.n	8000624 <_write+0x12>
	}
	return len;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_close>:

int _close(int file)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	return -1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000672:	605a      	str	r2, [r3, #4]
	return 0;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_isatty>:

int _isatty(int file)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
	return 1;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f000 fd52 	bl	800118c <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000a000 	.word	0x2000a000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000180 	.word	0x20000180
 800071c:	20000368 	.word	0x20000368

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4907      	ldr	r1, [pc, #28]	@ (8000758 <__NVIC_EnableIRQ+0x38>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	@ (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <timer_enable_clocks>:

// status of timer operation, 0 = regular interval mode, 1 = one-shot mode
uint8_t timer_mode = 0;

// enable the clocks for desired peripherals (GPIOA, C and E)
void timer_enable_clocks() {
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <timer_enable_clocks+0x28>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <timer_enable_clocks+0x28>)
 80007ba:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80007be:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <timer_enable_clocks+0x28>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <timer_enable_clocks+0x28>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	61d3      	str	r3, [r2, #28]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <timer_initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void timer_initialise_board() {
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <timer_initialise_board+0x20>)
 80007e4:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555; //every second led is on
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80007ec:	801a      	strh	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	48001002 	.word	0x48001002

08000800 <turn_off_led_callback>:

void turn_off_led_callback(void) {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
    GPIOE->ODR &= ~0xFF00;  // Turn off PE8
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <turn_off_led_callback+0x1c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <turn_off_led_callback+0x1c>)
 800080a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800080e:	6153      	str	r3, [r2, #20]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	48001000 	.word	0x48001000

08000820 <trigger_prescaler>:


// general function called to make new prescaler value take effect
// input: desired timer number
void trigger_prescaler(TIM_TypeDef *TIM) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

	TIM->ARR = 0x01;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM->CNT = 0x00;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
	asm("NOP");
 8000834:	bf00      	nop
	asm("NOP");
 8000836:	bf00      	nop
	asm("NOP");
 8000838:	bf00      	nop
	TIM->ARR = 0xffffffff;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <init_timer_module>:
void (*on_timer_interrupt)() = 0x00;


// initialise timer with delay time in ms to trigger a callback function regularly
// input: desired timer number to initialise; delay time in ms; callback function
void init_timer_module(TIM_TypeDef *TIM, uint32_t interval, void (*timer_callback)()) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]

	TIM->CR1 |= TIM_CR1_CEN;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f043 0201 	orr.w	r2, r3, #1
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	601a      	str	r2, [r3, #0]
	TIM->PSC = 7999;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
	trigger_prescaler(TIM);
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f7ff ffd5 	bl	8000820 <trigger_prescaler>
	TIM->CR1 = 0;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM->ARR = interval;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM->CR1 |= TIM_CR1_CEN;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f043 0201 	orr.w	r2, r3, #1
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	601a      	str	r2, [r3, #0]

	on_timer_interrupt = timer_callback;
 8000894:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <init_timer_module+0x54>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000188 	.word	0x20000188

080008a8 <change_pattern>:

// simple function to switch on/off every second led when called
void change_pattern() {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

	GPIOE->ODR ^= 0xFF00;  // Toggle all LEDs from PE8 to PE15
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <change_pattern+0x1c>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <change_pattern+0x1c>)
 80008b2:	f483 437f 	eor.w	r3, r3, #65280	@ 0xff00
 80008b6:	6153      	str	r3, [r2, #20]

}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	48001000 	.word	0x48001000

080008c8 <TIM2_IRQHandler>:

// function called when timer interrupt is raised
void TIM2_IRQHandler(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    // Check if the TIM2 interrupt flag is set
    if (TIM2->SR & TIM_SR_UIF) {
 80008cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d019      	beq.n	800090e <TIM2_IRQHandler+0x46>
        // run the callback function (make sure it is not null first)
        if (on_timer_interrupt != 0x00) {
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <TIM2_IRQHandler+0x4c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00d      	beq.n	80008fe <TIM2_IRQHandler+0x36>

        	on_timer_interrupt();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <TIM2_IRQHandler+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4798      	blx	r3

        	// if timer is in one-shot mode then stop timer and reset timer to default mode
			if (timer_mode == 1) {
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <TIM2_IRQHandler+0x50>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d106      	bne.n	80008fe <TIM2_IRQHandler+0x36>
        		TIM2->CR1 = 0;
 80008f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
        		timer_mode = 0;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <TIM2_IRQHandler+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
			}

        }
        // Clear the interrupt flag (write 1 to the UIF bit to reset it)
        TIM2->SR &= ~TIM_SR_UIF;
 80008fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	6113      	str	r3, [r2, #16]
    }
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000188 	.word	0x20000188
 8000918:	20000184 	.word	0x20000184

0800091c <enable_timer2_interrupt>:

// intialise hardware interrupt for timer 2
void enable_timer2_interrupt() {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable update interrupt (UIE)
	TIM2->DIER |= TIM_DIER_UIE;
 8000924:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	60d3      	str	r3, [r2, #12]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(TIM2_IRQn, 1);  // Set Priority
 8000934:	2101      	movs	r1, #1
 8000936:	201c      	movs	r0, #28
 8000938:	f7ff ff10 	bl	800075c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800093c:	201c      	movs	r0, #28
 800093e:	f7ff feef 	bl	8000720 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000942:	b662      	cpsie	i
}
 8000944:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <set_timer_period>:
	return TIM->ARR;
}

// simple set function to set a specific timer's period in ms
// assuming timers are configured to 1kHz so each count is 1ms
void set_timer_period(TIM_TypeDef *TIM, uint32_t new_period) {
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
	TIM->ARR = new_period;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <reset_timer>:

// function to reset a specific timer's count with a new period in ms
// assuming timers are configured to 1kHz so each count is ms
void reset_timer(TIM_TypeDef *TIM, uint32_t new_period) {
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]

	// stop timer's count and reset count to 0
	TIM->CR1 = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
	TIM->CNT = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	@ 0x24
	// set new period
	set_timer_period(TIM, new_period);
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffe3 	bl	800094a <set_timer_period>
	// restart timer
	TIM->CR1 |= TIM_CR1_CEN;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f043 0201 	orr.w	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <Timer_SetPeriodic>:


void Timer_SetPeriodic(uint32_t ms) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    init_timer_module(TIM2, ms, change_pattern);  // Uses toggling LED pattern
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <Timer_SetPeriodic+0x1c>)
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80009a8:	f7ff ff52 	bl	8000850 <init_timer_module>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	080008a9 	.word	0x080008a9

080009b8 <Timer_TriggerOneShot>:

void Timer_TriggerOneShot(uint32_t ms) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    timer_mode = 1;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <Timer_TriggerOneShot+0x34>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]

    GPIOE->ODR |= 0xFF00;  // Turn ON all LEDs PE8 to PE15
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <Timer_TriggerOneShot+0x38>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <Timer_TriggerOneShot+0x38>)
 80009cc:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 80009d0:	6153      	str	r3, [r2, #20]

    on_timer_interrupt = turn_off_led_callback;  // Assign callback to turn off LED
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <Timer_TriggerOneShot+0x3c>)
 80009d4:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <Timer_TriggerOneShot+0x40>)
 80009d6:	601a      	str	r2, [r3, #0]

    reset_timer(TIM2, ms);  // Restart TIM2 with new delay
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80009de:	f7ff ffc2 	bl	8000966 <reset_timer>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000184 	.word	0x20000184
 80009f0:	48001000 	.word	0x48001000
 80009f4:	20000188 	.word	0x20000188
 80009f8:	08000801 	.word	0x08000801

080009fc <__NVIC_EnableIRQ>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	@ (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <SerialInitialise>:
static uint32_t rx_index = 0;

static const char *tx_buffer = NULL;
static uint32_t tx_index = 0;

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b00 <SerialInitialise+0xc8>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b00 <SerialInitialise+0xc8>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a56:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <SerialInitialise+0xc8>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <SerialInitialise+0xc8>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	691a      	ldr	r2, [r3, #16]
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <SerialInitialise+0xc8>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4925      	ldr	r1, [pc, #148]	@ (8000b00 <SerialInitialise+0xc8>)
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	614b      	str	r3, [r1, #20]

    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	6952      	ldr	r2, [r2, #20]
 8000a78:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	6992      	ldr	r2, [r2, #24]
 8000a82:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	69d9      	ldr	r1, [r3, #28]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	6a1a      	ldr	r2, [r3, #32]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	6a19      	ldr	r1, [r3, #32]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <SerialInitialise+0xc8>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4913      	ldr	r1, [pc, #76]	@ (8000b00 <SerialInitialise+0xc8>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <SerialInitialise+0xc8>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4910      	ldr	r1, [pc, #64]	@ (8000b00 <SerialInitialise+0xc8>)
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	618b      	str	r3, [r1, #24]

    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	330c      	adds	r3, #12
 8000aca:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2246      	movs	r2, #70	@ 0x46
 8000ad0:	801a      	strh	r2, [r3, #0]

    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f042 020d 	orr.w	r2, r2, #13
 8000ae0:	601a      	str	r2, [r3, #0]
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0220 	orr.w	r2, r2, #32
 8000af0:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART1_IRQn);
 8000af2:	2025      	movs	r0, #37	@ 0x25
 8000af4:	f7ff ff82 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000

08000b04 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0);
 8000b10:	bf00      	nop
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f8      	beq.n	8000b12 <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	b292      	uxth	r2, r2
 8000b28:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SerialSetReceiveCallback>:
uint8_t SerialGetChar(SerialPort *serial_port) {
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);
    return serial_port->UART->RDR;
}

void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <SerialStartTransmission>:

void SerialStartTransmission(const char *str) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    tx_buffer = str;
 8000b5c:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <SerialStartTransmission+0x2c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
    tx_index = 0;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <SerialStartTransmission+0x30>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_TXEIE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <SerialStartTransmission+0x34>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <SerialStartTransmission+0x34>)
 8000b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000214 	.word	0x20000214
 8000b84:	20000218 	.word	0x20000218
 8000b88:	40013800 	.word	0x40013800

08000b8c <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 8000b92:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0320 	and.w	r3, r3, #32
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d045      	beq.n	8000c2a <USART1_EXTI25_IRQHandler+0x9e>
        char c = USART1->RDR;
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000ba0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	71fb      	strb	r3, [r7, #7]
        SerialOutputChar(c, &USART1_PORT);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	493b      	ldr	r1, [pc, #236]	@ (8000c98 <USART1_EXTI25_IRQHandler+0x10c>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffaa 	bl	8000b04 <SerialOutputChar>

        if (c == '\r') return;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b0d      	cmp	r3, #13
 8000bb4:	d06a      	beq.n	8000c8c <USART1_EXTI25_IRQHandler+0x100>

        if (c == '\n') {
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b0a      	cmp	r3, #10
 8000bba:	d124      	bne.n	8000c06 <USART1_EXTI25_IRQHandler+0x7a>
            rx_buffers[active_rx_buf][rx_index] = '\0';
 8000bbc:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <USART1_EXTI25_IRQHandler+0x110>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b37      	ldr	r3, [pc, #220]	@ (8000ca0 <USART1_EXTI25_IRQHandler+0x114>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4937      	ldr	r1, [pc, #220]	@ (8000ca4 <USART1_EXTI25_IRQHandler+0x118>)
 8000bc8:	0192      	lsls	r2, r2, #6
 8000bca:	440a      	add	r2, r1
 8000bcc:	4413      	add	r3, r2
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
            if (USART1_PORT.receive_callback)
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <USART1_EXTI25_IRQHandler+0x10c>)
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00a      	beq.n	8000bf0 <USART1_EXTI25_IRQHandler+0x64>
                USART1_PORT.receive_callback(rx_buffers[active_rx_buf], rx_index);
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <USART1_EXTI25_IRQHandler+0x10c>)
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bde:	4a2f      	ldr	r2, [pc, #188]	@ (8000c9c <USART1_EXTI25_IRQHandler+0x110>)
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0192      	lsls	r2, r2, #6
 8000be4:	492f      	ldr	r1, [pc, #188]	@ (8000ca4 <USART1_EXTI25_IRQHandler+0x118>)
 8000be6:	440a      	add	r2, r1
 8000be8:	492d      	ldr	r1, [pc, #180]	@ (8000ca0 <USART1_EXTI25_IRQHandler+0x114>)
 8000bea:	6809      	ldr	r1, [r1, #0]
 8000bec:	4610      	mov	r0, r2
 8000bee:	4798      	blx	r3
            active_rx_buf ^= 1;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <USART1_EXTI25_IRQHandler+0x110>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f083 0301 	eor.w	r3, r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <USART1_EXTI25_IRQHandler+0x110>)
 8000bfc:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000bfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <USART1_EXTI25_IRQHandler+0x114>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e011      	b.n	8000c2a <USART1_EXTI25_IRQHandler+0x9e>
        } else if (rx_index < sizeof(rx_buffers[0]) - 1) {
 8000c06:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <USART1_EXTI25_IRQHandler+0x114>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c0c:	d80d      	bhi.n	8000c2a <USART1_EXTI25_IRQHandler+0x9e>
            rx_buffers[active_rx_buf][rx_index++] = c;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <USART1_EXTI25_IRQHandler+0x110>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <USART1_EXTI25_IRQHandler+0x114>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4921      	ldr	r1, [pc, #132]	@ (8000ca0 <USART1_EXTI25_IRQHandler+0x114>)
 8000c1c:	600a      	str	r2, [r1, #0]
 8000c1e:	4921      	ldr	r1, [pc, #132]	@ (8000ca4 <USART1_EXTI25_IRQHandler+0x118>)
 8000c20:	0182      	lsls	r2, r0, #6
 8000c22:	440a      	add	r2, r1
 8000c24:	4413      	add	r3, r2
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d02b      	beq.n	8000c8e <USART1_EXTI25_IRQHandler+0x102>
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d025      	beq.n	8000c8e <USART1_EXTI25_IRQHandler+0x102>
        if (tx_buffer && tx_buffer[tx_index]) {
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d013      	beq.n	8000c72 <USART1_EXTI25_IRQHandler+0xe6>
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <USART1_EXTI25_IRQHandler+0x120>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <USART1_EXTI25_IRQHandler+0xe6>
            USART1->TDR = tx_buffer[tx_index++];
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <USART1_EXTI25_IRQHandler+0x120>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1c59      	adds	r1, r3, #1
 8000c64:	4811      	ldr	r0, [pc, #68]	@ (8000cac <USART1_EXTI25_IRQHandler+0x120>)
 8000c66:	6001      	str	r1, [r0, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000c70:	e00d      	b.n	8000c8e <USART1_EXTI25_IRQHandler+0x102>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <USART1_EXTI25_IRQHandler+0x108>)
 8000c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c7c:	6013      	str	r3, [r2, #0]
            tx_buffer = NULL;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
            tx_index = 0;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <USART1_EXTI25_IRQHandler+0x120>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e000      	b.n	8000c8e <USART1_EXTI25_IRQHandler+0x102>
        if (c == '\r') return;
 8000c8c:	bf00      	nop
        }
    }
}
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013800 	.word	0x40013800
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	2000020c 	.word	0x2000020c
 8000ca0:	20000210 	.word	0x20000210
 8000ca4:	2000018c 	.word	0x2000018c
 8000ca8:	20000214 	.word	0x20000214
 8000cac:	20000218 	.word	0x20000218

08000cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cde:	f000 fa5b 	bl	8001198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fc53 	bl	800058c <main>

08000ce6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cf4:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 8000cf8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cfc:	20000368 	.word	0x20000368

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>

08000d02 <atoi>:
 8000d02:	220a      	movs	r2, #10
 8000d04:	2100      	movs	r1, #0
 8000d06:	f000 b9c9 	b.w	800109c <strtol>
	...

08000d0c <sniprintf>:
 8000d0c:	b40c      	push	{r2, r3}
 8000d0e:	b530      	push	{r4, r5, lr}
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <sniprintf+0x68>)
 8000d12:	1e0c      	subs	r4, r1, #0
 8000d14:	681d      	ldr	r5, [r3, #0]
 8000d16:	b09d      	sub	sp, #116	@ 0x74
 8000d18:	da08      	bge.n	8000d2c <sniprintf+0x20>
 8000d1a:	238b      	movs	r3, #139	@ 0x8b
 8000d1c:	602b      	str	r3, [r5, #0]
 8000d1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d22:	b01d      	add	sp, #116	@ 0x74
 8000d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d28:	b002      	add	sp, #8
 8000d2a:	4770      	bx	lr
 8000d2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8000d3a:	bf14      	ite	ne
 8000d3c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8000d40:	4623      	moveq	r3, r4
 8000d42:	9304      	str	r3, [sp, #16]
 8000d44:	9307      	str	r3, [sp, #28]
 8000d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d4a:	9002      	str	r0, [sp, #8]
 8000d4c:	9006      	str	r0, [sp, #24]
 8000d4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000d52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8000d54:	ab21      	add	r3, sp, #132	@ 0x84
 8000d56:	a902      	add	r1, sp, #8
 8000d58:	4628      	mov	r0, r5
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	f000 fafa 	bl	8001354 <_svfiprintf_r>
 8000d60:	1c43      	adds	r3, r0, #1
 8000d62:	bfbc      	itt	lt
 8000d64:	238b      	movlt	r3, #139	@ 0x8b
 8000d66:	602b      	strlt	r3, [r5, #0]
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d0da      	beq.n	8000d22 <sniprintf+0x16>
 8000d6c:	9b02      	ldr	r3, [sp, #8]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e7d6      	b.n	8000d22 <sniprintf+0x16>
 8000d74:	20000038 	.word	0x20000038

08000d78 <siscanf>:
 8000d78:	b40e      	push	{r1, r2, r3}
 8000d7a:	b570      	push	{r4, r5, r6, lr}
 8000d7c:	b09d      	sub	sp, #116	@ 0x74
 8000d7e:	ac21      	add	r4, sp, #132	@ 0x84
 8000d80:	2500      	movs	r5, #0
 8000d82:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000d86:	f854 6b04 	ldr.w	r6, [r4], #4
 8000d8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000d8e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8000d90:	9002      	str	r0, [sp, #8]
 8000d92:	9006      	str	r0, [sp, #24]
 8000d94:	f7ff fa2e 	bl	80001f4 <strlen>
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <siscanf+0x50>)
 8000d9a:	9003      	str	r0, [sp, #12]
 8000d9c:	9007      	str	r0, [sp, #28]
 8000d9e:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <siscanf+0x54>)
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000da6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000daa:	4632      	mov	r2, r6
 8000dac:	4623      	mov	r3, r4
 8000dae:	a902      	add	r1, sp, #8
 8000db0:	6800      	ldr	r0, [r0, #0]
 8000db2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8000db4:	9514      	str	r5, [sp, #80]	@ 0x50
 8000db6:	9401      	str	r4, [sp, #4]
 8000db8:	f000 fc22 	bl	8001600 <__ssvfiscanf_r>
 8000dbc:	b01d      	add	sp, #116	@ 0x74
 8000dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000dc2:	b003      	add	sp, #12
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	08000df3 	.word	0x08000df3
 8000dcc:	20000038 	.word	0x20000038

08000dd0 <__sread>:
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd8:	f000 f9b4 	bl	8001144 <_read_r>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	bfab      	itete	ge
 8000de0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000de2:	89a3      	ldrhlt	r3, [r4, #12]
 8000de4:	181b      	addge	r3, r3, r0
 8000de6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dea:	bfac      	ite	ge
 8000dec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000dee:	81a3      	strhlt	r3, [r4, #12]
 8000df0:	bd10      	pop	{r4, pc}

08000df2 <__seofread>:
 8000df2:	2000      	movs	r0, #0
 8000df4:	4770      	bx	lr

08000df6 <__swrite>:
 8000df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfa:	461f      	mov	r7, r3
 8000dfc:	898b      	ldrh	r3, [r1, #12]
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	4605      	mov	r5, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	4616      	mov	r6, r2
 8000e06:	d505      	bpl.n	8000e14 <__swrite+0x1e>
 8000e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f000 f986 	bl	8001120 <_lseek_r>
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e1e:	81a3      	strh	r3, [r4, #12]
 8000e20:	4632      	mov	r2, r6
 8000e22:	463b      	mov	r3, r7
 8000e24:	4628      	mov	r0, r5
 8000e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2a:	f000 b99d 	b.w	8001168 <_write_r>

08000e2e <__sseek>:
 8000e2e:	b510      	push	{r4, lr}
 8000e30:	460c      	mov	r4, r1
 8000e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e36:	f000 f973 	bl	8001120 <_lseek_r>
 8000e3a:	1c43      	adds	r3, r0, #1
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	bf15      	itete	ne
 8000e40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e4a:	81a3      	strheq	r3, [r4, #12]
 8000e4c:	bf18      	it	ne
 8000e4e:	81a3      	strhne	r3, [r4, #12]
 8000e50:	bd10      	pop	{r4, pc}

08000e52 <__sclose>:
 8000e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e56:	f000 b9c7 	b.w	80011e8 <_close_r>
	...

08000e5c <std>:
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	b510      	push	{r4, lr}
 8000e60:	4604      	mov	r4, r0
 8000e62:	e9c0 3300 	strd	r3, r3, [r0]
 8000e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e6a:	6083      	str	r3, [r0, #8]
 8000e6c:	8181      	strh	r1, [r0, #12]
 8000e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e70:	81c2      	strh	r2, [r0, #14]
 8000e72:	6183      	str	r3, [r0, #24]
 8000e74:	4619      	mov	r1, r3
 8000e76:	2208      	movs	r2, #8
 8000e78:	305c      	adds	r0, #92	@ 0x5c
 8000e7a:	f000 f949 	bl	8001110 <memset>
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <std+0x58>)
 8000e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <std+0x5c>)
 8000e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <std+0x60>)
 8000e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <std+0x64>)
 8000e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <std+0x68>)
 8000e90:	6224      	str	r4, [r4, #32]
 8000e92:	429c      	cmp	r4, r3
 8000e94:	d006      	beq.n	8000ea4 <std+0x48>
 8000e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e9a:	4294      	cmp	r4, r2
 8000e9c:	d002      	beq.n	8000ea4 <std+0x48>
 8000e9e:	33d0      	adds	r3, #208	@ 0xd0
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	d105      	bne.n	8000eb0 <std+0x54>
 8000ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eac:	f000 b998 	b.w	80011e0 <__retarget_lock_init_recursive>
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08000dd1 	.word	0x08000dd1
 8000eb8:	08000df7 	.word	0x08000df7
 8000ebc:	08000e2f 	.word	0x08000e2f
 8000ec0:	08000e53 	.word	0x08000e53
 8000ec4:	2000021c 	.word	0x2000021c

08000ec8 <stdio_exit_handler>:
 8000ec8:	4a02      	ldr	r2, [pc, #8]	@ (8000ed4 <stdio_exit_handler+0xc>)
 8000eca:	4903      	ldr	r1, [pc, #12]	@ (8000ed8 <stdio_exit_handler+0x10>)
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <stdio_exit_handler+0x14>)
 8000ece:	f000 b8ef 	b.w	80010b0 <_fwalk_sglue>
 8000ed2:	bf00      	nop
 8000ed4:	2000002c 	.word	0x2000002c
 8000ed8:	080023e5 	.word	0x080023e5
 8000edc:	2000003c 	.word	0x2000003c

08000ee0 <cleanup_stdio>:
 8000ee0:	6841      	ldr	r1, [r0, #4]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <cleanup_stdio+0x34>)
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	b510      	push	{r4, lr}
 8000ee8:	4604      	mov	r4, r0
 8000eea:	d001      	beq.n	8000ef0 <cleanup_stdio+0x10>
 8000eec:	f001 fa7a 	bl	80023e4 <_fflush_r>
 8000ef0:	68a1      	ldr	r1, [r4, #8]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <cleanup_stdio+0x38>)
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	d002      	beq.n	8000efe <cleanup_stdio+0x1e>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f001 fa73 	bl	80023e4 <_fflush_r>
 8000efe:	68e1      	ldr	r1, [r4, #12]
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <cleanup_stdio+0x3c>)
 8000f02:	4299      	cmp	r1, r3
 8000f04:	d004      	beq.n	8000f10 <cleanup_stdio+0x30>
 8000f06:	4620      	mov	r0, r4
 8000f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f0c:	f001 ba6a 	b.w	80023e4 <_fflush_r>
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	bf00      	nop
 8000f14:	2000021c 	.word	0x2000021c
 8000f18:	20000284 	.word	0x20000284
 8000f1c:	200002ec 	.word	0x200002ec

08000f20 <global_stdio_init.part.0>:
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <global_stdio_init.part.0+0x30>)
 8000f24:	4c0b      	ldr	r4, [pc, #44]	@ (8000f54 <global_stdio_init.part.0+0x34>)
 8000f26:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <global_stdio_init.part.0+0x38>)
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2104      	movs	r1, #4
 8000f30:	f7ff ff94 	bl	8000e5c <std>
 8000f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2109      	movs	r1, #9
 8000f3c:	f7ff ff8e 	bl	8000e5c <std>
 8000f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f44:	2202      	movs	r2, #2
 8000f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f4a:	2112      	movs	r1, #18
 8000f4c:	f7ff bf86 	b.w	8000e5c <std>
 8000f50:	20000354 	.word	0x20000354
 8000f54:	2000021c 	.word	0x2000021c
 8000f58:	08000ec9 	.word	0x08000ec9

08000f5c <__sfp_lock_acquire>:
 8000f5c:	4801      	ldr	r0, [pc, #4]	@ (8000f64 <__sfp_lock_acquire+0x8>)
 8000f5e:	f000 b940 	b.w	80011e2 <__retarget_lock_acquire_recursive>
 8000f62:	bf00      	nop
 8000f64:	20000359 	.word	0x20000359

08000f68 <__sfp_lock_release>:
 8000f68:	4801      	ldr	r0, [pc, #4]	@ (8000f70 <__sfp_lock_release+0x8>)
 8000f6a:	f000 b93b 	b.w	80011e4 <__retarget_lock_release_recursive>
 8000f6e:	bf00      	nop
 8000f70:	20000359 	.word	0x20000359

08000f74 <__sinit>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	f7ff fff0 	bl	8000f5c <__sfp_lock_acquire>
 8000f7c:	6a23      	ldr	r3, [r4, #32]
 8000f7e:	b11b      	cbz	r3, 8000f88 <__sinit+0x14>
 8000f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f84:	f7ff bff0 	b.w	8000f68 <__sfp_lock_release>
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__sinit+0x28>)
 8000f8a:	6223      	str	r3, [r4, #32]
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__sinit+0x2c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f5      	bne.n	8000f80 <__sinit+0xc>
 8000f94:	f7ff ffc4 	bl	8000f20 <global_stdio_init.part.0>
 8000f98:	e7f2      	b.n	8000f80 <__sinit+0xc>
 8000f9a:	bf00      	nop
 8000f9c:	08000ee1 	.word	0x08000ee1
 8000fa0:	20000354 	.word	0x20000354

08000fa4 <_strtol_l.isra.0>:
 8000fa4:	2b24      	cmp	r3, #36	@ 0x24
 8000fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000faa:	4686      	mov	lr, r0
 8000fac:	4690      	mov	r8, r2
 8000fae:	d801      	bhi.n	8000fb4 <_strtol_l.isra.0+0x10>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d106      	bne.n	8000fc2 <_strtol_l.isra.0+0x1e>
 8000fb4:	f000 f8ea 	bl	800118c <__errno>
 8000fb8:	2316      	movs	r3, #22
 8000fba:	6003      	str	r3, [r0, #0]
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc2:	4834      	ldr	r0, [pc, #208]	@ (8001094 <_strtol_l.isra.0+0xf0>)
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	462a      	mov	r2, r5
 8000fc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000fcc:	5d06      	ldrb	r6, [r0, r4]
 8000fce:	f016 0608 	ands.w	r6, r6, #8
 8000fd2:	d1f8      	bne.n	8000fc6 <_strtol_l.isra.0+0x22>
 8000fd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8000fd6:	d110      	bne.n	8000ffa <_strtol_l.isra.0+0x56>
 8000fd8:	782c      	ldrb	r4, [r5, #0]
 8000fda:	2601      	movs	r6, #1
 8000fdc:	1c95      	adds	r5, r2, #2
 8000fde:	f033 0210 	bics.w	r2, r3, #16
 8000fe2:	d115      	bne.n	8001010 <_strtol_l.isra.0+0x6c>
 8000fe4:	2c30      	cmp	r4, #48	@ 0x30
 8000fe6:	d10d      	bne.n	8001004 <_strtol_l.isra.0+0x60>
 8000fe8:	782a      	ldrb	r2, [r5, #0]
 8000fea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000fee:	2a58      	cmp	r2, #88	@ 0x58
 8000ff0:	d108      	bne.n	8001004 <_strtol_l.isra.0+0x60>
 8000ff2:	786c      	ldrb	r4, [r5, #1]
 8000ff4:	3502      	adds	r5, #2
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	e00a      	b.n	8001010 <_strtol_l.isra.0+0x6c>
 8000ffa:	2c2b      	cmp	r4, #43	@ 0x2b
 8000ffc:	bf04      	itt	eq
 8000ffe:	782c      	ldrbeq	r4, [r5, #0]
 8001000:	1c95      	addeq	r5, r2, #2
 8001002:	e7ec      	b.n	8000fde <_strtol_l.isra.0+0x3a>
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f6      	bne.n	8000ff6 <_strtol_l.isra.0+0x52>
 8001008:	2c30      	cmp	r4, #48	@ 0x30
 800100a:	bf14      	ite	ne
 800100c:	230a      	movne	r3, #10
 800100e:	2308      	moveq	r3, #8
 8001010:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001014:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	fbbc f9f3 	udiv	r9, ip, r3
 800101e:	4610      	mov	r0, r2
 8001020:	fb03 ca19 	mls	sl, r3, r9, ip
 8001024:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001028:	2f09      	cmp	r7, #9
 800102a:	d80f      	bhi.n	800104c <_strtol_l.isra.0+0xa8>
 800102c:	463c      	mov	r4, r7
 800102e:	42a3      	cmp	r3, r4
 8001030:	dd1b      	ble.n	800106a <_strtol_l.isra.0+0xc6>
 8001032:	1c57      	adds	r7, r2, #1
 8001034:	d007      	beq.n	8001046 <_strtol_l.isra.0+0xa2>
 8001036:	4581      	cmp	r9, r0
 8001038:	d314      	bcc.n	8001064 <_strtol_l.isra.0+0xc0>
 800103a:	d101      	bne.n	8001040 <_strtol_l.isra.0+0x9c>
 800103c:	45a2      	cmp	sl, r4
 800103e:	db11      	blt.n	8001064 <_strtol_l.isra.0+0xc0>
 8001040:	fb00 4003 	mla	r0, r0, r3, r4
 8001044:	2201      	movs	r2, #1
 8001046:	f815 4b01 	ldrb.w	r4, [r5], #1
 800104a:	e7eb      	b.n	8001024 <_strtol_l.isra.0+0x80>
 800104c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001050:	2f19      	cmp	r7, #25
 8001052:	d801      	bhi.n	8001058 <_strtol_l.isra.0+0xb4>
 8001054:	3c37      	subs	r4, #55	@ 0x37
 8001056:	e7ea      	b.n	800102e <_strtol_l.isra.0+0x8a>
 8001058:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800105c:	2f19      	cmp	r7, #25
 800105e:	d804      	bhi.n	800106a <_strtol_l.isra.0+0xc6>
 8001060:	3c57      	subs	r4, #87	@ 0x57
 8001062:	e7e4      	b.n	800102e <_strtol_l.isra.0+0x8a>
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001068:	e7ed      	b.n	8001046 <_strtol_l.isra.0+0xa2>
 800106a:	1c53      	adds	r3, r2, #1
 800106c:	d108      	bne.n	8001080 <_strtol_l.isra.0+0xdc>
 800106e:	2322      	movs	r3, #34	@ 0x22
 8001070:	f8ce 3000 	str.w	r3, [lr]
 8001074:	4660      	mov	r0, ip
 8001076:	f1b8 0f00 	cmp.w	r8, #0
 800107a:	d0a0      	beq.n	8000fbe <_strtol_l.isra.0+0x1a>
 800107c:	1e69      	subs	r1, r5, #1
 800107e:	e006      	b.n	800108e <_strtol_l.isra.0+0xea>
 8001080:	b106      	cbz	r6, 8001084 <_strtol_l.isra.0+0xe0>
 8001082:	4240      	negs	r0, r0
 8001084:	f1b8 0f00 	cmp.w	r8, #0
 8001088:	d099      	beq.n	8000fbe <_strtol_l.isra.0+0x1a>
 800108a:	2a00      	cmp	r2, #0
 800108c:	d1f6      	bne.n	800107c <_strtol_l.isra.0+0xd8>
 800108e:	f8c8 1000 	str.w	r1, [r8]
 8001092:	e794      	b.n	8000fbe <_strtol_l.isra.0+0x1a>
 8001094:	080029c5 	.word	0x080029c5

08001098 <_strtol_r>:
 8001098:	f7ff bf84 	b.w	8000fa4 <_strtol_l.isra.0>

0800109c <strtol>:
 800109c:	4613      	mov	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	4601      	mov	r1, r0
 80010a2:	4802      	ldr	r0, [pc, #8]	@ (80010ac <strtol+0x10>)
 80010a4:	6800      	ldr	r0, [r0, #0]
 80010a6:	f7ff bf7d 	b.w	8000fa4 <_strtol_l.isra.0>
 80010aa:	bf00      	nop
 80010ac:	20000038 	.word	0x20000038

080010b0 <_fwalk_sglue>:
 80010b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010b4:	4607      	mov	r7, r0
 80010b6:	4688      	mov	r8, r1
 80010b8:	4614      	mov	r4, r2
 80010ba:	2600      	movs	r6, #0
 80010bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010c0:	f1b9 0901 	subs.w	r9, r9, #1
 80010c4:	d505      	bpl.n	80010d2 <_fwalk_sglue+0x22>
 80010c6:	6824      	ldr	r4, [r4, #0]
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d1f7      	bne.n	80010bc <_fwalk_sglue+0xc>
 80010cc:	4630      	mov	r0, r6
 80010ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010d2:	89ab      	ldrh	r3, [r5, #12]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d907      	bls.n	80010e8 <_fwalk_sglue+0x38>
 80010d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010dc:	3301      	adds	r3, #1
 80010de:	d003      	beq.n	80010e8 <_fwalk_sglue+0x38>
 80010e0:	4629      	mov	r1, r5
 80010e2:	4638      	mov	r0, r7
 80010e4:	47c0      	blx	r8
 80010e6:	4306      	orrs	r6, r0
 80010e8:	3568      	adds	r5, #104	@ 0x68
 80010ea:	e7e9      	b.n	80010c0 <_fwalk_sglue+0x10>

080010ec <iprintf>:
 80010ec:	b40f      	push	{r0, r1, r2, r3}
 80010ee:	b507      	push	{r0, r1, r2, lr}
 80010f0:	4906      	ldr	r1, [pc, #24]	@ (800110c <iprintf+0x20>)
 80010f2:	ab04      	add	r3, sp, #16
 80010f4:	6808      	ldr	r0, [r1, #0]
 80010f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80010fa:	6881      	ldr	r1, [r0, #8]
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f000 fc1f 	bl	8001940 <_vfiprintf_r>
 8001102:	b003      	add	sp, #12
 8001104:	f85d eb04 	ldr.w	lr, [sp], #4
 8001108:	b004      	add	sp, #16
 800110a:	4770      	bx	lr
 800110c:	20000038 	.word	0x20000038

08001110 <memset>:
 8001110:	4402      	add	r2, r0
 8001112:	4603      	mov	r3, r0
 8001114:	4293      	cmp	r3, r2
 8001116:	d100      	bne.n	800111a <memset+0xa>
 8001118:	4770      	bx	lr
 800111a:	f803 1b01 	strb.w	r1, [r3], #1
 800111e:	e7f9      	b.n	8001114 <memset+0x4>

08001120 <_lseek_r>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	4d07      	ldr	r5, [pc, #28]	@ (8001140 <_lseek_r+0x20>)
 8001124:	4604      	mov	r4, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4611      	mov	r1, r2
 800112a:	2200      	movs	r2, #0
 800112c:	602a      	str	r2, [r5, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	f7ff fab2 	bl	8000698 <_lseek>
 8001134:	1c43      	adds	r3, r0, #1
 8001136:	d102      	bne.n	800113e <_lseek_r+0x1e>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	b103      	cbz	r3, 800113e <_lseek_r+0x1e>
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	2000035c 	.word	0x2000035c

08001144 <_read_r>:
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	4d07      	ldr	r5, [pc, #28]	@ (8001164 <_read_r+0x20>)
 8001148:	4604      	mov	r4, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4611      	mov	r1, r2
 800114e:	2200      	movs	r2, #0
 8001150:	602a      	str	r2, [r5, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	f7ff fa40 	bl	80005d8 <_read>
 8001158:	1c43      	adds	r3, r0, #1
 800115a:	d102      	bne.n	8001162 <_read_r+0x1e>
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	b103      	cbz	r3, 8001162 <_read_r+0x1e>
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	2000035c 	.word	0x2000035c

08001168 <_write_r>:
 8001168:	b538      	push	{r3, r4, r5, lr}
 800116a:	4d07      	ldr	r5, [pc, #28]	@ (8001188 <_write_r+0x20>)
 800116c:	4604      	mov	r4, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4611      	mov	r1, r2
 8001172:	2200      	movs	r2, #0
 8001174:	602a      	str	r2, [r5, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	f7ff fa4b 	bl	8000612 <_write>
 800117c:	1c43      	adds	r3, r0, #1
 800117e:	d102      	bne.n	8001186 <_write_r+0x1e>
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	b103      	cbz	r3, 8001186 <_write_r+0x1e>
 8001184:	6023      	str	r3, [r4, #0]
 8001186:	bd38      	pop	{r3, r4, r5, pc}
 8001188:	2000035c 	.word	0x2000035c

0800118c <__errno>:
 800118c:	4b01      	ldr	r3, [pc, #4]	@ (8001194 <__errno+0x8>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000038 	.word	0x20000038

08001198 <__libc_init_array>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	4d0d      	ldr	r5, [pc, #52]	@ (80011d0 <__libc_init_array+0x38>)
 800119c:	4c0d      	ldr	r4, [pc, #52]	@ (80011d4 <__libc_init_array+0x3c>)
 800119e:	1b64      	subs	r4, r4, r5
 80011a0:	10a4      	asrs	r4, r4, #2
 80011a2:	2600      	movs	r6, #0
 80011a4:	42a6      	cmp	r6, r4
 80011a6:	d109      	bne.n	80011bc <__libc_init_array+0x24>
 80011a8:	4d0b      	ldr	r5, [pc, #44]	@ (80011d8 <__libc_init_array+0x40>)
 80011aa:	4c0c      	ldr	r4, [pc, #48]	@ (80011dc <__libc_init_array+0x44>)
 80011ac:	f001 fb7e 	bl	80028ac <_init>
 80011b0:	1b64      	subs	r4, r4, r5
 80011b2:	10a4      	asrs	r4, r4, #2
 80011b4:	2600      	movs	r6, #0
 80011b6:	42a6      	cmp	r6, r4
 80011b8:	d105      	bne.n	80011c6 <__libc_init_array+0x2e>
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
 80011bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c0:	4798      	blx	r3
 80011c2:	3601      	adds	r6, #1
 80011c4:	e7ee      	b.n	80011a4 <__libc_init_array+0xc>
 80011c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80011ca:	4798      	blx	r3
 80011cc:	3601      	adds	r6, #1
 80011ce:	e7f2      	b.n	80011b6 <__libc_init_array+0x1e>
 80011d0:	08002b1c 	.word	0x08002b1c
 80011d4:	08002b1c 	.word	0x08002b1c
 80011d8:	08002b1c 	.word	0x08002b1c
 80011dc:	08002b20 	.word	0x08002b20

080011e0 <__retarget_lock_init_recursive>:
 80011e0:	4770      	bx	lr

080011e2 <__retarget_lock_acquire_recursive>:
 80011e2:	4770      	bx	lr

080011e4 <__retarget_lock_release_recursive>:
 80011e4:	4770      	bx	lr
	...

080011e8 <_close_r>:
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	4d06      	ldr	r5, [pc, #24]	@ (8001204 <_close_r+0x1c>)
 80011ec:	2300      	movs	r3, #0
 80011ee:	4604      	mov	r4, r0
 80011f0:	4608      	mov	r0, r1
 80011f2:	602b      	str	r3, [r5, #0]
 80011f4:	f7ff fa29 	bl	800064a <_close>
 80011f8:	1c43      	adds	r3, r0, #1
 80011fa:	d102      	bne.n	8001202 <_close_r+0x1a>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	b103      	cbz	r3, 8001202 <_close_r+0x1a>
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	bd38      	pop	{r3, r4, r5, pc}
 8001204:	2000035c 	.word	0x2000035c

08001208 <_free_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4605      	mov	r5, r0
 800120c:	2900      	cmp	r1, #0
 800120e:	d041      	beq.n	8001294 <_free_r+0x8c>
 8001210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001214:	1f0c      	subs	r4, r1, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	bfb8      	it	lt
 800121a:	18e4      	addlt	r4, r4, r3
 800121c:	f001 f90a 	bl	8002434 <__malloc_lock>
 8001220:	4a1d      	ldr	r2, [pc, #116]	@ (8001298 <_free_r+0x90>)
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	b933      	cbnz	r3, 8001234 <_free_r+0x2c>
 8001226:	6063      	str	r3, [r4, #4]
 8001228:	6014      	str	r4, [r2, #0]
 800122a:	4628      	mov	r0, r5
 800122c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001230:	f001 b906 	b.w	8002440 <__malloc_unlock>
 8001234:	42a3      	cmp	r3, r4
 8001236:	d908      	bls.n	800124a <_free_r+0x42>
 8001238:	6820      	ldr	r0, [r4, #0]
 800123a:	1821      	adds	r1, r4, r0
 800123c:	428b      	cmp	r3, r1
 800123e:	bf01      	itttt	eq
 8001240:	6819      	ldreq	r1, [r3, #0]
 8001242:	685b      	ldreq	r3, [r3, #4]
 8001244:	1809      	addeq	r1, r1, r0
 8001246:	6021      	streq	r1, [r4, #0]
 8001248:	e7ed      	b.n	8001226 <_free_r+0x1e>
 800124a:	461a      	mov	r2, r3
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	b10b      	cbz	r3, 8001254 <_free_r+0x4c>
 8001250:	42a3      	cmp	r3, r4
 8001252:	d9fa      	bls.n	800124a <_free_r+0x42>
 8001254:	6811      	ldr	r1, [r2, #0]
 8001256:	1850      	adds	r0, r2, r1
 8001258:	42a0      	cmp	r0, r4
 800125a:	d10b      	bne.n	8001274 <_free_r+0x6c>
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	4401      	add	r1, r0
 8001260:	1850      	adds	r0, r2, r1
 8001262:	4283      	cmp	r3, r0
 8001264:	6011      	str	r1, [r2, #0]
 8001266:	d1e0      	bne.n	800122a <_free_r+0x22>
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	6053      	str	r3, [r2, #4]
 800126e:	4408      	add	r0, r1
 8001270:	6010      	str	r0, [r2, #0]
 8001272:	e7da      	b.n	800122a <_free_r+0x22>
 8001274:	d902      	bls.n	800127c <_free_r+0x74>
 8001276:	230c      	movs	r3, #12
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	e7d6      	b.n	800122a <_free_r+0x22>
 800127c:	6820      	ldr	r0, [r4, #0]
 800127e:	1821      	adds	r1, r4, r0
 8001280:	428b      	cmp	r3, r1
 8001282:	bf04      	itt	eq
 8001284:	6819      	ldreq	r1, [r3, #0]
 8001286:	685b      	ldreq	r3, [r3, #4]
 8001288:	6063      	str	r3, [r4, #4]
 800128a:	bf04      	itt	eq
 800128c:	1809      	addeq	r1, r1, r0
 800128e:	6021      	streq	r1, [r4, #0]
 8001290:	6054      	str	r4, [r2, #4]
 8001292:	e7ca      	b.n	800122a <_free_r+0x22>
 8001294:	bd38      	pop	{r3, r4, r5, pc}
 8001296:	bf00      	nop
 8001298:	20000364 	.word	0x20000364

0800129c <__ssputs_r>:
 800129c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a0:	688e      	ldr	r6, [r1, #8]
 80012a2:	461f      	mov	r7, r3
 80012a4:	42be      	cmp	r6, r7
 80012a6:	680b      	ldr	r3, [r1, #0]
 80012a8:	4682      	mov	sl, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	4690      	mov	r8, r2
 80012ae:	d82d      	bhi.n	800130c <__ssputs_r+0x70>
 80012b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80012b8:	d026      	beq.n	8001308 <__ssputs_r+0x6c>
 80012ba:	6965      	ldr	r5, [r4, #20]
 80012bc:	6909      	ldr	r1, [r1, #16]
 80012be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012c2:	eba3 0901 	sub.w	r9, r3, r1
 80012c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80012ca:	1c7b      	adds	r3, r7, #1
 80012cc:	444b      	add	r3, r9
 80012ce:	106d      	asrs	r5, r5, #1
 80012d0:	429d      	cmp	r5, r3
 80012d2:	bf38      	it	cc
 80012d4:	461d      	movcc	r5, r3
 80012d6:	0553      	lsls	r3, r2, #21
 80012d8:	d527      	bpl.n	800132a <__ssputs_r+0x8e>
 80012da:	4629      	mov	r1, r5
 80012dc:	f000 fc6a 	bl	8001bb4 <_malloc_r>
 80012e0:	4606      	mov	r6, r0
 80012e2:	b360      	cbz	r0, 800133e <__ssputs_r+0xa2>
 80012e4:	6921      	ldr	r1, [r4, #16]
 80012e6:	464a      	mov	r2, r9
 80012e8:	f001 faca 	bl	8002880 <memcpy>
 80012ec:	89a3      	ldrh	r3, [r4, #12]
 80012ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80012f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f6:	81a3      	strh	r3, [r4, #12]
 80012f8:	6126      	str	r6, [r4, #16]
 80012fa:	6165      	str	r5, [r4, #20]
 80012fc:	444e      	add	r6, r9
 80012fe:	eba5 0509 	sub.w	r5, r5, r9
 8001302:	6026      	str	r6, [r4, #0]
 8001304:	60a5      	str	r5, [r4, #8]
 8001306:	463e      	mov	r6, r7
 8001308:	42be      	cmp	r6, r7
 800130a:	d900      	bls.n	800130e <__ssputs_r+0x72>
 800130c:	463e      	mov	r6, r7
 800130e:	6820      	ldr	r0, [r4, #0]
 8001310:	4632      	mov	r2, r6
 8001312:	4641      	mov	r1, r8
 8001314:	f001 fa68 	bl	80027e8 <memmove>
 8001318:	68a3      	ldr	r3, [r4, #8]
 800131a:	1b9b      	subs	r3, r3, r6
 800131c:	60a3      	str	r3, [r4, #8]
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	4433      	add	r3, r6
 8001322:	6023      	str	r3, [r4, #0]
 8001324:	2000      	movs	r0, #0
 8001326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132a:	462a      	mov	r2, r5
 800132c:	f001 f8c8 	bl	80024c0 <_realloc_r>
 8001330:	4606      	mov	r6, r0
 8001332:	2800      	cmp	r0, #0
 8001334:	d1e0      	bne.n	80012f8 <__ssputs_r+0x5c>
 8001336:	6921      	ldr	r1, [r4, #16]
 8001338:	4650      	mov	r0, sl
 800133a:	f7ff ff65 	bl	8001208 <_free_r>
 800133e:	230c      	movs	r3, #12
 8001340:	f8ca 3000 	str.w	r3, [sl]
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001350:	e7e9      	b.n	8001326 <__ssputs_r+0x8a>
	...

08001354 <_svfiprintf_r>:
 8001354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001358:	4698      	mov	r8, r3
 800135a:	898b      	ldrh	r3, [r1, #12]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	b09d      	sub	sp, #116	@ 0x74
 8001360:	4607      	mov	r7, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4614      	mov	r4, r2
 8001366:	d510      	bpl.n	800138a <_svfiprintf_r+0x36>
 8001368:	690b      	ldr	r3, [r1, #16]
 800136a:	b973      	cbnz	r3, 800138a <_svfiprintf_r+0x36>
 800136c:	2140      	movs	r1, #64	@ 0x40
 800136e:	f000 fc21 	bl	8001bb4 <_malloc_r>
 8001372:	6028      	str	r0, [r5, #0]
 8001374:	6128      	str	r0, [r5, #16]
 8001376:	b930      	cbnz	r0, 8001386 <_svfiprintf_r+0x32>
 8001378:	230c      	movs	r3, #12
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001380:	b01d      	add	sp, #116	@ 0x74
 8001382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001386:	2340      	movs	r3, #64	@ 0x40
 8001388:	616b      	str	r3, [r5, #20]
 800138a:	2300      	movs	r3, #0
 800138c:	9309      	str	r3, [sp, #36]	@ 0x24
 800138e:	2320      	movs	r3, #32
 8001390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001394:	f8cd 800c 	str.w	r8, [sp, #12]
 8001398:	2330      	movs	r3, #48	@ 0x30
 800139a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001538 <_svfiprintf_r+0x1e4>
 800139e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80013a2:	f04f 0901 	mov.w	r9, #1
 80013a6:	4623      	mov	r3, r4
 80013a8:	469a      	mov	sl, r3
 80013aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013ae:	b10a      	cbz	r2, 80013b4 <_svfiprintf_r+0x60>
 80013b0:	2a25      	cmp	r2, #37	@ 0x25
 80013b2:	d1f9      	bne.n	80013a8 <_svfiprintf_r+0x54>
 80013b4:	ebba 0b04 	subs.w	fp, sl, r4
 80013b8:	d00b      	beq.n	80013d2 <_svfiprintf_r+0x7e>
 80013ba:	465b      	mov	r3, fp
 80013bc:	4622      	mov	r2, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff ff6b 	bl	800129c <__ssputs_r>
 80013c6:	3001      	adds	r0, #1
 80013c8:	f000 80a7 	beq.w	800151a <_svfiprintf_r+0x1c6>
 80013cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013ce:	445a      	add	r2, fp
 80013d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80013d2:	f89a 3000 	ldrb.w	r3, [sl]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 809f 	beq.w	800151a <_svfiprintf_r+0x1c6>
 80013dc:	2300      	movs	r3, #0
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013e6:	f10a 0a01 	add.w	sl, sl, #1
 80013ea:	9304      	str	r3, [sp, #16]
 80013ec:	9307      	str	r3, [sp, #28]
 80013ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80013f4:	4654      	mov	r4, sl
 80013f6:	2205      	movs	r2, #5
 80013f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013fc:	484e      	ldr	r0, [pc, #312]	@ (8001538 <_svfiprintf_r+0x1e4>)
 80013fe:	f7fe ff07 	bl	8000210 <memchr>
 8001402:	9a04      	ldr	r2, [sp, #16]
 8001404:	b9d8      	cbnz	r0, 800143e <_svfiprintf_r+0xea>
 8001406:	06d0      	lsls	r0, r2, #27
 8001408:	bf44      	itt	mi
 800140a:	2320      	movmi	r3, #32
 800140c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001410:	0711      	lsls	r1, r2, #28
 8001412:	bf44      	itt	mi
 8001414:	232b      	movmi	r3, #43	@ 0x2b
 8001416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800141a:	f89a 3000 	ldrb.w	r3, [sl]
 800141e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001420:	d015      	beq.n	800144e <_svfiprintf_r+0xfa>
 8001422:	9a07      	ldr	r2, [sp, #28]
 8001424:	4654      	mov	r4, sl
 8001426:	2000      	movs	r0, #0
 8001428:	f04f 0c0a 	mov.w	ip, #10
 800142c:	4621      	mov	r1, r4
 800142e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001432:	3b30      	subs	r3, #48	@ 0x30
 8001434:	2b09      	cmp	r3, #9
 8001436:	d94b      	bls.n	80014d0 <_svfiprintf_r+0x17c>
 8001438:	b1b0      	cbz	r0, 8001468 <_svfiprintf_r+0x114>
 800143a:	9207      	str	r2, [sp, #28]
 800143c:	e014      	b.n	8001468 <_svfiprintf_r+0x114>
 800143e:	eba0 0308 	sub.w	r3, r0, r8
 8001442:	fa09 f303 	lsl.w	r3, r9, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	9304      	str	r3, [sp, #16]
 800144a:	46a2      	mov	sl, r4
 800144c:	e7d2      	b.n	80013f4 <_svfiprintf_r+0xa0>
 800144e:	9b03      	ldr	r3, [sp, #12]
 8001450:	1d19      	adds	r1, r3, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	9103      	str	r1, [sp, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bfbb      	ittet	lt
 800145a:	425b      	neglt	r3, r3
 800145c:	f042 0202 	orrlt.w	r2, r2, #2
 8001460:	9307      	strge	r3, [sp, #28]
 8001462:	9307      	strlt	r3, [sp, #28]
 8001464:	bfb8      	it	lt
 8001466:	9204      	strlt	r2, [sp, #16]
 8001468:	7823      	ldrb	r3, [r4, #0]
 800146a:	2b2e      	cmp	r3, #46	@ 0x2e
 800146c:	d10a      	bne.n	8001484 <_svfiprintf_r+0x130>
 800146e:	7863      	ldrb	r3, [r4, #1]
 8001470:	2b2a      	cmp	r3, #42	@ 0x2a
 8001472:	d132      	bne.n	80014da <_svfiprintf_r+0x186>
 8001474:	9b03      	ldr	r3, [sp, #12]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	9203      	str	r2, [sp, #12]
 800147c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001480:	3402      	adds	r4, #2
 8001482:	9305      	str	r3, [sp, #20]
 8001484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001548 <_svfiprintf_r+0x1f4>
 8001488:	7821      	ldrb	r1, [r4, #0]
 800148a:	2203      	movs	r2, #3
 800148c:	4650      	mov	r0, sl
 800148e:	f7fe febf 	bl	8000210 <memchr>
 8001492:	b138      	cbz	r0, 80014a4 <_svfiprintf_r+0x150>
 8001494:	9b04      	ldr	r3, [sp, #16]
 8001496:	eba0 000a 	sub.w	r0, r0, sl
 800149a:	2240      	movs	r2, #64	@ 0x40
 800149c:	4082      	lsls	r2, r0
 800149e:	4313      	orrs	r3, r2
 80014a0:	3401      	adds	r4, #1
 80014a2:	9304      	str	r3, [sp, #16]
 80014a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014a8:	4824      	ldr	r0, [pc, #144]	@ (800153c <_svfiprintf_r+0x1e8>)
 80014aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80014ae:	2206      	movs	r2, #6
 80014b0:	f7fe feae 	bl	8000210 <memchr>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d036      	beq.n	8001526 <_svfiprintf_r+0x1d2>
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <_svfiprintf_r+0x1ec>)
 80014ba:	bb1b      	cbnz	r3, 8001504 <_svfiprintf_r+0x1b0>
 80014bc:	9b03      	ldr	r3, [sp, #12]
 80014be:	3307      	adds	r3, #7
 80014c0:	f023 0307 	bic.w	r3, r3, #7
 80014c4:	3308      	adds	r3, #8
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014ca:	4433      	add	r3, r6
 80014cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80014ce:	e76a      	b.n	80013a6 <_svfiprintf_r+0x52>
 80014d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80014d4:	460c      	mov	r4, r1
 80014d6:	2001      	movs	r0, #1
 80014d8:	e7a8      	b.n	800142c <_svfiprintf_r+0xd8>
 80014da:	2300      	movs	r3, #0
 80014dc:	3401      	adds	r4, #1
 80014de:	9305      	str	r3, [sp, #20]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 0c0a 	mov.w	ip, #10
 80014e6:	4620      	mov	r0, r4
 80014e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ec:	3a30      	subs	r2, #48	@ 0x30
 80014ee:	2a09      	cmp	r2, #9
 80014f0:	d903      	bls.n	80014fa <_svfiprintf_r+0x1a6>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0c6      	beq.n	8001484 <_svfiprintf_r+0x130>
 80014f6:	9105      	str	r1, [sp, #20]
 80014f8:	e7c4      	b.n	8001484 <_svfiprintf_r+0x130>
 80014fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80014fe:	4604      	mov	r4, r0
 8001500:	2301      	movs	r3, #1
 8001502:	e7f0      	b.n	80014e6 <_svfiprintf_r+0x192>
 8001504:	ab03      	add	r3, sp, #12
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	462a      	mov	r2, r5
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <_svfiprintf_r+0x1f0>)
 800150c:	a904      	add	r1, sp, #16
 800150e:	4638      	mov	r0, r7
 8001510:	f3af 8000 	nop.w
 8001514:	1c42      	adds	r2, r0, #1
 8001516:	4606      	mov	r6, r0
 8001518:	d1d6      	bne.n	80014c8 <_svfiprintf_r+0x174>
 800151a:	89ab      	ldrh	r3, [r5, #12]
 800151c:	065b      	lsls	r3, r3, #25
 800151e:	f53f af2d 	bmi.w	800137c <_svfiprintf_r+0x28>
 8001522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001524:	e72c      	b.n	8001380 <_svfiprintf_r+0x2c>
 8001526:	ab03      	add	r3, sp, #12
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	462a      	mov	r2, r5
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <_svfiprintf_r+0x1f0>)
 800152e:	a904      	add	r1, sp, #16
 8001530:	4638      	mov	r0, r7
 8001532:	f000 fc2d 	bl	8001d90 <_printf_i>
 8001536:	e7ed      	b.n	8001514 <_svfiprintf_r+0x1c0>
 8001538:	08002ac5 	.word	0x08002ac5
 800153c:	08002acf 	.word	0x08002acf
 8001540:	00000000 	.word	0x00000000
 8001544:	0800129d 	.word	0x0800129d
 8001548:	08002acb 	.word	0x08002acb

0800154c <_sungetc_r>:
 800154c:	b538      	push	{r3, r4, r5, lr}
 800154e:	1c4b      	adds	r3, r1, #1
 8001550:	4614      	mov	r4, r2
 8001552:	d103      	bne.n	800155c <_sungetc_r+0x10>
 8001554:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001558:	4628      	mov	r0, r5
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	8993      	ldrh	r3, [r2, #12]
 800155e:	f023 0320 	bic.w	r3, r3, #32
 8001562:	8193      	strh	r3, [r2, #12]
 8001564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001566:	6852      	ldr	r2, [r2, #4]
 8001568:	b2cd      	uxtb	r5, r1
 800156a:	b18b      	cbz	r3, 8001590 <_sungetc_r+0x44>
 800156c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800156e:	4293      	cmp	r3, r2
 8001570:	dd08      	ble.n	8001584 <_sungetc_r+0x38>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	6022      	str	r2, [r4, #0]
 8001578:	f803 5c01 	strb.w	r5, [r3, #-1]
 800157c:	6863      	ldr	r3, [r4, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	6063      	str	r3, [r4, #4]
 8001582:	e7e9      	b.n	8001558 <_sungetc_r+0xc>
 8001584:	4621      	mov	r1, r4
 8001586:	f000 ff61 	bl	800244c <__submore>
 800158a:	2800      	cmp	r0, #0
 800158c:	d0f1      	beq.n	8001572 <_sungetc_r+0x26>
 800158e:	e7e1      	b.n	8001554 <_sungetc_r+0x8>
 8001590:	6921      	ldr	r1, [r4, #16]
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	b151      	cbz	r1, 80015ac <_sungetc_r+0x60>
 8001596:	4299      	cmp	r1, r3
 8001598:	d208      	bcs.n	80015ac <_sungetc_r+0x60>
 800159a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800159e:	42a9      	cmp	r1, r5
 80015a0:	d104      	bne.n	80015ac <_sungetc_r+0x60>
 80015a2:	3b01      	subs	r3, #1
 80015a4:	3201      	adds	r2, #1
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	6062      	str	r2, [r4, #4]
 80015aa:	e7d5      	b.n	8001558 <_sungetc_r+0xc>
 80015ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80015b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80015b6:	2303      	movs	r3, #3
 80015b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80015ba:	4623      	mov	r3, r4
 80015bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80015c0:	6023      	str	r3, [r4, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	e7dc      	b.n	8001580 <_sungetc_r+0x34>

080015c6 <__ssrefill_r>:
 80015c6:	b510      	push	{r4, lr}
 80015c8:	460c      	mov	r4, r1
 80015ca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80015cc:	b169      	cbz	r1, 80015ea <__ssrefill_r+0x24>
 80015ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015d2:	4299      	cmp	r1, r3
 80015d4:	d001      	beq.n	80015da <__ssrefill_r+0x14>
 80015d6:	f7ff fe17 	bl	8001208 <_free_r>
 80015da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	2000      	movs	r0, #0
 80015e0:	6360      	str	r0, [r4, #52]	@ 0x34
 80015e2:	b113      	cbz	r3, 80015ea <__ssrefill_r+0x24>
 80015e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80015e6:	6023      	str	r3, [r4, #0]
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	6923      	ldr	r3, [r4, #16]
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	6063      	str	r3, [r4, #4]
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	81a3      	strh	r3, [r4, #12]
 80015fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015fe:	e7f3      	b.n	80015e8 <__ssrefill_r+0x22>

08001600 <__ssvfiscanf_r>:
 8001600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001604:	460c      	mov	r4, r1
 8001606:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800160a:	2100      	movs	r1, #0
 800160c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8001610:	49a6      	ldr	r1, [pc, #664]	@ (80018ac <__ssvfiscanf_r+0x2ac>)
 8001612:	91a0      	str	r1, [sp, #640]	@ 0x280
 8001614:	f10d 0804 	add.w	r8, sp, #4
 8001618:	49a5      	ldr	r1, [pc, #660]	@ (80018b0 <__ssvfiscanf_r+0x2b0>)
 800161a:	4fa6      	ldr	r7, [pc, #664]	@ (80018b4 <__ssvfiscanf_r+0x2b4>)
 800161c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8001620:	4606      	mov	r6, r0
 8001622:	91a1      	str	r1, [sp, #644]	@ 0x284
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	f892 9000 	ldrb.w	r9, [r2]
 800162a:	f1b9 0f00 	cmp.w	r9, #0
 800162e:	f000 8158 	beq.w	80018e2 <__ssvfiscanf_r+0x2e2>
 8001632:	f817 3009 	ldrb.w	r3, [r7, r9]
 8001636:	f013 0308 	ands.w	r3, r3, #8
 800163a:	f102 0501 	add.w	r5, r2, #1
 800163e:	d019      	beq.n	8001674 <__ssvfiscanf_r+0x74>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	dd0f      	ble.n	8001666 <__ssvfiscanf_r+0x66>
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	5cba      	ldrb	r2, [r7, r2]
 800164c:	0712      	lsls	r2, r2, #28
 800164e:	d401      	bmi.n	8001654 <__ssvfiscanf_r+0x54>
 8001650:	462a      	mov	r2, r5
 8001652:	e7e8      	b.n	8001626 <__ssvfiscanf_r+0x26>
 8001654:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001656:	3201      	adds	r2, #1
 8001658:	9245      	str	r2, [sp, #276]	@ 0x114
 800165a:	6862      	ldr	r2, [r4, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	3a01      	subs	r2, #1
 8001660:	6062      	str	r2, [r4, #4]
 8001662:	6023      	str	r3, [r4, #0]
 8001664:	e7ec      	b.n	8001640 <__ssvfiscanf_r+0x40>
 8001666:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001668:	4621      	mov	r1, r4
 800166a:	4630      	mov	r0, r6
 800166c:	4798      	blx	r3
 800166e:	2800      	cmp	r0, #0
 8001670:	d0e9      	beq.n	8001646 <__ssvfiscanf_r+0x46>
 8001672:	e7ed      	b.n	8001650 <__ssvfiscanf_r+0x50>
 8001674:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8001678:	f040 8085 	bne.w	8001786 <__ssvfiscanf_r+0x186>
 800167c:	9341      	str	r3, [sp, #260]	@ 0x104
 800167e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8001680:	7853      	ldrb	r3, [r2, #1]
 8001682:	2b2a      	cmp	r3, #42	@ 0x2a
 8001684:	bf02      	ittt	eq
 8001686:	2310      	moveq	r3, #16
 8001688:	1c95      	addeq	r5, r2, #2
 800168a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800168c:	220a      	movs	r2, #10
 800168e:	46aa      	mov	sl, r5
 8001690:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001694:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8001698:	2b09      	cmp	r3, #9
 800169a:	d91e      	bls.n	80016da <__ssvfiscanf_r+0xda>
 800169c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80018b8 <__ssvfiscanf_r+0x2b8>
 80016a0:	2203      	movs	r2, #3
 80016a2:	4658      	mov	r0, fp
 80016a4:	f7fe fdb4 	bl	8000210 <memchr>
 80016a8:	b138      	cbz	r0, 80016ba <__ssvfiscanf_r+0xba>
 80016aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80016ac:	eba0 000b 	sub.w	r0, r0, fp
 80016b0:	2301      	movs	r3, #1
 80016b2:	4083      	lsls	r3, r0
 80016b4:	4313      	orrs	r3, r2
 80016b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80016b8:	4655      	mov	r5, sl
 80016ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80016be:	2b78      	cmp	r3, #120	@ 0x78
 80016c0:	d806      	bhi.n	80016d0 <__ssvfiscanf_r+0xd0>
 80016c2:	2b57      	cmp	r3, #87	@ 0x57
 80016c4:	d810      	bhi.n	80016e8 <__ssvfiscanf_r+0xe8>
 80016c6:	2b25      	cmp	r3, #37	@ 0x25
 80016c8:	d05d      	beq.n	8001786 <__ssvfiscanf_r+0x186>
 80016ca:	d857      	bhi.n	800177c <__ssvfiscanf_r+0x17c>
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d075      	beq.n	80017bc <__ssvfiscanf_r+0x1bc>
 80016d0:	2303      	movs	r3, #3
 80016d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80016d4:	230a      	movs	r3, #10
 80016d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80016d8:	e088      	b.n	80017ec <__ssvfiscanf_r+0x1ec>
 80016da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80016dc:	fb02 1103 	mla	r1, r2, r3, r1
 80016e0:	3930      	subs	r1, #48	@ 0x30
 80016e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80016e4:	4655      	mov	r5, sl
 80016e6:	e7d2      	b.n	800168e <__ssvfiscanf_r+0x8e>
 80016e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80016ec:	2a20      	cmp	r2, #32
 80016ee:	d8ef      	bhi.n	80016d0 <__ssvfiscanf_r+0xd0>
 80016f0:	a101      	add	r1, pc, #4	@ (adr r1, 80016f8 <__ssvfiscanf_r+0xf8>)
 80016f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	080017cb 	.word	0x080017cb
 80016fc:	080016d1 	.word	0x080016d1
 8001700:	080016d1 	.word	0x080016d1
 8001704:	08001825 	.word	0x08001825
 8001708:	080016d1 	.word	0x080016d1
 800170c:	080016d1 	.word	0x080016d1
 8001710:	080016d1 	.word	0x080016d1
 8001714:	080016d1 	.word	0x080016d1
 8001718:	080016d1 	.word	0x080016d1
 800171c:	080016d1 	.word	0x080016d1
 8001720:	080016d1 	.word	0x080016d1
 8001724:	0800183b 	.word	0x0800183b
 8001728:	08001821 	.word	0x08001821
 800172c:	08001783 	.word	0x08001783
 8001730:	08001783 	.word	0x08001783
 8001734:	08001783 	.word	0x08001783
 8001738:	080016d1 	.word	0x080016d1
 800173c:	080017dd 	.word	0x080017dd
 8001740:	080016d1 	.word	0x080016d1
 8001744:	080016d1 	.word	0x080016d1
 8001748:	080016d1 	.word	0x080016d1
 800174c:	080016d1 	.word	0x080016d1
 8001750:	0800184b 	.word	0x0800184b
 8001754:	080017e5 	.word	0x080017e5
 8001758:	080017c3 	.word	0x080017c3
 800175c:	080016d1 	.word	0x080016d1
 8001760:	080016d1 	.word	0x080016d1
 8001764:	08001847 	.word	0x08001847
 8001768:	080016d1 	.word	0x080016d1
 800176c:	08001821 	.word	0x08001821
 8001770:	080016d1 	.word	0x080016d1
 8001774:	080016d1 	.word	0x080016d1
 8001778:	080017cb 	.word	0x080017cb
 800177c:	3b45      	subs	r3, #69	@ 0x45
 800177e:	2b02      	cmp	r3, #2
 8001780:	d8a6      	bhi.n	80016d0 <__ssvfiscanf_r+0xd0>
 8001782:	2305      	movs	r3, #5
 8001784:	e031      	b.n	80017ea <__ssvfiscanf_r+0x1ea>
 8001786:	6863      	ldr	r3, [r4, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd0d      	ble.n	80017a8 <__ssvfiscanf_r+0x1a8>
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	454a      	cmp	r2, r9
 8001792:	f040 80a6 	bne.w	80018e2 <__ssvfiscanf_r+0x2e2>
 8001796:	3301      	adds	r3, #1
 8001798:	6862      	ldr	r2, [r4, #4]
 800179a:	6023      	str	r3, [r4, #0]
 800179c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800179e:	3a01      	subs	r2, #1
 80017a0:	3301      	adds	r3, #1
 80017a2:	6062      	str	r2, [r4, #4]
 80017a4:	9345      	str	r3, [sp, #276]	@ 0x114
 80017a6:	e753      	b.n	8001650 <__ssvfiscanf_r+0x50>
 80017a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80017aa:	4621      	mov	r1, r4
 80017ac:	4630      	mov	r0, r6
 80017ae:	4798      	blx	r3
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d0eb      	beq.n	800178c <__ssvfiscanf_r+0x18c>
 80017b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80017b6:	2800      	cmp	r0, #0
 80017b8:	f040 808b 	bne.w	80018d2 <__ssvfiscanf_r+0x2d2>
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017c0:	e08b      	b.n	80018da <__ssvfiscanf_r+0x2da>
 80017c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80017c4:	f042 0220 	orr.w	r2, r2, #32
 80017c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80017ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80017cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80017d2:	2210      	movs	r2, #16
 80017d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80017d6:	9242      	str	r2, [sp, #264]	@ 0x108
 80017d8:	d902      	bls.n	80017e0 <__ssvfiscanf_r+0x1e0>
 80017da:	e005      	b.n	80017e8 <__ssvfiscanf_r+0x1e8>
 80017dc:	2300      	movs	r3, #0
 80017de:	9342      	str	r3, [sp, #264]	@ 0x108
 80017e0:	2303      	movs	r3, #3
 80017e2:	e002      	b.n	80017ea <__ssvfiscanf_r+0x1ea>
 80017e4:	2308      	movs	r3, #8
 80017e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80017e8:	2304      	movs	r3, #4
 80017ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dd39      	ble.n	8001866 <__ssvfiscanf_r+0x266>
 80017f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80017f4:	0659      	lsls	r1, r3, #25
 80017f6:	d404      	bmi.n	8001802 <__ssvfiscanf_r+0x202>
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	5cba      	ldrb	r2, [r7, r2]
 80017fe:	0712      	lsls	r2, r2, #28
 8001800:	d438      	bmi.n	8001874 <__ssvfiscanf_r+0x274>
 8001802:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001804:	2b02      	cmp	r3, #2
 8001806:	dc47      	bgt.n	8001898 <__ssvfiscanf_r+0x298>
 8001808:	466b      	mov	r3, sp
 800180a:	4622      	mov	r2, r4
 800180c:	a941      	add	r1, sp, #260	@ 0x104
 800180e:	4630      	mov	r0, r6
 8001810:	f000 fbdc 	bl	8001fcc <_scanf_chars>
 8001814:	2801      	cmp	r0, #1
 8001816:	d064      	beq.n	80018e2 <__ssvfiscanf_r+0x2e2>
 8001818:	2802      	cmp	r0, #2
 800181a:	f47f af19 	bne.w	8001650 <__ssvfiscanf_r+0x50>
 800181e:	e7c9      	b.n	80017b4 <__ssvfiscanf_r+0x1b4>
 8001820:	220a      	movs	r2, #10
 8001822:	e7d7      	b.n	80017d4 <__ssvfiscanf_r+0x1d4>
 8001824:	4629      	mov	r1, r5
 8001826:	4640      	mov	r0, r8
 8001828:	f000 fd1e 	bl	8002268 <__sccl>
 800182c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800182e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001832:	9341      	str	r3, [sp, #260]	@ 0x104
 8001834:	4605      	mov	r5, r0
 8001836:	2301      	movs	r3, #1
 8001838:	e7d7      	b.n	80017ea <__ssvfiscanf_r+0x1ea>
 800183a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800183c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001840:	9341      	str	r3, [sp, #260]	@ 0x104
 8001842:	2300      	movs	r3, #0
 8001844:	e7d1      	b.n	80017ea <__ssvfiscanf_r+0x1ea>
 8001846:	2302      	movs	r3, #2
 8001848:	e7cf      	b.n	80017ea <__ssvfiscanf_r+0x1ea>
 800184a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800184c:	06c3      	lsls	r3, r0, #27
 800184e:	f53f aeff 	bmi.w	8001650 <__ssvfiscanf_r+0x50>
 8001852:	9b00      	ldr	r3, [sp, #0]
 8001854:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001856:	1d19      	adds	r1, r3, #4
 8001858:	9100      	str	r1, [sp, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	07c0      	lsls	r0, r0, #31
 800185e:	bf4c      	ite	mi
 8001860:	801a      	strhmi	r2, [r3, #0]
 8001862:	601a      	strpl	r2, [r3, #0]
 8001864:	e6f4      	b.n	8001650 <__ssvfiscanf_r+0x50>
 8001866:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001868:	4621      	mov	r1, r4
 800186a:	4630      	mov	r0, r6
 800186c:	4798      	blx	r3
 800186e:	2800      	cmp	r0, #0
 8001870:	d0bf      	beq.n	80017f2 <__ssvfiscanf_r+0x1f2>
 8001872:	e79f      	b.n	80017b4 <__ssvfiscanf_r+0x1b4>
 8001874:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001876:	3201      	adds	r2, #1
 8001878:	9245      	str	r2, [sp, #276]	@ 0x114
 800187a:	6862      	ldr	r2, [r4, #4]
 800187c:	3a01      	subs	r2, #1
 800187e:	2a00      	cmp	r2, #0
 8001880:	6062      	str	r2, [r4, #4]
 8001882:	dd02      	ble.n	800188a <__ssvfiscanf_r+0x28a>
 8001884:	3301      	adds	r3, #1
 8001886:	6023      	str	r3, [r4, #0]
 8001888:	e7b6      	b.n	80017f8 <__ssvfiscanf_r+0x1f8>
 800188a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800188c:	4621      	mov	r1, r4
 800188e:	4630      	mov	r0, r6
 8001890:	4798      	blx	r3
 8001892:	2800      	cmp	r0, #0
 8001894:	d0b0      	beq.n	80017f8 <__ssvfiscanf_r+0x1f8>
 8001896:	e78d      	b.n	80017b4 <__ssvfiscanf_r+0x1b4>
 8001898:	2b04      	cmp	r3, #4
 800189a:	dc0f      	bgt.n	80018bc <__ssvfiscanf_r+0x2bc>
 800189c:	466b      	mov	r3, sp
 800189e:	4622      	mov	r2, r4
 80018a0:	a941      	add	r1, sp, #260	@ 0x104
 80018a2:	4630      	mov	r0, r6
 80018a4:	f000 fbec 	bl	8002080 <_scanf_i>
 80018a8:	e7b4      	b.n	8001814 <__ssvfiscanf_r+0x214>
 80018aa:	bf00      	nop
 80018ac:	0800154d 	.word	0x0800154d
 80018b0:	080015c7 	.word	0x080015c7
 80018b4:	080029c5 	.word	0x080029c5
 80018b8:	08002acb 	.word	0x08002acb
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <__ssvfiscanf_r+0x2e8>)
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f43f aec6 	beq.w	8001650 <__ssvfiscanf_r+0x50>
 80018c4:	466b      	mov	r3, sp
 80018c6:	4622      	mov	r2, r4
 80018c8:	a941      	add	r1, sp, #260	@ 0x104
 80018ca:	4630      	mov	r0, r6
 80018cc:	f3af 8000 	nop.w
 80018d0:	e7a0      	b.n	8001814 <__ssvfiscanf_r+0x214>
 80018d2:	89a3      	ldrh	r3, [r4, #12]
 80018d4:	065b      	lsls	r3, r3, #25
 80018d6:	f53f af71 	bmi.w	80017bc <__ssvfiscanf_r+0x1bc>
 80018da:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80018de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80018e4:	e7f9      	b.n	80018da <__ssvfiscanf_r+0x2da>
 80018e6:	bf00      	nop
 80018e8:	00000000 	.word	0x00000000

080018ec <__sfputc_r>:
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	b410      	push	{r4}
 80018f4:	6093      	str	r3, [r2, #8]
 80018f6:	da08      	bge.n	800190a <__sfputc_r+0x1e>
 80018f8:	6994      	ldr	r4, [r2, #24]
 80018fa:	42a3      	cmp	r3, r4
 80018fc:	db01      	blt.n	8001902 <__sfputc_r+0x16>
 80018fe:	290a      	cmp	r1, #10
 8001900:	d103      	bne.n	800190a <__sfputc_r+0x1e>
 8001902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001906:	f000 be09 	b.w	800251c <__swbuf_r>
 800190a:	6813      	ldr	r3, [r2, #0]
 800190c:	1c58      	adds	r0, r3, #1
 800190e:	6010      	str	r0, [r2, #0]
 8001910:	7019      	strb	r1, [r3, #0]
 8001912:	4608      	mov	r0, r1
 8001914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001918:	4770      	bx	lr

0800191a <__sfputs_r>:
 800191a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191c:	4606      	mov	r6, r0
 800191e:	460f      	mov	r7, r1
 8001920:	4614      	mov	r4, r2
 8001922:	18d5      	adds	r5, r2, r3
 8001924:	42ac      	cmp	r4, r5
 8001926:	d101      	bne.n	800192c <__sfputs_r+0x12>
 8001928:	2000      	movs	r0, #0
 800192a:	e007      	b.n	800193c <__sfputs_r+0x22>
 800192c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001930:	463a      	mov	r2, r7
 8001932:	4630      	mov	r0, r6
 8001934:	f7ff ffda 	bl	80018ec <__sfputc_r>
 8001938:	1c43      	adds	r3, r0, #1
 800193a:	d1f3      	bne.n	8001924 <__sfputs_r+0xa>
 800193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001940 <_vfiprintf_r>:
 8001940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001944:	460d      	mov	r5, r1
 8001946:	b09d      	sub	sp, #116	@ 0x74
 8001948:	4614      	mov	r4, r2
 800194a:	4698      	mov	r8, r3
 800194c:	4606      	mov	r6, r0
 800194e:	b118      	cbz	r0, 8001958 <_vfiprintf_r+0x18>
 8001950:	6a03      	ldr	r3, [r0, #32]
 8001952:	b90b      	cbnz	r3, 8001958 <_vfiprintf_r+0x18>
 8001954:	f7ff fb0e 	bl	8000f74 <__sinit>
 8001958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800195a:	07d9      	lsls	r1, r3, #31
 800195c:	d405      	bmi.n	800196a <_vfiprintf_r+0x2a>
 800195e:	89ab      	ldrh	r3, [r5, #12]
 8001960:	059a      	lsls	r2, r3, #22
 8001962:	d402      	bmi.n	800196a <_vfiprintf_r+0x2a>
 8001964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001966:	f7ff fc3c 	bl	80011e2 <__retarget_lock_acquire_recursive>
 800196a:	89ab      	ldrh	r3, [r5, #12]
 800196c:	071b      	lsls	r3, r3, #28
 800196e:	d501      	bpl.n	8001974 <_vfiprintf_r+0x34>
 8001970:	692b      	ldr	r3, [r5, #16]
 8001972:	b99b      	cbnz	r3, 800199c <_vfiprintf_r+0x5c>
 8001974:	4629      	mov	r1, r5
 8001976:	4630      	mov	r0, r6
 8001978:	f000 fe7e 	bl	8002678 <__swsetup_r>
 800197c:	b170      	cbz	r0, 800199c <_vfiprintf_r+0x5c>
 800197e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001980:	07dc      	lsls	r4, r3, #31
 8001982:	d504      	bpl.n	800198e <_vfiprintf_r+0x4e>
 8001984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001988:	b01d      	add	sp, #116	@ 0x74
 800198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800198e:	89ab      	ldrh	r3, [r5, #12]
 8001990:	0598      	lsls	r0, r3, #22
 8001992:	d4f7      	bmi.n	8001984 <_vfiprintf_r+0x44>
 8001994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001996:	f7ff fc25 	bl	80011e4 <__retarget_lock_release_recursive>
 800199a:	e7f3      	b.n	8001984 <_vfiprintf_r+0x44>
 800199c:	2300      	movs	r3, #0
 800199e:	9309      	str	r3, [sp, #36]	@ 0x24
 80019a0:	2320      	movs	r3, #32
 80019a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80019aa:	2330      	movs	r3, #48	@ 0x30
 80019ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b5c <_vfiprintf_r+0x21c>
 80019b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019b4:	f04f 0901 	mov.w	r9, #1
 80019b8:	4623      	mov	r3, r4
 80019ba:	469a      	mov	sl, r3
 80019bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019c0:	b10a      	cbz	r2, 80019c6 <_vfiprintf_r+0x86>
 80019c2:	2a25      	cmp	r2, #37	@ 0x25
 80019c4:	d1f9      	bne.n	80019ba <_vfiprintf_r+0x7a>
 80019c6:	ebba 0b04 	subs.w	fp, sl, r4
 80019ca:	d00b      	beq.n	80019e4 <_vfiprintf_r+0xa4>
 80019cc:	465b      	mov	r3, fp
 80019ce:	4622      	mov	r2, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	4630      	mov	r0, r6
 80019d4:	f7ff ffa1 	bl	800191a <__sfputs_r>
 80019d8:	3001      	adds	r0, #1
 80019da:	f000 80a7 	beq.w	8001b2c <_vfiprintf_r+0x1ec>
 80019de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019e0:	445a      	add	r2, fp
 80019e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80019e4:	f89a 3000 	ldrb.w	r3, [sl]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 809f 	beq.w	8001b2c <_vfiprintf_r+0x1ec>
 80019ee:	2300      	movs	r3, #0
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019f8:	f10a 0a01 	add.w	sl, sl, #1
 80019fc:	9304      	str	r3, [sp, #16]
 80019fe:	9307      	str	r3, [sp, #28]
 8001a00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a06:	4654      	mov	r4, sl
 8001a08:	2205      	movs	r2, #5
 8001a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a0e:	4853      	ldr	r0, [pc, #332]	@ (8001b5c <_vfiprintf_r+0x21c>)
 8001a10:	f7fe fbfe 	bl	8000210 <memchr>
 8001a14:	9a04      	ldr	r2, [sp, #16]
 8001a16:	b9d8      	cbnz	r0, 8001a50 <_vfiprintf_r+0x110>
 8001a18:	06d1      	lsls	r1, r2, #27
 8001a1a:	bf44      	itt	mi
 8001a1c:	2320      	movmi	r3, #32
 8001a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a22:	0713      	lsls	r3, r2, #28
 8001a24:	bf44      	itt	mi
 8001a26:	232b      	movmi	r3, #43	@ 0x2b
 8001a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a32:	d015      	beq.n	8001a60 <_vfiprintf_r+0x120>
 8001a34:	9a07      	ldr	r2, [sp, #28]
 8001a36:	4654      	mov	r4, sl
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f04f 0c0a 	mov.w	ip, #10
 8001a3e:	4621      	mov	r1, r4
 8001a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a44:	3b30      	subs	r3, #48	@ 0x30
 8001a46:	2b09      	cmp	r3, #9
 8001a48:	d94b      	bls.n	8001ae2 <_vfiprintf_r+0x1a2>
 8001a4a:	b1b0      	cbz	r0, 8001a7a <_vfiprintf_r+0x13a>
 8001a4c:	9207      	str	r2, [sp, #28]
 8001a4e:	e014      	b.n	8001a7a <_vfiprintf_r+0x13a>
 8001a50:	eba0 0308 	sub.w	r3, r0, r8
 8001a54:	fa09 f303 	lsl.w	r3, r9, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	9304      	str	r3, [sp, #16]
 8001a5c:	46a2      	mov	sl, r4
 8001a5e:	e7d2      	b.n	8001a06 <_vfiprintf_r+0xc6>
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	1d19      	adds	r1, r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	9103      	str	r1, [sp, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bfbb      	ittet	lt
 8001a6c:	425b      	neglt	r3, r3
 8001a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8001a72:	9307      	strge	r3, [sp, #28]
 8001a74:	9307      	strlt	r3, [sp, #28]
 8001a76:	bfb8      	it	lt
 8001a78:	9204      	strlt	r2, [sp, #16]
 8001a7a:	7823      	ldrb	r3, [r4, #0]
 8001a7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a7e:	d10a      	bne.n	8001a96 <_vfiprintf_r+0x156>
 8001a80:	7863      	ldrb	r3, [r4, #1]
 8001a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a84:	d132      	bne.n	8001aec <_vfiprintf_r+0x1ac>
 8001a86:	9b03      	ldr	r3, [sp, #12]
 8001a88:	1d1a      	adds	r2, r3, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	9203      	str	r2, [sp, #12]
 8001a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a92:	3402      	adds	r4, #2
 8001a94:	9305      	str	r3, [sp, #20]
 8001a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b6c <_vfiprintf_r+0x22c>
 8001a9a:	7821      	ldrb	r1, [r4, #0]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4650      	mov	r0, sl
 8001aa0:	f7fe fbb6 	bl	8000210 <memchr>
 8001aa4:	b138      	cbz	r0, 8001ab6 <_vfiprintf_r+0x176>
 8001aa6:	9b04      	ldr	r3, [sp, #16]
 8001aa8:	eba0 000a 	sub.w	r0, r0, sl
 8001aac:	2240      	movs	r2, #64	@ 0x40
 8001aae:	4082      	lsls	r2, r0
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	3401      	adds	r4, #1
 8001ab4:	9304      	str	r3, [sp, #16]
 8001ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001aba:	4829      	ldr	r0, [pc, #164]	@ (8001b60 <_vfiprintf_r+0x220>)
 8001abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	f7fe fba5 	bl	8000210 <memchr>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d03f      	beq.n	8001b4a <_vfiprintf_r+0x20a>
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <_vfiprintf_r+0x224>)
 8001acc:	bb1b      	cbnz	r3, 8001b16 <_vfiprintf_r+0x1d6>
 8001ace:	9b03      	ldr	r3, [sp, #12]
 8001ad0:	3307      	adds	r3, #7
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	9303      	str	r3, [sp, #12]
 8001ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001adc:	443b      	add	r3, r7
 8001ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ae0:	e76a      	b.n	80019b8 <_vfiprintf_r+0x78>
 8001ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	2001      	movs	r0, #1
 8001aea:	e7a8      	b.n	8001a3e <_vfiprintf_r+0xfe>
 8001aec:	2300      	movs	r3, #0
 8001aee:	3401      	adds	r4, #1
 8001af0:	9305      	str	r3, [sp, #20]
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0c0a 	mov.w	ip, #10
 8001af8:	4620      	mov	r0, r4
 8001afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001afe:	3a30      	subs	r2, #48	@ 0x30
 8001b00:	2a09      	cmp	r2, #9
 8001b02:	d903      	bls.n	8001b0c <_vfiprintf_r+0x1cc>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0c6      	beq.n	8001a96 <_vfiprintf_r+0x156>
 8001b08:	9105      	str	r1, [sp, #20]
 8001b0a:	e7c4      	b.n	8001a96 <_vfiprintf_r+0x156>
 8001b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b10:	4604      	mov	r4, r0
 8001b12:	2301      	movs	r3, #1
 8001b14:	e7f0      	b.n	8001af8 <_vfiprintf_r+0x1b8>
 8001b16:	ab03      	add	r3, sp, #12
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	462a      	mov	r2, r5
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <_vfiprintf_r+0x228>)
 8001b1e:	a904      	add	r1, sp, #16
 8001b20:	4630      	mov	r0, r6
 8001b22:	f3af 8000 	nop.w
 8001b26:	4607      	mov	r7, r0
 8001b28:	1c78      	adds	r0, r7, #1
 8001b2a:	d1d6      	bne.n	8001ada <_vfiprintf_r+0x19a>
 8001b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b2e:	07d9      	lsls	r1, r3, #31
 8001b30:	d405      	bmi.n	8001b3e <_vfiprintf_r+0x1fe>
 8001b32:	89ab      	ldrh	r3, [r5, #12]
 8001b34:	059a      	lsls	r2, r3, #22
 8001b36:	d402      	bmi.n	8001b3e <_vfiprintf_r+0x1fe>
 8001b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b3a:	f7ff fb53 	bl	80011e4 <__retarget_lock_release_recursive>
 8001b3e:	89ab      	ldrh	r3, [r5, #12]
 8001b40:	065b      	lsls	r3, r3, #25
 8001b42:	f53f af1f 	bmi.w	8001984 <_vfiprintf_r+0x44>
 8001b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b48:	e71e      	b.n	8001988 <_vfiprintf_r+0x48>
 8001b4a:	ab03      	add	r3, sp, #12
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	462a      	mov	r2, r5
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <_vfiprintf_r+0x228>)
 8001b52:	a904      	add	r1, sp, #16
 8001b54:	4630      	mov	r0, r6
 8001b56:	f000 f91b 	bl	8001d90 <_printf_i>
 8001b5a:	e7e4      	b.n	8001b26 <_vfiprintf_r+0x1e6>
 8001b5c:	08002ac5 	.word	0x08002ac5
 8001b60:	08002acf 	.word	0x08002acf
 8001b64:	00000000 	.word	0x00000000
 8001b68:	0800191b 	.word	0x0800191b
 8001b6c:	08002acb 	.word	0x08002acb

08001b70 <sbrk_aligned>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4e0f      	ldr	r6, [pc, #60]	@ (8001bb0 <sbrk_aligned+0x40>)
 8001b74:	460c      	mov	r4, r1
 8001b76:	6831      	ldr	r1, [r6, #0]
 8001b78:	4605      	mov	r5, r0
 8001b7a:	b911      	cbnz	r1, 8001b82 <sbrk_aligned+0x12>
 8001b7c:	f000 fe5e 	bl	800283c <_sbrk_r>
 8001b80:	6030      	str	r0, [r6, #0]
 8001b82:	4621      	mov	r1, r4
 8001b84:	4628      	mov	r0, r5
 8001b86:	f000 fe59 	bl	800283c <_sbrk_r>
 8001b8a:	1c43      	adds	r3, r0, #1
 8001b8c:	d103      	bne.n	8001b96 <sbrk_aligned+0x26>
 8001b8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b92:	4620      	mov	r0, r4
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	1cc4      	adds	r4, r0, #3
 8001b98:	f024 0403 	bic.w	r4, r4, #3
 8001b9c:	42a0      	cmp	r0, r4
 8001b9e:	d0f8      	beq.n	8001b92 <sbrk_aligned+0x22>
 8001ba0:	1a21      	subs	r1, r4, r0
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 fe4a 	bl	800283c <_sbrk_r>
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d1f2      	bne.n	8001b92 <sbrk_aligned+0x22>
 8001bac:	e7ef      	b.n	8001b8e <sbrk_aligned+0x1e>
 8001bae:	bf00      	nop
 8001bb0:	20000360 	.word	0x20000360

08001bb4 <_malloc_r>:
 8001bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bb8:	1ccd      	adds	r5, r1, #3
 8001bba:	f025 0503 	bic.w	r5, r5, #3
 8001bbe:	3508      	adds	r5, #8
 8001bc0:	2d0c      	cmp	r5, #12
 8001bc2:	bf38      	it	cc
 8001bc4:	250c      	movcc	r5, #12
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	4606      	mov	r6, r0
 8001bca:	db01      	blt.n	8001bd0 <_malloc_r+0x1c>
 8001bcc:	42a9      	cmp	r1, r5
 8001bce:	d904      	bls.n	8001bda <_malloc_r+0x26>
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	6033      	str	r3, [r6, #0]
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cb0 <_malloc_r+0xfc>
 8001bde:	f000 fc29 	bl	8002434 <__malloc_lock>
 8001be2:	f8d8 3000 	ldr.w	r3, [r8]
 8001be6:	461c      	mov	r4, r3
 8001be8:	bb44      	cbnz	r4, 8001c3c <_malloc_r+0x88>
 8001bea:	4629      	mov	r1, r5
 8001bec:	4630      	mov	r0, r6
 8001bee:	f7ff ffbf 	bl	8001b70 <sbrk_aligned>
 8001bf2:	1c43      	adds	r3, r0, #1
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	d158      	bne.n	8001caa <_malloc_r+0xf6>
 8001bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8001bfc:	4627      	mov	r7, r4
 8001bfe:	2f00      	cmp	r7, #0
 8001c00:	d143      	bne.n	8001c8a <_malloc_r+0xd6>
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d04b      	beq.n	8001c9e <_malloc_r+0xea>
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	4639      	mov	r1, r7
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	eb04 0903 	add.w	r9, r4, r3
 8001c10:	f000 fe14 	bl	800283c <_sbrk_r>
 8001c14:	4581      	cmp	r9, r0
 8001c16:	d142      	bne.n	8001c9e <_malloc_r+0xea>
 8001c18:	6821      	ldr	r1, [r4, #0]
 8001c1a:	1a6d      	subs	r5, r5, r1
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f7ff ffa6 	bl	8001b70 <sbrk_aligned>
 8001c24:	3001      	adds	r0, #1
 8001c26:	d03a      	beq.n	8001c9e <_malloc_r+0xea>
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	442b      	add	r3, r5
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	bb62      	cbnz	r2, 8001c90 <_malloc_r+0xdc>
 8001c36:	f8c8 7000 	str.w	r7, [r8]
 8001c3a:	e00f      	b.n	8001c5c <_malloc_r+0xa8>
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	1b52      	subs	r2, r2, r5
 8001c40:	d420      	bmi.n	8001c84 <_malloc_r+0xd0>
 8001c42:	2a0b      	cmp	r2, #11
 8001c44:	d917      	bls.n	8001c76 <_malloc_r+0xc2>
 8001c46:	1961      	adds	r1, r4, r5
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	6025      	str	r5, [r4, #0]
 8001c4c:	bf18      	it	ne
 8001c4e:	6059      	strne	r1, [r3, #4]
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	bf08      	it	eq
 8001c54:	f8c8 1000 	streq.w	r1, [r8]
 8001c58:	5162      	str	r2, [r4, r5]
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f000 fbef 	bl	8002440 <__malloc_unlock>
 8001c62:	f104 000b 	add.w	r0, r4, #11
 8001c66:	1d23      	adds	r3, r4, #4
 8001c68:	f020 0007 	bic.w	r0, r0, #7
 8001c6c:	1ac2      	subs	r2, r0, r3
 8001c6e:	bf1c      	itt	ne
 8001c70:	1a1b      	subne	r3, r3, r0
 8001c72:	50a3      	strne	r3, [r4, r2]
 8001c74:	e7af      	b.n	8001bd6 <_malloc_r+0x22>
 8001c76:	6862      	ldr	r2, [r4, #4]
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	bf0c      	ite	eq
 8001c7c:	f8c8 2000 	streq.w	r2, [r8]
 8001c80:	605a      	strne	r2, [r3, #4]
 8001c82:	e7eb      	b.n	8001c5c <_malloc_r+0xa8>
 8001c84:	4623      	mov	r3, r4
 8001c86:	6864      	ldr	r4, [r4, #4]
 8001c88:	e7ae      	b.n	8001be8 <_malloc_r+0x34>
 8001c8a:	463c      	mov	r4, r7
 8001c8c:	687f      	ldr	r7, [r7, #4]
 8001c8e:	e7b6      	b.n	8001bfe <_malloc_r+0x4a>
 8001c90:	461a      	mov	r2, r3
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	42a3      	cmp	r3, r4
 8001c96:	d1fb      	bne.n	8001c90 <_malloc_r+0xdc>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6053      	str	r3, [r2, #4]
 8001c9c:	e7de      	b.n	8001c5c <_malloc_r+0xa8>
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	6033      	str	r3, [r6, #0]
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f000 fbcc 	bl	8002440 <__malloc_unlock>
 8001ca8:	e794      	b.n	8001bd4 <_malloc_r+0x20>
 8001caa:	6005      	str	r5, [r0, #0]
 8001cac:	e7d6      	b.n	8001c5c <_malloc_r+0xa8>
 8001cae:	bf00      	nop
 8001cb0:	20000364 	.word	0x20000364

08001cb4 <_printf_common>:
 8001cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb8:	4616      	mov	r6, r2
 8001cba:	4698      	mov	r8, r3
 8001cbc:	688a      	ldr	r2, [r1, #8]
 8001cbe:	690b      	ldr	r3, [r1, #16]
 8001cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bfb8      	it	lt
 8001cc8:	4613      	movlt	r3, r2
 8001cca:	6033      	str	r3, [r6, #0]
 8001ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cd0:	4607      	mov	r7, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	b10a      	cbz	r2, 8001cda <_printf_common+0x26>
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	6033      	str	r3, [r6, #0]
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	0699      	lsls	r1, r3, #26
 8001cde:	bf42      	ittt	mi
 8001ce0:	6833      	ldrmi	r3, [r6, #0]
 8001ce2:	3302      	addmi	r3, #2
 8001ce4:	6033      	strmi	r3, [r6, #0]
 8001ce6:	6825      	ldr	r5, [r4, #0]
 8001ce8:	f015 0506 	ands.w	r5, r5, #6
 8001cec:	d106      	bne.n	8001cfc <_printf_common+0x48>
 8001cee:	f104 0a19 	add.w	sl, r4, #25
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	6832      	ldr	r2, [r6, #0]
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	dc26      	bgt.n	8001d4a <_printf_common+0x96>
 8001cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	3b00      	subs	r3, #0
 8001d04:	bf18      	it	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	0692      	lsls	r2, r2, #26
 8001d0a:	d42b      	bmi.n	8001d64 <_printf_common+0xb0>
 8001d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d10:	4641      	mov	r1, r8
 8001d12:	4638      	mov	r0, r7
 8001d14:	47c8      	blx	r9
 8001d16:	3001      	adds	r0, #1
 8001d18:	d01e      	beq.n	8001d58 <_printf_common+0xa4>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	6922      	ldr	r2, [r4, #16]
 8001d1e:	f003 0306 	and.w	r3, r3, #6
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf02      	ittt	eq
 8001d26:	68e5      	ldreq	r5, [r4, #12]
 8001d28:	6833      	ldreq	r3, [r6, #0]
 8001d2a:	1aed      	subeq	r5, r5, r3
 8001d2c:	68a3      	ldr	r3, [r4, #8]
 8001d2e:	bf0c      	ite	eq
 8001d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d34:	2500      	movne	r5, #0
 8001d36:	4293      	cmp	r3, r2
 8001d38:	bfc4      	itt	gt
 8001d3a:	1a9b      	subgt	r3, r3, r2
 8001d3c:	18ed      	addgt	r5, r5, r3
 8001d3e:	2600      	movs	r6, #0
 8001d40:	341a      	adds	r4, #26
 8001d42:	42b5      	cmp	r5, r6
 8001d44:	d11a      	bne.n	8001d7c <_printf_common+0xc8>
 8001d46:	2000      	movs	r0, #0
 8001d48:	e008      	b.n	8001d5c <_printf_common+0xa8>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4652      	mov	r2, sl
 8001d4e:	4641      	mov	r1, r8
 8001d50:	4638      	mov	r0, r7
 8001d52:	47c8      	blx	r9
 8001d54:	3001      	adds	r0, #1
 8001d56:	d103      	bne.n	8001d60 <_printf_common+0xac>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d60:	3501      	adds	r5, #1
 8001d62:	e7c6      	b.n	8001cf2 <_printf_common+0x3e>
 8001d64:	18e1      	adds	r1, r4, r3
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	2030      	movs	r0, #48	@ 0x30
 8001d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d6e:	4422      	add	r2, r4
 8001d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d78:	3302      	adds	r3, #2
 8001d7a:	e7c7      	b.n	8001d0c <_printf_common+0x58>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4641      	mov	r1, r8
 8001d82:	4638      	mov	r0, r7
 8001d84:	47c8      	blx	r9
 8001d86:	3001      	adds	r0, #1
 8001d88:	d0e6      	beq.n	8001d58 <_printf_common+0xa4>
 8001d8a:	3601      	adds	r6, #1
 8001d8c:	e7d9      	b.n	8001d42 <_printf_common+0x8e>
	...

08001d90 <_printf_i>:
 8001d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d94:	7e0f      	ldrb	r7, [r1, #24]
 8001d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d98:	2f78      	cmp	r7, #120	@ 0x78
 8001d9a:	4691      	mov	r9, r2
 8001d9c:	4680      	mov	r8, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	469a      	mov	sl, r3
 8001da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001da6:	d807      	bhi.n	8001db8 <_printf_i+0x28>
 8001da8:	2f62      	cmp	r7, #98	@ 0x62
 8001daa:	d80a      	bhi.n	8001dc2 <_printf_i+0x32>
 8001dac:	2f00      	cmp	r7, #0
 8001dae:	f000 80d1 	beq.w	8001f54 <_printf_i+0x1c4>
 8001db2:	2f58      	cmp	r7, #88	@ 0x58
 8001db4:	f000 80b8 	beq.w	8001f28 <_printf_i+0x198>
 8001db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001dc0:	e03a      	b.n	8001e38 <_printf_i+0xa8>
 8001dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dc6:	2b15      	cmp	r3, #21
 8001dc8:	d8f6      	bhi.n	8001db8 <_printf_i+0x28>
 8001dca:	a101      	add	r1, pc, #4	@ (adr r1, 8001dd0 <_printf_i+0x40>)
 8001dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dd0:	08001e29 	.word	0x08001e29
 8001dd4:	08001e3d 	.word	0x08001e3d
 8001dd8:	08001db9 	.word	0x08001db9
 8001ddc:	08001db9 	.word	0x08001db9
 8001de0:	08001db9 	.word	0x08001db9
 8001de4:	08001db9 	.word	0x08001db9
 8001de8:	08001e3d 	.word	0x08001e3d
 8001dec:	08001db9 	.word	0x08001db9
 8001df0:	08001db9 	.word	0x08001db9
 8001df4:	08001db9 	.word	0x08001db9
 8001df8:	08001db9 	.word	0x08001db9
 8001dfc:	08001f3b 	.word	0x08001f3b
 8001e00:	08001e67 	.word	0x08001e67
 8001e04:	08001ef5 	.word	0x08001ef5
 8001e08:	08001db9 	.word	0x08001db9
 8001e0c:	08001db9 	.word	0x08001db9
 8001e10:	08001f5d 	.word	0x08001f5d
 8001e14:	08001db9 	.word	0x08001db9
 8001e18:	08001e67 	.word	0x08001e67
 8001e1c:	08001db9 	.word	0x08001db9
 8001e20:	08001db9 	.word	0x08001db9
 8001e24:	08001efd 	.word	0x08001efd
 8001e28:	6833      	ldr	r3, [r6, #0]
 8001e2a:	1d1a      	adds	r2, r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6032      	str	r2, [r6, #0]
 8001e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e09c      	b.n	8001f76 <_printf_i+0x1e6>
 8001e3c:	6833      	ldr	r3, [r6, #0]
 8001e3e:	6820      	ldr	r0, [r4, #0]
 8001e40:	1d19      	adds	r1, r3, #4
 8001e42:	6031      	str	r1, [r6, #0]
 8001e44:	0606      	lsls	r6, r0, #24
 8001e46:	d501      	bpl.n	8001e4c <_printf_i+0xbc>
 8001e48:	681d      	ldr	r5, [r3, #0]
 8001e4a:	e003      	b.n	8001e54 <_printf_i+0xc4>
 8001e4c:	0645      	lsls	r5, r0, #25
 8001e4e:	d5fb      	bpl.n	8001e48 <_printf_i+0xb8>
 8001e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	da03      	bge.n	8001e60 <_printf_i+0xd0>
 8001e58:	232d      	movs	r3, #45	@ 0x2d
 8001e5a:	426d      	negs	r5, r5
 8001e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e60:	4858      	ldr	r0, [pc, #352]	@ (8001fc4 <_printf_i+0x234>)
 8001e62:	230a      	movs	r3, #10
 8001e64:	e011      	b.n	8001e8a <_printf_i+0xfa>
 8001e66:	6821      	ldr	r1, [r4, #0]
 8001e68:	6833      	ldr	r3, [r6, #0]
 8001e6a:	0608      	lsls	r0, r1, #24
 8001e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e70:	d402      	bmi.n	8001e78 <_printf_i+0xe8>
 8001e72:	0649      	lsls	r1, r1, #25
 8001e74:	bf48      	it	mi
 8001e76:	b2ad      	uxthmi	r5, r5
 8001e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e7a:	4852      	ldr	r0, [pc, #328]	@ (8001fc4 <_printf_i+0x234>)
 8001e7c:	6033      	str	r3, [r6, #0]
 8001e7e:	bf14      	ite	ne
 8001e80:	230a      	movne	r3, #10
 8001e82:	2308      	moveq	r3, #8
 8001e84:	2100      	movs	r1, #0
 8001e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e8a:	6866      	ldr	r6, [r4, #4]
 8001e8c:	60a6      	str	r6, [r4, #8]
 8001e8e:	2e00      	cmp	r6, #0
 8001e90:	db05      	blt.n	8001e9e <_printf_i+0x10e>
 8001e92:	6821      	ldr	r1, [r4, #0]
 8001e94:	432e      	orrs	r6, r5
 8001e96:	f021 0104 	bic.w	r1, r1, #4
 8001e9a:	6021      	str	r1, [r4, #0]
 8001e9c:	d04b      	beq.n	8001f36 <_printf_i+0x1a6>
 8001e9e:	4616      	mov	r6, r2
 8001ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8001ea8:	5dc7      	ldrb	r7, [r0, r7]
 8001eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001eae:	462f      	mov	r7, r5
 8001eb0:	42bb      	cmp	r3, r7
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	d9f4      	bls.n	8001ea0 <_printf_i+0x110>
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d10b      	bne.n	8001ed2 <_printf_i+0x142>
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	07df      	lsls	r7, r3, #31
 8001ebe:	d508      	bpl.n	8001ed2 <_printf_i+0x142>
 8001ec0:	6923      	ldr	r3, [r4, #16]
 8001ec2:	6861      	ldr	r1, [r4, #4]
 8001ec4:	4299      	cmp	r1, r3
 8001ec6:	bfde      	ittt	le
 8001ec8:	2330      	movle	r3, #48	@ 0x30
 8001eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ece:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001ed2:	1b92      	subs	r2, r2, r6
 8001ed4:	6122      	str	r2, [r4, #16]
 8001ed6:	f8cd a000 	str.w	sl, [sp]
 8001eda:	464b      	mov	r3, r9
 8001edc:	aa03      	add	r2, sp, #12
 8001ede:	4621      	mov	r1, r4
 8001ee0:	4640      	mov	r0, r8
 8001ee2:	f7ff fee7 	bl	8001cb4 <_printf_common>
 8001ee6:	3001      	adds	r0, #1
 8001ee8:	d14a      	bne.n	8001f80 <_printf_i+0x1f0>
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eee:	b004      	add	sp, #16
 8001ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	6023      	str	r3, [r4, #0]
 8001efc:	4832      	ldr	r0, [pc, #200]	@ (8001fc8 <_printf_i+0x238>)
 8001efe:	2778      	movs	r7, #120	@ 0x78
 8001f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	6831      	ldr	r1, [r6, #0]
 8001f08:	061f      	lsls	r7, r3, #24
 8001f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f0e:	d402      	bmi.n	8001f16 <_printf_i+0x186>
 8001f10:	065f      	lsls	r7, r3, #25
 8001f12:	bf48      	it	mi
 8001f14:	b2ad      	uxthmi	r5, r5
 8001f16:	6031      	str	r1, [r6, #0]
 8001f18:	07d9      	lsls	r1, r3, #31
 8001f1a:	bf44      	itt	mi
 8001f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f20:	6023      	strmi	r3, [r4, #0]
 8001f22:	b11d      	cbz	r5, 8001f2c <_printf_i+0x19c>
 8001f24:	2310      	movs	r3, #16
 8001f26:	e7ad      	b.n	8001e84 <_printf_i+0xf4>
 8001f28:	4826      	ldr	r0, [pc, #152]	@ (8001fc4 <_printf_i+0x234>)
 8001f2a:	e7e9      	b.n	8001f00 <_printf_i+0x170>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f023 0320 	bic.w	r3, r3, #32
 8001f32:	6023      	str	r3, [r4, #0]
 8001f34:	e7f6      	b.n	8001f24 <_printf_i+0x194>
 8001f36:	4616      	mov	r6, r2
 8001f38:	e7bd      	b.n	8001eb6 <_printf_i+0x126>
 8001f3a:	6833      	ldr	r3, [r6, #0]
 8001f3c:	6825      	ldr	r5, [r4, #0]
 8001f3e:	6961      	ldr	r1, [r4, #20]
 8001f40:	1d18      	adds	r0, r3, #4
 8001f42:	6030      	str	r0, [r6, #0]
 8001f44:	062e      	lsls	r6, r5, #24
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	d501      	bpl.n	8001f4e <_printf_i+0x1be>
 8001f4a:	6019      	str	r1, [r3, #0]
 8001f4c:	e002      	b.n	8001f54 <_printf_i+0x1c4>
 8001f4e:	0668      	lsls	r0, r5, #25
 8001f50:	d5fb      	bpl.n	8001f4a <_printf_i+0x1ba>
 8001f52:	8019      	strh	r1, [r3, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	6123      	str	r3, [r4, #16]
 8001f58:	4616      	mov	r6, r2
 8001f5a:	e7bc      	b.n	8001ed6 <_printf_i+0x146>
 8001f5c:	6833      	ldr	r3, [r6, #0]
 8001f5e:	1d1a      	adds	r2, r3, #4
 8001f60:	6032      	str	r2, [r6, #0]
 8001f62:	681e      	ldr	r6, [r3, #0]
 8001f64:	6862      	ldr	r2, [r4, #4]
 8001f66:	2100      	movs	r1, #0
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f7fe f951 	bl	8000210 <memchr>
 8001f6e:	b108      	cbz	r0, 8001f74 <_printf_i+0x1e4>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	6060      	str	r0, [r4, #4]
 8001f74:	6863      	ldr	r3, [r4, #4]
 8001f76:	6123      	str	r3, [r4, #16]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f7e:	e7aa      	b.n	8001ed6 <_printf_i+0x146>
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	4632      	mov	r2, r6
 8001f84:	4649      	mov	r1, r9
 8001f86:	4640      	mov	r0, r8
 8001f88:	47d0      	blx	sl
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	d0ad      	beq.n	8001eea <_printf_i+0x15a>
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	079b      	lsls	r3, r3, #30
 8001f92:	d413      	bmi.n	8001fbc <_printf_i+0x22c>
 8001f94:	68e0      	ldr	r0, [r4, #12]
 8001f96:	9b03      	ldr	r3, [sp, #12]
 8001f98:	4298      	cmp	r0, r3
 8001f9a:	bfb8      	it	lt
 8001f9c:	4618      	movlt	r0, r3
 8001f9e:	e7a6      	b.n	8001eee <_printf_i+0x15e>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4632      	mov	r2, r6
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	47d0      	blx	sl
 8001faa:	3001      	adds	r0, #1
 8001fac:	d09d      	beq.n	8001eea <_printf_i+0x15a>
 8001fae:	3501      	adds	r5, #1
 8001fb0:	68e3      	ldr	r3, [r4, #12]
 8001fb2:	9903      	ldr	r1, [sp, #12]
 8001fb4:	1a5b      	subs	r3, r3, r1
 8001fb6:	42ab      	cmp	r3, r5
 8001fb8:	dcf2      	bgt.n	8001fa0 <_printf_i+0x210>
 8001fba:	e7eb      	b.n	8001f94 <_printf_i+0x204>
 8001fbc:	2500      	movs	r5, #0
 8001fbe:	f104 0619 	add.w	r6, r4, #25
 8001fc2:	e7f5      	b.n	8001fb0 <_printf_i+0x220>
 8001fc4:	08002ad6 	.word	0x08002ad6
 8001fc8:	08002ae7 	.word	0x08002ae7

08001fcc <_scanf_chars>:
 8001fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd0:	4615      	mov	r5, r2
 8001fd2:	688a      	ldr	r2, [r1, #8]
 8001fd4:	4680      	mov	r8, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	b932      	cbnz	r2, 8001fe8 <_scanf_chars+0x1c>
 8001fda:	698a      	ldr	r2, [r1, #24]
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001fe4:	2201      	moveq	r2, #1
 8001fe6:	608a      	str	r2, [r1, #8]
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800207c <_scanf_chars+0xb0>
 8001fee:	06d1      	lsls	r1, r2, #27
 8001ff0:	bf5f      	itttt	pl
 8001ff2:	681a      	ldrpl	r2, [r3, #0]
 8001ff4:	1d11      	addpl	r1, r2, #4
 8001ff6:	6019      	strpl	r1, [r3, #0]
 8001ff8:	6816      	ldrpl	r6, [r2, #0]
 8001ffa:	2700      	movs	r7, #0
 8001ffc:	69a0      	ldr	r0, [r4, #24]
 8001ffe:	b188      	cbz	r0, 8002024 <_scanf_chars+0x58>
 8002000:	2801      	cmp	r0, #1
 8002002:	d107      	bne.n	8002014 <_scanf_chars+0x48>
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	6963      	ldr	r3, [r4, #20]
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	b953      	cbnz	r3, 8002024 <_scanf_chars+0x58>
 800200e:	2f00      	cmp	r7, #0
 8002010:	d031      	beq.n	8002076 <_scanf_chars+0xaa>
 8002012:	e022      	b.n	800205a <_scanf_chars+0x8e>
 8002014:	2802      	cmp	r0, #2
 8002016:	d120      	bne.n	800205a <_scanf_chars+0x8e>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002020:	071b      	lsls	r3, r3, #28
 8002022:	d41a      	bmi.n	800205a <_scanf_chars+0x8e>
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	06da      	lsls	r2, r3, #27
 8002028:	bf5e      	ittt	pl
 800202a:	682b      	ldrpl	r3, [r5, #0]
 800202c:	781b      	ldrbpl	r3, [r3, #0]
 800202e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002032:	682a      	ldr	r2, [r5, #0]
 8002034:	686b      	ldr	r3, [r5, #4]
 8002036:	3201      	adds	r2, #1
 8002038:	602a      	str	r2, [r5, #0]
 800203a:	68a2      	ldr	r2, [r4, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	3a01      	subs	r2, #1
 8002040:	606b      	str	r3, [r5, #4]
 8002042:	3701      	adds	r7, #1
 8002044:	60a2      	str	r2, [r4, #8]
 8002046:	b142      	cbz	r2, 800205a <_scanf_chars+0x8e>
 8002048:	2b00      	cmp	r3, #0
 800204a:	dcd7      	bgt.n	8001ffc <_scanf_chars+0x30>
 800204c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002050:	4629      	mov	r1, r5
 8002052:	4640      	mov	r0, r8
 8002054:	4798      	blx	r3
 8002056:	2800      	cmp	r0, #0
 8002058:	d0d0      	beq.n	8001ffc <_scanf_chars+0x30>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	f013 0310 	ands.w	r3, r3, #16
 8002060:	d105      	bne.n	800206e <_scanf_chars+0xa2>
 8002062:	68e2      	ldr	r2, [r4, #12]
 8002064:	3201      	adds	r2, #1
 8002066:	60e2      	str	r2, [r4, #12]
 8002068:	69a2      	ldr	r2, [r4, #24]
 800206a:	b102      	cbz	r2, 800206e <_scanf_chars+0xa2>
 800206c:	7033      	strb	r3, [r6, #0]
 800206e:	6923      	ldr	r3, [r4, #16]
 8002070:	443b      	add	r3, r7
 8002072:	6123      	str	r3, [r4, #16]
 8002074:	2000      	movs	r0, #0
 8002076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800207a:	bf00      	nop
 800207c:	080029c5 	.word	0x080029c5

08002080 <_scanf_i>:
 8002080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002084:	4698      	mov	r8, r3
 8002086:	4b74      	ldr	r3, [pc, #464]	@ (8002258 <_scanf_i+0x1d8>)
 8002088:	460c      	mov	r4, r1
 800208a:	4682      	mov	sl, r0
 800208c:	4616      	mov	r6, r2
 800208e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002092:	b087      	sub	sp, #28
 8002094:	ab03      	add	r3, sp, #12
 8002096:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800209a:	4b70      	ldr	r3, [pc, #448]	@ (800225c <_scanf_i+0x1dc>)
 800209c:	69a1      	ldr	r1, [r4, #24]
 800209e:	4a70      	ldr	r2, [pc, #448]	@ (8002260 <_scanf_i+0x1e0>)
 80020a0:	2903      	cmp	r1, #3
 80020a2:	bf08      	it	eq
 80020a4:	461a      	moveq	r2, r3
 80020a6:	68a3      	ldr	r3, [r4, #8]
 80020a8:	9201      	str	r2, [sp, #4]
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80020b0:	bf88      	it	hi
 80020b2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80020b6:	4627      	mov	r7, r4
 80020b8:	bf82      	ittt	hi
 80020ba:	eb03 0905 	addhi.w	r9, r3, r5
 80020be:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80020c2:	60a3      	strhi	r3, [r4, #8]
 80020c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80020c8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80020cc:	bf98      	it	ls
 80020ce:	f04f 0900 	movls.w	r9, #0
 80020d2:	6023      	str	r3, [r4, #0]
 80020d4:	463d      	mov	r5, r7
 80020d6:	f04f 0b00 	mov.w	fp, #0
 80020da:	6831      	ldr	r1, [r6, #0]
 80020dc:	ab03      	add	r3, sp, #12
 80020de:	7809      	ldrb	r1, [r1, #0]
 80020e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f7fe f893 	bl	8000210 <memchr>
 80020ea:	b328      	cbz	r0, 8002138 <_scanf_i+0xb8>
 80020ec:	f1bb 0f01 	cmp.w	fp, #1
 80020f0:	d159      	bne.n	80021a6 <_scanf_i+0x126>
 80020f2:	6862      	ldr	r2, [r4, #4]
 80020f4:	b92a      	cbnz	r2, 8002102 <_scanf_i+0x82>
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	2108      	movs	r1, #8
 80020fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020fe:	6061      	str	r1, [r4, #4]
 8002100:	6022      	str	r2, [r4, #0]
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8002108:	6022      	str	r2, [r4, #0]
 800210a:	68a2      	ldr	r2, [r4, #8]
 800210c:	1e51      	subs	r1, r2, #1
 800210e:	60a1      	str	r1, [r4, #8]
 8002110:	b192      	cbz	r2, 8002138 <_scanf_i+0xb8>
 8002112:	6832      	ldr	r2, [r6, #0]
 8002114:	1c51      	adds	r1, r2, #1
 8002116:	6031      	str	r1, [r6, #0]
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	f805 2b01 	strb.w	r2, [r5], #1
 800211e:	6872      	ldr	r2, [r6, #4]
 8002120:	3a01      	subs	r2, #1
 8002122:	2a00      	cmp	r2, #0
 8002124:	6072      	str	r2, [r6, #4]
 8002126:	dc07      	bgt.n	8002138 <_scanf_i+0xb8>
 8002128:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800212c:	4631      	mov	r1, r6
 800212e:	4650      	mov	r0, sl
 8002130:	4790      	blx	r2
 8002132:	2800      	cmp	r0, #0
 8002134:	f040 8085 	bne.w	8002242 <_scanf_i+0x1c2>
 8002138:	f10b 0b01 	add.w	fp, fp, #1
 800213c:	f1bb 0f03 	cmp.w	fp, #3
 8002140:	d1cb      	bne.n	80020da <_scanf_i+0x5a>
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	b90b      	cbnz	r3, 800214a <_scanf_i+0xca>
 8002146:	230a      	movs	r3, #10
 8002148:	6063      	str	r3, [r4, #4]
 800214a:	6863      	ldr	r3, [r4, #4]
 800214c:	4945      	ldr	r1, [pc, #276]	@ (8002264 <_scanf_i+0x1e4>)
 800214e:	6960      	ldr	r0, [r4, #20]
 8002150:	1ac9      	subs	r1, r1, r3
 8002152:	f000 f889 	bl	8002268 <__sccl>
 8002156:	f04f 0b00 	mov.w	fp, #0
 800215a:	68a3      	ldr	r3, [r4, #8]
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03d      	beq.n	80021de <_scanf_i+0x15e>
 8002162:	6831      	ldr	r1, [r6, #0]
 8002164:	6960      	ldr	r0, [r4, #20]
 8002166:	f891 c000 	ldrb.w	ip, [r1]
 800216a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800216e:	2800      	cmp	r0, #0
 8002170:	d035      	beq.n	80021de <_scanf_i+0x15e>
 8002172:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8002176:	d124      	bne.n	80021c2 <_scanf_i+0x142>
 8002178:	0510      	lsls	r0, r2, #20
 800217a:	d522      	bpl.n	80021c2 <_scanf_i+0x142>
 800217c:	f10b 0b01 	add.w	fp, fp, #1
 8002180:	f1b9 0f00 	cmp.w	r9, #0
 8002184:	d003      	beq.n	800218e <_scanf_i+0x10e>
 8002186:	3301      	adds	r3, #1
 8002188:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800218c:	60a3      	str	r3, [r4, #8]
 800218e:	6873      	ldr	r3, [r6, #4]
 8002190:	3b01      	subs	r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	6073      	str	r3, [r6, #4]
 8002196:	dd1b      	ble.n	80021d0 <_scanf_i+0x150>
 8002198:	6833      	ldr	r3, [r6, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	6033      	str	r3, [r6, #0]
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60a3      	str	r3, [r4, #8]
 80021a4:	e7d9      	b.n	800215a <_scanf_i+0xda>
 80021a6:	f1bb 0f02 	cmp.w	fp, #2
 80021aa:	d1ae      	bne.n	800210a <_scanf_i+0x8a>
 80021ac:	6822      	ldr	r2, [r4, #0]
 80021ae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80021b2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80021b6:	d1c4      	bne.n	8002142 <_scanf_i+0xc2>
 80021b8:	2110      	movs	r1, #16
 80021ba:	6061      	str	r1, [r4, #4]
 80021bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c0:	e7a2      	b.n	8002108 <_scanf_i+0x88>
 80021c2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80021c6:	6022      	str	r2, [r4, #0]
 80021c8:	780b      	ldrb	r3, [r1, #0]
 80021ca:	f805 3b01 	strb.w	r3, [r5], #1
 80021ce:	e7de      	b.n	800218e <_scanf_i+0x10e>
 80021d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80021d4:	4631      	mov	r1, r6
 80021d6:	4650      	mov	r0, sl
 80021d8:	4798      	blx	r3
 80021da:	2800      	cmp	r0, #0
 80021dc:	d0df      	beq.n	800219e <_scanf_i+0x11e>
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	05d9      	lsls	r1, r3, #23
 80021e2:	d50d      	bpl.n	8002200 <_scanf_i+0x180>
 80021e4:	42bd      	cmp	r5, r7
 80021e6:	d909      	bls.n	80021fc <_scanf_i+0x17c>
 80021e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80021ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80021f0:	4632      	mov	r2, r6
 80021f2:	4650      	mov	r0, sl
 80021f4:	4798      	blx	r3
 80021f6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80021fa:	464d      	mov	r5, r9
 80021fc:	42bd      	cmp	r5, r7
 80021fe:	d028      	beq.n	8002252 <_scanf_i+0x1d2>
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	f012 0210 	ands.w	r2, r2, #16
 8002206:	d113      	bne.n	8002230 <_scanf_i+0x1b0>
 8002208:	702a      	strb	r2, [r5, #0]
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	9e01      	ldr	r6, [sp, #4]
 800220e:	4639      	mov	r1, r7
 8002210:	4650      	mov	r0, sl
 8002212:	47b0      	blx	r6
 8002214:	f8d8 3000 	ldr.w	r3, [r8]
 8002218:	6821      	ldr	r1, [r4, #0]
 800221a:	1d1a      	adds	r2, r3, #4
 800221c:	f8c8 2000 	str.w	r2, [r8]
 8002220:	f011 0f20 	tst.w	r1, #32
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	d00f      	beq.n	8002248 <_scanf_i+0x1c8>
 8002228:	6018      	str	r0, [r3, #0]
 800222a:	68e3      	ldr	r3, [r4, #12]
 800222c:	3301      	adds	r3, #1
 800222e:	60e3      	str	r3, [r4, #12]
 8002230:	6923      	ldr	r3, [r4, #16]
 8002232:	1bed      	subs	r5, r5, r7
 8002234:	445d      	add	r5, fp
 8002236:	442b      	add	r3, r5
 8002238:	6123      	str	r3, [r4, #16]
 800223a:	2000      	movs	r0, #0
 800223c:	b007      	add	sp, #28
 800223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002242:	f04f 0b00 	mov.w	fp, #0
 8002246:	e7ca      	b.n	80021de <_scanf_i+0x15e>
 8002248:	07ca      	lsls	r2, r1, #31
 800224a:	bf4c      	ite	mi
 800224c:	8018      	strhmi	r0, [r3, #0]
 800224e:	6018      	strpl	r0, [r3, #0]
 8002250:	e7eb      	b.n	800222a <_scanf_i+0x1aa>
 8002252:	2001      	movs	r0, #1
 8002254:	e7f2      	b.n	800223c <_scanf_i+0x1bc>
 8002256:	bf00      	nop
 8002258:	080029b8 	.word	0x080029b8
 800225c:	08001099 	.word	0x08001099
 8002260:	08002675 	.word	0x08002675
 8002264:	08002b08 	.word	0x08002b08

08002268 <__sccl>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	780b      	ldrb	r3, [r1, #0]
 800226c:	4604      	mov	r4, r0
 800226e:	2b5e      	cmp	r3, #94	@ 0x5e
 8002270:	bf0b      	itete	eq
 8002272:	784b      	ldrbeq	r3, [r1, #1]
 8002274:	1c4a      	addne	r2, r1, #1
 8002276:	1c8a      	addeq	r2, r1, #2
 8002278:	2100      	movne	r1, #0
 800227a:	bf08      	it	eq
 800227c:	2101      	moveq	r1, #1
 800227e:	3801      	subs	r0, #1
 8002280:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8002284:	f800 1f01 	strb.w	r1, [r0, #1]!
 8002288:	42a8      	cmp	r0, r5
 800228a:	d1fb      	bne.n	8002284 <__sccl+0x1c>
 800228c:	b90b      	cbnz	r3, 8002292 <__sccl+0x2a>
 800228e:	1e50      	subs	r0, r2, #1
 8002290:	bd70      	pop	{r4, r5, r6, pc}
 8002292:	f081 0101 	eor.w	r1, r1, #1
 8002296:	54e1      	strb	r1, [r4, r3]
 8002298:	4610      	mov	r0, r2
 800229a:	4602      	mov	r2, r0
 800229c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80022a0:	2d2d      	cmp	r5, #45	@ 0x2d
 80022a2:	d005      	beq.n	80022b0 <__sccl+0x48>
 80022a4:	2d5d      	cmp	r5, #93	@ 0x5d
 80022a6:	d016      	beq.n	80022d6 <__sccl+0x6e>
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	d0f1      	beq.n	8002290 <__sccl+0x28>
 80022ac:	462b      	mov	r3, r5
 80022ae:	e7f2      	b.n	8002296 <__sccl+0x2e>
 80022b0:	7846      	ldrb	r6, [r0, #1]
 80022b2:	2e5d      	cmp	r6, #93	@ 0x5d
 80022b4:	d0fa      	beq.n	80022ac <__sccl+0x44>
 80022b6:	42b3      	cmp	r3, r6
 80022b8:	dcf8      	bgt.n	80022ac <__sccl+0x44>
 80022ba:	3002      	adds	r0, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	3201      	adds	r2, #1
 80022c0:	4296      	cmp	r6, r2
 80022c2:	54a1      	strb	r1, [r4, r2]
 80022c4:	dcfb      	bgt.n	80022be <__sccl+0x56>
 80022c6:	1af2      	subs	r2, r6, r3
 80022c8:	3a01      	subs	r2, #1
 80022ca:	1c5d      	adds	r5, r3, #1
 80022cc:	42b3      	cmp	r3, r6
 80022ce:	bfa8      	it	ge
 80022d0:	2200      	movge	r2, #0
 80022d2:	18ab      	adds	r3, r5, r2
 80022d4:	e7e1      	b.n	800229a <__sccl+0x32>
 80022d6:	4610      	mov	r0, r2
 80022d8:	e7da      	b.n	8002290 <__sccl+0x28>
	...

080022dc <__sflush_r>:
 80022dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e4:	0716      	lsls	r6, r2, #28
 80022e6:	4605      	mov	r5, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	d454      	bmi.n	8002396 <__sflush_r+0xba>
 80022ec:	684b      	ldr	r3, [r1, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	dc02      	bgt.n	80022f8 <__sflush_r+0x1c>
 80022f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dd48      	ble.n	800238a <__sflush_r+0xae>
 80022f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	d045      	beq.n	800238a <__sflush_r+0xae>
 80022fe:	2300      	movs	r3, #0
 8002300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002304:	682f      	ldr	r7, [r5, #0]
 8002306:	6a21      	ldr	r1, [r4, #32]
 8002308:	602b      	str	r3, [r5, #0]
 800230a:	d030      	beq.n	800236e <__sflush_r+0x92>
 800230c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	0759      	lsls	r1, r3, #29
 8002312:	d505      	bpl.n	8002320 <__sflush_r+0x44>
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800231a:	b10b      	cbz	r3, 8002320 <__sflush_r+0x44>
 800231c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800231e:	1ad2      	subs	r2, r2, r3
 8002320:	2300      	movs	r3, #0
 8002322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002324:	6a21      	ldr	r1, [r4, #32]
 8002326:	4628      	mov	r0, r5
 8002328:	47b0      	blx	r6
 800232a:	1c43      	adds	r3, r0, #1
 800232c:	89a3      	ldrh	r3, [r4, #12]
 800232e:	d106      	bne.n	800233e <__sflush_r+0x62>
 8002330:	6829      	ldr	r1, [r5, #0]
 8002332:	291d      	cmp	r1, #29
 8002334:	d82b      	bhi.n	800238e <__sflush_r+0xb2>
 8002336:	4a2a      	ldr	r2, [pc, #168]	@ (80023e0 <__sflush_r+0x104>)
 8002338:	40ca      	lsrs	r2, r1
 800233a:	07d6      	lsls	r6, r2, #31
 800233c:	d527      	bpl.n	800238e <__sflush_r+0xb2>
 800233e:	2200      	movs	r2, #0
 8002340:	6062      	str	r2, [r4, #4]
 8002342:	04d9      	lsls	r1, r3, #19
 8002344:	6922      	ldr	r2, [r4, #16]
 8002346:	6022      	str	r2, [r4, #0]
 8002348:	d504      	bpl.n	8002354 <__sflush_r+0x78>
 800234a:	1c42      	adds	r2, r0, #1
 800234c:	d101      	bne.n	8002352 <__sflush_r+0x76>
 800234e:	682b      	ldr	r3, [r5, #0]
 8002350:	b903      	cbnz	r3, 8002354 <__sflush_r+0x78>
 8002352:	6560      	str	r0, [r4, #84]	@ 0x54
 8002354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002356:	602f      	str	r7, [r5, #0]
 8002358:	b1b9      	cbz	r1, 800238a <__sflush_r+0xae>
 800235a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800235e:	4299      	cmp	r1, r3
 8002360:	d002      	beq.n	8002368 <__sflush_r+0x8c>
 8002362:	4628      	mov	r0, r5
 8002364:	f7fe ff50 	bl	8001208 <_free_r>
 8002368:	2300      	movs	r3, #0
 800236a:	6363      	str	r3, [r4, #52]	@ 0x34
 800236c:	e00d      	b.n	800238a <__sflush_r+0xae>
 800236e:	2301      	movs	r3, #1
 8002370:	4628      	mov	r0, r5
 8002372:	47b0      	blx	r6
 8002374:	4602      	mov	r2, r0
 8002376:	1c50      	adds	r0, r2, #1
 8002378:	d1c9      	bne.n	800230e <__sflush_r+0x32>
 800237a:	682b      	ldr	r3, [r5, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0c6      	beq.n	800230e <__sflush_r+0x32>
 8002380:	2b1d      	cmp	r3, #29
 8002382:	d001      	beq.n	8002388 <__sflush_r+0xac>
 8002384:	2b16      	cmp	r3, #22
 8002386:	d11e      	bne.n	80023c6 <__sflush_r+0xea>
 8002388:	602f      	str	r7, [r5, #0]
 800238a:	2000      	movs	r0, #0
 800238c:	e022      	b.n	80023d4 <__sflush_r+0xf8>
 800238e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002392:	b21b      	sxth	r3, r3
 8002394:	e01b      	b.n	80023ce <__sflush_r+0xf2>
 8002396:	690f      	ldr	r7, [r1, #16]
 8002398:	2f00      	cmp	r7, #0
 800239a:	d0f6      	beq.n	800238a <__sflush_r+0xae>
 800239c:	0793      	lsls	r3, r2, #30
 800239e:	680e      	ldr	r6, [r1, #0]
 80023a0:	bf08      	it	eq
 80023a2:	694b      	ldreq	r3, [r1, #20]
 80023a4:	600f      	str	r7, [r1, #0]
 80023a6:	bf18      	it	ne
 80023a8:	2300      	movne	r3, #0
 80023aa:	eba6 0807 	sub.w	r8, r6, r7
 80023ae:	608b      	str	r3, [r1, #8]
 80023b0:	f1b8 0f00 	cmp.w	r8, #0
 80023b4:	dde9      	ble.n	800238a <__sflush_r+0xae>
 80023b6:	6a21      	ldr	r1, [r4, #32]
 80023b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80023ba:	4643      	mov	r3, r8
 80023bc:	463a      	mov	r2, r7
 80023be:	4628      	mov	r0, r5
 80023c0:	47b0      	blx	r6
 80023c2:	2800      	cmp	r0, #0
 80023c4:	dc08      	bgt.n	80023d8 <__sflush_r+0xfc>
 80023c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ce:	81a3      	strh	r3, [r4, #12]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d8:	4407      	add	r7, r0
 80023da:	eba8 0800 	sub.w	r8, r8, r0
 80023de:	e7e7      	b.n	80023b0 <__sflush_r+0xd4>
 80023e0:	20400001 	.word	0x20400001

080023e4 <_fflush_r>:
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	690b      	ldr	r3, [r1, #16]
 80023e8:	4605      	mov	r5, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	b913      	cbnz	r3, 80023f4 <_fflush_r+0x10>
 80023ee:	2500      	movs	r5, #0
 80023f0:	4628      	mov	r0, r5
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	b118      	cbz	r0, 80023fe <_fflush_r+0x1a>
 80023f6:	6a03      	ldr	r3, [r0, #32]
 80023f8:	b90b      	cbnz	r3, 80023fe <_fflush_r+0x1a>
 80023fa:	f7fe fdbb 	bl	8000f74 <__sinit>
 80023fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f3      	beq.n	80023ee <_fflush_r+0xa>
 8002406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002408:	07d0      	lsls	r0, r2, #31
 800240a:	d404      	bmi.n	8002416 <_fflush_r+0x32>
 800240c:	0599      	lsls	r1, r3, #22
 800240e:	d402      	bmi.n	8002416 <_fflush_r+0x32>
 8002410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002412:	f7fe fee6 	bl	80011e2 <__retarget_lock_acquire_recursive>
 8002416:	4628      	mov	r0, r5
 8002418:	4621      	mov	r1, r4
 800241a:	f7ff ff5f 	bl	80022dc <__sflush_r>
 800241e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002420:	07da      	lsls	r2, r3, #31
 8002422:	4605      	mov	r5, r0
 8002424:	d4e4      	bmi.n	80023f0 <_fflush_r+0xc>
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	059b      	lsls	r3, r3, #22
 800242a:	d4e1      	bmi.n	80023f0 <_fflush_r+0xc>
 800242c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800242e:	f7fe fed9 	bl	80011e4 <__retarget_lock_release_recursive>
 8002432:	e7dd      	b.n	80023f0 <_fflush_r+0xc>

08002434 <__malloc_lock>:
 8002434:	4801      	ldr	r0, [pc, #4]	@ (800243c <__malloc_lock+0x8>)
 8002436:	f7fe bed4 	b.w	80011e2 <__retarget_lock_acquire_recursive>
 800243a:	bf00      	nop
 800243c:	20000358 	.word	0x20000358

08002440 <__malloc_unlock>:
 8002440:	4801      	ldr	r0, [pc, #4]	@ (8002448 <__malloc_unlock+0x8>)
 8002442:	f7fe becf 	b.w	80011e4 <__retarget_lock_release_recursive>
 8002446:	bf00      	nop
 8002448:	20000358 	.word	0x20000358

0800244c <__submore>:
 800244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002450:	460c      	mov	r4, r1
 8002452:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002458:	4299      	cmp	r1, r3
 800245a:	d11d      	bne.n	8002498 <__submore+0x4c>
 800245c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002460:	f7ff fba8 	bl	8001bb4 <_malloc_r>
 8002464:	b918      	cbnz	r0, 800246e <__submore+0x22>
 8002466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800246a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800246e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002472:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002474:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8002478:	6360      	str	r0, [r4, #52]	@ 0x34
 800247a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800247e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002482:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8002486:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800248a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800248e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8002492:	6020      	str	r0, [r4, #0]
 8002494:	2000      	movs	r0, #0
 8002496:	e7e8      	b.n	800246a <__submore+0x1e>
 8002498:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800249a:	0077      	lsls	r7, r6, #1
 800249c:	463a      	mov	r2, r7
 800249e:	f000 f80f 	bl	80024c0 <_realloc_r>
 80024a2:	4605      	mov	r5, r0
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d0de      	beq.n	8002466 <__submore+0x1a>
 80024a8:	eb00 0806 	add.w	r8, r0, r6
 80024ac:	4601      	mov	r1, r0
 80024ae:	4632      	mov	r2, r6
 80024b0:	4640      	mov	r0, r8
 80024b2:	f000 f9e5 	bl	8002880 <memcpy>
 80024b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80024ba:	f8c4 8000 	str.w	r8, [r4]
 80024be:	e7e9      	b.n	8002494 <__submore+0x48>

080024c0 <_realloc_r>:
 80024c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024c4:	4607      	mov	r7, r0
 80024c6:	4614      	mov	r4, r2
 80024c8:	460d      	mov	r5, r1
 80024ca:	b921      	cbnz	r1, 80024d6 <_realloc_r+0x16>
 80024cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024d0:	4611      	mov	r1, r2
 80024d2:	f7ff bb6f 	b.w	8001bb4 <_malloc_r>
 80024d6:	b92a      	cbnz	r2, 80024e4 <_realloc_r+0x24>
 80024d8:	f7fe fe96 	bl	8001208 <_free_r>
 80024dc:	4625      	mov	r5, r4
 80024de:	4628      	mov	r0, r5
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024e4:	f000 f9da 	bl	800289c <_malloc_usable_size_r>
 80024e8:	4284      	cmp	r4, r0
 80024ea:	4606      	mov	r6, r0
 80024ec:	d802      	bhi.n	80024f4 <_realloc_r+0x34>
 80024ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80024f2:	d8f4      	bhi.n	80024de <_realloc_r+0x1e>
 80024f4:	4621      	mov	r1, r4
 80024f6:	4638      	mov	r0, r7
 80024f8:	f7ff fb5c 	bl	8001bb4 <_malloc_r>
 80024fc:	4680      	mov	r8, r0
 80024fe:	b908      	cbnz	r0, 8002504 <_realloc_r+0x44>
 8002500:	4645      	mov	r5, r8
 8002502:	e7ec      	b.n	80024de <_realloc_r+0x1e>
 8002504:	42b4      	cmp	r4, r6
 8002506:	4622      	mov	r2, r4
 8002508:	4629      	mov	r1, r5
 800250a:	bf28      	it	cs
 800250c:	4632      	movcs	r2, r6
 800250e:	f000 f9b7 	bl	8002880 <memcpy>
 8002512:	4629      	mov	r1, r5
 8002514:	4638      	mov	r0, r7
 8002516:	f7fe fe77 	bl	8001208 <_free_r>
 800251a:	e7f1      	b.n	8002500 <_realloc_r+0x40>

0800251c <__swbuf_r>:
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251e:	460e      	mov	r6, r1
 8002520:	4614      	mov	r4, r2
 8002522:	4605      	mov	r5, r0
 8002524:	b118      	cbz	r0, 800252e <__swbuf_r+0x12>
 8002526:	6a03      	ldr	r3, [r0, #32]
 8002528:	b90b      	cbnz	r3, 800252e <__swbuf_r+0x12>
 800252a:	f7fe fd23 	bl	8000f74 <__sinit>
 800252e:	69a3      	ldr	r3, [r4, #24]
 8002530:	60a3      	str	r3, [r4, #8]
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	071a      	lsls	r2, r3, #28
 8002536:	d501      	bpl.n	800253c <__swbuf_r+0x20>
 8002538:	6923      	ldr	r3, [r4, #16]
 800253a:	b943      	cbnz	r3, 800254e <__swbuf_r+0x32>
 800253c:	4621      	mov	r1, r4
 800253e:	4628      	mov	r0, r5
 8002540:	f000 f89a 	bl	8002678 <__swsetup_r>
 8002544:	b118      	cbz	r0, 800254e <__swbuf_r+0x32>
 8002546:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800254a:	4638      	mov	r0, r7
 800254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	6922      	ldr	r2, [r4, #16]
 8002552:	1a98      	subs	r0, r3, r2
 8002554:	6963      	ldr	r3, [r4, #20]
 8002556:	b2f6      	uxtb	r6, r6
 8002558:	4283      	cmp	r3, r0
 800255a:	4637      	mov	r7, r6
 800255c:	dc05      	bgt.n	800256a <__swbuf_r+0x4e>
 800255e:	4621      	mov	r1, r4
 8002560:	4628      	mov	r0, r5
 8002562:	f7ff ff3f 	bl	80023e4 <_fflush_r>
 8002566:	2800      	cmp	r0, #0
 8002568:	d1ed      	bne.n	8002546 <__swbuf_r+0x2a>
 800256a:	68a3      	ldr	r3, [r4, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60a3      	str	r3, [r4, #8]
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	6022      	str	r2, [r4, #0]
 8002576:	701e      	strb	r6, [r3, #0]
 8002578:	6962      	ldr	r2, [r4, #20]
 800257a:	1c43      	adds	r3, r0, #1
 800257c:	429a      	cmp	r2, r3
 800257e:	d004      	beq.n	800258a <__swbuf_r+0x6e>
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	07db      	lsls	r3, r3, #31
 8002584:	d5e1      	bpl.n	800254a <__swbuf_r+0x2e>
 8002586:	2e0a      	cmp	r6, #10
 8002588:	d1df      	bne.n	800254a <__swbuf_r+0x2e>
 800258a:	4621      	mov	r1, r4
 800258c:	4628      	mov	r0, r5
 800258e:	f7ff ff29 	bl	80023e4 <_fflush_r>
 8002592:	2800      	cmp	r0, #0
 8002594:	d0d9      	beq.n	800254a <__swbuf_r+0x2e>
 8002596:	e7d6      	b.n	8002546 <__swbuf_r+0x2a>

08002598 <_strtoul_l.isra.0>:
 8002598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800259c:	4e34      	ldr	r6, [pc, #208]	@ (8002670 <_strtoul_l.isra.0+0xd8>)
 800259e:	4686      	mov	lr, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4628      	mov	r0, r5
 80025a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025a8:	5d37      	ldrb	r7, [r6, r4]
 80025aa:	f017 0708 	ands.w	r7, r7, #8
 80025ae:	d1f8      	bne.n	80025a2 <_strtoul_l.isra.0+0xa>
 80025b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80025b2:	d110      	bne.n	80025d6 <_strtoul_l.isra.0+0x3e>
 80025b4:	782c      	ldrb	r4, [r5, #0]
 80025b6:	2701      	movs	r7, #1
 80025b8:	1c85      	adds	r5, r0, #2
 80025ba:	f033 0010 	bics.w	r0, r3, #16
 80025be:	d115      	bne.n	80025ec <_strtoul_l.isra.0+0x54>
 80025c0:	2c30      	cmp	r4, #48	@ 0x30
 80025c2:	d10d      	bne.n	80025e0 <_strtoul_l.isra.0+0x48>
 80025c4:	7828      	ldrb	r0, [r5, #0]
 80025c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80025ca:	2858      	cmp	r0, #88	@ 0x58
 80025cc:	d108      	bne.n	80025e0 <_strtoul_l.isra.0+0x48>
 80025ce:	786c      	ldrb	r4, [r5, #1]
 80025d0:	3502      	adds	r5, #2
 80025d2:	2310      	movs	r3, #16
 80025d4:	e00a      	b.n	80025ec <_strtoul_l.isra.0+0x54>
 80025d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80025d8:	bf04      	itt	eq
 80025da:	782c      	ldrbeq	r4, [r5, #0]
 80025dc:	1c85      	addeq	r5, r0, #2
 80025de:	e7ec      	b.n	80025ba <_strtoul_l.isra.0+0x22>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f6      	bne.n	80025d2 <_strtoul_l.isra.0+0x3a>
 80025e4:	2c30      	cmp	r4, #48	@ 0x30
 80025e6:	bf14      	ite	ne
 80025e8:	230a      	movne	r3, #10
 80025ea:	2308      	moveq	r3, #8
 80025ec:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80025f0:	2600      	movs	r6, #0
 80025f2:	fbb8 f8f3 	udiv	r8, r8, r3
 80025f6:	fb03 f908 	mul.w	r9, r3, r8
 80025fa:	ea6f 0909 	mvn.w	r9, r9
 80025fe:	4630      	mov	r0, r6
 8002600:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8002604:	f1bc 0f09 	cmp.w	ip, #9
 8002608:	d810      	bhi.n	800262c <_strtoul_l.isra.0+0x94>
 800260a:	4664      	mov	r4, ip
 800260c:	42a3      	cmp	r3, r4
 800260e:	dd1e      	ble.n	800264e <_strtoul_l.isra.0+0xb6>
 8002610:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8002614:	d007      	beq.n	8002626 <_strtoul_l.isra.0+0x8e>
 8002616:	4580      	cmp	r8, r0
 8002618:	d316      	bcc.n	8002648 <_strtoul_l.isra.0+0xb0>
 800261a:	d101      	bne.n	8002620 <_strtoul_l.isra.0+0x88>
 800261c:	45a1      	cmp	r9, r4
 800261e:	db13      	blt.n	8002648 <_strtoul_l.isra.0+0xb0>
 8002620:	fb00 4003 	mla	r0, r0, r3, r4
 8002624:	2601      	movs	r6, #1
 8002626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800262a:	e7e9      	b.n	8002600 <_strtoul_l.isra.0+0x68>
 800262c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8002630:	f1bc 0f19 	cmp.w	ip, #25
 8002634:	d801      	bhi.n	800263a <_strtoul_l.isra.0+0xa2>
 8002636:	3c37      	subs	r4, #55	@ 0x37
 8002638:	e7e8      	b.n	800260c <_strtoul_l.isra.0+0x74>
 800263a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800263e:	f1bc 0f19 	cmp.w	ip, #25
 8002642:	d804      	bhi.n	800264e <_strtoul_l.isra.0+0xb6>
 8002644:	3c57      	subs	r4, #87	@ 0x57
 8002646:	e7e1      	b.n	800260c <_strtoul_l.isra.0+0x74>
 8002648:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800264c:	e7eb      	b.n	8002626 <_strtoul_l.isra.0+0x8e>
 800264e:	1c73      	adds	r3, r6, #1
 8002650:	d106      	bne.n	8002660 <_strtoul_l.isra.0+0xc8>
 8002652:	2322      	movs	r3, #34	@ 0x22
 8002654:	f8ce 3000 	str.w	r3, [lr]
 8002658:	4630      	mov	r0, r6
 800265a:	b932      	cbnz	r2, 800266a <_strtoul_l.isra.0+0xd2>
 800265c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002660:	b107      	cbz	r7, 8002664 <_strtoul_l.isra.0+0xcc>
 8002662:	4240      	negs	r0, r0
 8002664:	2a00      	cmp	r2, #0
 8002666:	d0f9      	beq.n	800265c <_strtoul_l.isra.0+0xc4>
 8002668:	b106      	cbz	r6, 800266c <_strtoul_l.isra.0+0xd4>
 800266a:	1e69      	subs	r1, r5, #1
 800266c:	6011      	str	r1, [r2, #0]
 800266e:	e7f5      	b.n	800265c <_strtoul_l.isra.0+0xc4>
 8002670:	080029c5 	.word	0x080029c5

08002674 <_strtoul_r>:
 8002674:	f7ff bf90 	b.w	8002598 <_strtoul_l.isra.0>

08002678 <__swsetup_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <__swsetup_r+0xa8>)
 800267c:	4605      	mov	r5, r0
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	460c      	mov	r4, r1
 8002682:	b118      	cbz	r0, 800268c <__swsetup_r+0x14>
 8002684:	6a03      	ldr	r3, [r0, #32]
 8002686:	b90b      	cbnz	r3, 800268c <__swsetup_r+0x14>
 8002688:	f7fe fc74 	bl	8000f74 <__sinit>
 800268c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002690:	0719      	lsls	r1, r3, #28
 8002692:	d422      	bmi.n	80026da <__swsetup_r+0x62>
 8002694:	06da      	lsls	r2, r3, #27
 8002696:	d407      	bmi.n	80026a8 <__swsetup_r+0x30>
 8002698:	2209      	movs	r2, #9
 800269a:	602a      	str	r2, [r5, #0]
 800269c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026a0:	81a3      	strh	r3, [r4, #12]
 80026a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026a6:	e033      	b.n	8002710 <__swsetup_r+0x98>
 80026a8:	0758      	lsls	r0, r3, #29
 80026aa:	d512      	bpl.n	80026d2 <__swsetup_r+0x5a>
 80026ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026ae:	b141      	cbz	r1, 80026c2 <__swsetup_r+0x4a>
 80026b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026b4:	4299      	cmp	r1, r3
 80026b6:	d002      	beq.n	80026be <__swsetup_r+0x46>
 80026b8:	4628      	mov	r0, r5
 80026ba:	f7fe fda5 	bl	8001208 <_free_r>
 80026be:	2300      	movs	r3, #0
 80026c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	2300      	movs	r3, #0
 80026cc:	6063      	str	r3, [r4, #4]
 80026ce:	6923      	ldr	r3, [r4, #16]
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	f043 0308 	orr.w	r3, r3, #8
 80026d8:	81a3      	strh	r3, [r4, #12]
 80026da:	6923      	ldr	r3, [r4, #16]
 80026dc:	b94b      	cbnz	r3, 80026f2 <__swsetup_r+0x7a>
 80026de:	89a3      	ldrh	r3, [r4, #12]
 80026e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e8:	d003      	beq.n	80026f2 <__swsetup_r+0x7a>
 80026ea:	4621      	mov	r1, r4
 80026ec:	4628      	mov	r0, r5
 80026ee:	f000 f83f 	bl	8002770 <__smakebuf_r>
 80026f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026f6:	f013 0201 	ands.w	r2, r3, #1
 80026fa:	d00a      	beq.n	8002712 <__swsetup_r+0x9a>
 80026fc:	2200      	movs	r2, #0
 80026fe:	60a2      	str	r2, [r4, #8]
 8002700:	6962      	ldr	r2, [r4, #20]
 8002702:	4252      	negs	r2, r2
 8002704:	61a2      	str	r2, [r4, #24]
 8002706:	6922      	ldr	r2, [r4, #16]
 8002708:	b942      	cbnz	r2, 800271c <__swsetup_r+0xa4>
 800270a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800270e:	d1c5      	bne.n	800269c <__swsetup_r+0x24>
 8002710:	bd38      	pop	{r3, r4, r5, pc}
 8002712:	0799      	lsls	r1, r3, #30
 8002714:	bf58      	it	pl
 8002716:	6962      	ldrpl	r2, [r4, #20]
 8002718:	60a2      	str	r2, [r4, #8]
 800271a:	e7f4      	b.n	8002706 <__swsetup_r+0x8e>
 800271c:	2000      	movs	r0, #0
 800271e:	e7f7      	b.n	8002710 <__swsetup_r+0x98>
 8002720:	20000038 	.word	0x20000038

08002724 <__swhatbuf_r>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	460c      	mov	r4, r1
 8002728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272c:	2900      	cmp	r1, #0
 800272e:	b096      	sub	sp, #88	@ 0x58
 8002730:	4615      	mov	r5, r2
 8002732:	461e      	mov	r6, r3
 8002734:	da0d      	bge.n	8002752 <__swhatbuf_r+0x2e>
 8002736:	89a3      	ldrh	r3, [r4, #12]
 8002738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	bf14      	ite	ne
 8002742:	2340      	movne	r3, #64	@ 0x40
 8002744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002748:	2000      	movs	r0, #0
 800274a:	6031      	str	r1, [r6, #0]
 800274c:	602b      	str	r3, [r5, #0]
 800274e:	b016      	add	sp, #88	@ 0x58
 8002750:	bd70      	pop	{r4, r5, r6, pc}
 8002752:	466a      	mov	r2, sp
 8002754:	f000 f882 	bl	800285c <_fstat_r>
 8002758:	2800      	cmp	r0, #0
 800275a:	dbec      	blt.n	8002736 <__swhatbuf_r+0x12>
 800275c:	9901      	ldr	r1, [sp, #4]
 800275e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002766:	4259      	negs	r1, r3
 8002768:	4159      	adcs	r1, r3
 800276a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800276e:	e7eb      	b.n	8002748 <__swhatbuf_r+0x24>

08002770 <__smakebuf_r>:
 8002770:	898b      	ldrh	r3, [r1, #12]
 8002772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002774:	079d      	lsls	r5, r3, #30
 8002776:	4606      	mov	r6, r0
 8002778:	460c      	mov	r4, r1
 800277a:	d507      	bpl.n	800278c <__smakebuf_r+0x1c>
 800277c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	6123      	str	r3, [r4, #16]
 8002784:	2301      	movs	r3, #1
 8002786:	6163      	str	r3, [r4, #20]
 8002788:	b003      	add	sp, #12
 800278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278c:	ab01      	add	r3, sp, #4
 800278e:	466a      	mov	r2, sp
 8002790:	f7ff ffc8 	bl	8002724 <__swhatbuf_r>
 8002794:	9f00      	ldr	r7, [sp, #0]
 8002796:	4605      	mov	r5, r0
 8002798:	4639      	mov	r1, r7
 800279a:	4630      	mov	r0, r6
 800279c:	f7ff fa0a 	bl	8001bb4 <_malloc_r>
 80027a0:	b948      	cbnz	r0, 80027b6 <__smakebuf_r+0x46>
 80027a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027a6:	059a      	lsls	r2, r3, #22
 80027a8:	d4ee      	bmi.n	8002788 <__smakebuf_r+0x18>
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	81a3      	strh	r3, [r4, #12]
 80027b4:	e7e2      	b.n	800277c <__smakebuf_r+0xc>
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	6020      	str	r0, [r4, #0]
 80027ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027be:	81a3      	strh	r3, [r4, #12]
 80027c0:	9b01      	ldr	r3, [sp, #4]
 80027c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80027c6:	b15b      	cbz	r3, 80027e0 <__smakebuf_r+0x70>
 80027c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027cc:	4630      	mov	r0, r6
 80027ce:	f000 f825 	bl	800281c <_isatty_r>
 80027d2:	b128      	cbz	r0, 80027e0 <__smakebuf_r+0x70>
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	f023 0303 	bic.w	r3, r3, #3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	81a3      	strh	r3, [r4, #12]
 80027e0:	89a3      	ldrh	r3, [r4, #12]
 80027e2:	431d      	orrs	r5, r3
 80027e4:	81a5      	strh	r5, [r4, #12]
 80027e6:	e7cf      	b.n	8002788 <__smakebuf_r+0x18>

080027e8 <memmove>:
 80027e8:	4288      	cmp	r0, r1
 80027ea:	b510      	push	{r4, lr}
 80027ec:	eb01 0402 	add.w	r4, r1, r2
 80027f0:	d902      	bls.n	80027f8 <memmove+0x10>
 80027f2:	4284      	cmp	r4, r0
 80027f4:	4623      	mov	r3, r4
 80027f6:	d807      	bhi.n	8002808 <memmove+0x20>
 80027f8:	1e43      	subs	r3, r0, #1
 80027fa:	42a1      	cmp	r1, r4
 80027fc:	d008      	beq.n	8002810 <memmove+0x28>
 80027fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002806:	e7f8      	b.n	80027fa <memmove+0x12>
 8002808:	4402      	add	r2, r0
 800280a:	4601      	mov	r1, r0
 800280c:	428a      	cmp	r2, r1
 800280e:	d100      	bne.n	8002812 <memmove+0x2a>
 8002810:	bd10      	pop	{r4, pc}
 8002812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800281a:	e7f7      	b.n	800280c <memmove+0x24>

0800281c <_isatty_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4d06      	ldr	r5, [pc, #24]	@ (8002838 <_isatty_r+0x1c>)
 8002820:	2300      	movs	r3, #0
 8002822:	4604      	mov	r4, r0
 8002824:	4608      	mov	r0, r1
 8002826:	602b      	str	r3, [r5, #0]
 8002828:	f7fd ff2b 	bl	8000682 <_isatty>
 800282c:	1c43      	adds	r3, r0, #1
 800282e:	d102      	bne.n	8002836 <_isatty_r+0x1a>
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	b103      	cbz	r3, 8002836 <_isatty_r+0x1a>
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	bd38      	pop	{r3, r4, r5, pc}
 8002838:	2000035c 	.word	0x2000035c

0800283c <_sbrk_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	4d06      	ldr	r5, [pc, #24]	@ (8002858 <_sbrk_r+0x1c>)
 8002840:	2300      	movs	r3, #0
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7fd ff34 	bl	80006b4 <_sbrk>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d102      	bne.n	8002856 <_sbrk_r+0x1a>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	b103      	cbz	r3, 8002856 <_sbrk_r+0x1a>
 8002854:	6023      	str	r3, [r4, #0]
 8002856:	bd38      	pop	{r3, r4, r5, pc}
 8002858:	2000035c 	.word	0x2000035c

0800285c <_fstat_r>:
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4d07      	ldr	r5, [pc, #28]	@ (800287c <_fstat_r+0x20>)
 8002860:	2300      	movs	r3, #0
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	f7fd fefa 	bl	8000662 <_fstat>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	d102      	bne.n	8002878 <_fstat_r+0x1c>
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	b103      	cbz	r3, 8002878 <_fstat_r+0x1c>
 8002876:	6023      	str	r3, [r4, #0]
 8002878:	bd38      	pop	{r3, r4, r5, pc}
 800287a:	bf00      	nop
 800287c:	2000035c 	.word	0x2000035c

08002880 <memcpy>:
 8002880:	440a      	add	r2, r1
 8002882:	4291      	cmp	r1, r2
 8002884:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002888:	d100      	bne.n	800288c <memcpy+0xc>
 800288a:	4770      	bx	lr
 800288c:	b510      	push	{r4, lr}
 800288e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002896:	4291      	cmp	r1, r2
 8002898:	d1f9      	bne.n	800288e <memcpy+0xe>
 800289a:	bd10      	pop	{r4, pc}

0800289c <_malloc_usable_size_r>:
 800289c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028a0:	1f18      	subs	r0, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bfbc      	itt	lt
 80028a6:	580b      	ldrlt	r3, [r1, r0]
 80028a8:	18c0      	addlt	r0, r0, r3
 80028aa:	4770      	bx	lr

080028ac <_init>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr

080028b8 <_fini>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	bf00      	nop
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr
